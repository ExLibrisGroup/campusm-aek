{
  "_args": [
    [
      {
        "raw": "@ombiel/aek-asset-store@0.0.x",
        "scope": "@ombiel",
        "escapedName": "@ombiel%2faek-asset-store",
        "name": "@ombiel/aek-asset-store",
        "rawSpec": "0.0.x",
        "spec": ">=0.0.0 <0.1.0",
        "type": "range"
      },
      "C:\\Users\\paytonp\\dev-net-tracker"
    ]
  ],
  "_from": "@ombiel/aek-asset-store@>=0.0.0 <0.1.0",
  "_id": "@ombiel/aek-asset-store@0.0.8",
  "_inCache": true,
  "_location": "/@ombiel/aek-asset-store",
  "_nodeVersion": "6.5.0",
  "_npmUser": {
    "name": "rich",
    "email": "rich@stutfield.net"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@ombiel/aek-asset-store@0.0.x",
    "scope": "@ombiel",
    "escapedName": "@ombiel%2faek-asset-store",
    "name": "@ombiel/aek-asset-store",
    "rawSpec": "0.0.x",
    "spec": ">=0.0.0 <0.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://npm.campusm.net/@ombiel%2faek-asset-store/-/aek-asset-store-0.0.8.tgz",
  "_shasum": "b1e33b837658deb6e3cfc4ebe4b3fab29f56195c",
  "_shrinkwrap": null,
  "_spec": "@ombiel/aek-asset-store@0.0.x",
  "_where": "C:\\Users\\paytonp\\dev-net-tracker",
  "dependencies": {},
  "description": "AssetStore provides a way to explicitly store, retrieve, execute and evaluate assets (js, css, images, etc) in a range of supported local storage systems (indexDB, Web SQL, localStorage). AssetStore will automatically use the best storage system available on the client.",
  "devDependencies": {
    "@ombiel/aek-buildtools": "0.2.x",
    "@ombiel/aek-cli": "0.2.x",
    "babel-eslint": "^4.1.3",
    "blob-util": "^1.2.1",
    "eslint": "^1.5.1",
    "eslint-plugin-react": "^3.4.2",
    "gulp": "^3.8.11",
    "localforage": "~1.4.2",
    "raw-loader": "^0.5.1"
  },
  "dist": {
    "shasum": "b1e33b837658deb6e3cfc4ebe4b3fab29f56195c",
    "tarball": "https://npm.campusm.net/@ombiel%2faek-asset-store/-/aek-asset-store-0.0.8.tgz"
  },
  "gitHead": "6bf6b3a6e686d9c664fd5e4a2d1b85e17311b6f5",
  "license": "-",
  "maintainers": [
    {
      "name": "rich",
      "email": "rich@stutfield.net"
    }
  ],
  "name": "@ombiel/aek-asset-store",
  "ombiel": {
    "access": {
      "read": true
    }
  },
  "optionalDependencies": {},
  "readme": "# AEK Asset Store\n\nAssetStore provides a way to explicitly store, retrieve, execute and evaluate assets (js, css, images, etc) in a range of supported local storage systems (indexDB, Web SQL, localStorage). AssetStore will automatically use the best storage system available on the client.\n\nAssetStore provides a more robust alternative to standard URLCache and provides simple mechanics for prefetching assets asynchronously thus providing performance optimisations and offlineability.\n\n## Usage (new AEK projects)\n\nWhen creating a new project you can explicitly request the `assetstore` variation of the standard boilerplate.\n\n```sh\naek create -b exlibris-boilerplate-aek-react@assetstore\n```\n\nThat's it!!\n\n## Usage (existing AEK projects)\n\nTo modify an existing AEK project, first install the `aek-asset-store` module in your project\n\n```bash\naek install aek-asset-store --save-dev\n```\n\nIn order to modify the way in which assets are loaded, you need to modify this section in the `src/screens/templates/master.ect` file.\n\nReplace the following code...\n\n```markup\n<script type=\"text/aekdefer\">\n\n  var sheets = <<- JSON.stringify(@get_stylesheets()) >>;\n  sheets = sheets.map(function(s) {return s.match(/^(https?:\\/)?\\//) && s || \"[[__public_assets__]]/css/\"+s+\".css\"});\n\n  var scripts = <<- JSON.stringify(@get_scripts()) >>;\n  scripts = scripts.map(function(s) {return s.match(/^(https?:\\/)?\\//) && s || \"[[__public_assets__]]/js/\"+s+\".js\"});\n\n  _aekLoad(sheets.concat(scripts));\n\n</script>\n\n<script>\n  window.addEventListener(\"load\",function() {\n    var script = document.createElement(\"script\");\n    script.src = \"https://portal.ombiel.co.uk/assets/aek/aek-loader/0.0.6/packed/loader.js\";\n    document.head.appendChild(script);\n  });\n</script>\n```\n\nwith this alternative...\n\n```markup\n<script>\n\n  << include '../../node_modules/@ombiel/aek-asset-store/public/include.js' >>\n\n  loadCampusmAssetStore(function(assetStore) {\n\n    var sheets = <<- JSON.stringify(@get_stylesheets()) >>;\n    sheets = sheets.map(function(s) {return s.match(/^(https?:\\/)?\\//) && s || \"[[__public_assets__]]/css/\"+s+\".css\"});\n\n    var scripts = <<- JSON.stringify(@get_scripts()) >>;\n    scripts = scripts.map(function(s) {return s.match(/^(https?:\\/)?\\//) && s || \"[[__public_assets__]]/js/\"+s+\".js\"});\n\n    assetStore.fetchAssets(scripts);\n    assetStore.loadCSS(sheets).then(function() {\n      assetStore.loadJS(scripts);\n    });\n\n  });\n\n</script>\n```\n\n## API\n\nOnce loaded, an instance of AssetManager is available from the global scope using `CampusM.assetStore` providing the following API.\n\n----\n\n** `assetStore.fetchAssets(url:string)` **  \n** `assetStore.fetchAssets(urls:Array<string)` **\n\nAsynchronously fetches and stores the assets given by the provided url(s). If the asset has already been fetched, no remote requests is made and the content is simply retrieved from storage.\n\nreturns : `Promise.<Array<{code: string; err: Error}>>`\n\n-------------------------------\n\n** `assetStore.loadJS(url:string)` **  \n** `assetStore.loadJS(urls:Array<string>)` **\n\nPerforms a fetch (as above) and then evaluates/executes the code. For multiple URLs, the assets will be retrieved asynchronously but evaluated in the order provided in the array.\n\nreturns : `Promise`\n\n-------------------\n\n** `assetStore.loadCSS(url:string)` **  \n** `assetStore.loadCSS(urls:Array<string)` **\n\nPerforms a fetch (as above) and then injects the stylesheet into the current document. For multiple URLs, the assets will be retrieved asynchronously but rendered in the order provided in the array.\n\nreturns : `Promise`\n\n-----------------\n\n** `assetStore.getImgSrc(url:string)` **\n\nPerforms a fetch (as above) and resolves with a valid data URI for the image. If the image can not be URI encoded due to cross-origin policy or otherwise, the promise will resolve with the original URL instead.\n\nreturns: `Promise.<string>`\n\n----------\n\n## Caveats\n\nAssetsStore can only store assets when the following conditions are met.\n\n1. Asset server must provide a `cache-control` http header for the asset.  \n\n2. The `cache-control` must not include `no-cache`, `no-store`, `max-age=0` or `s-maxage=0`  \n\n3. The server must provide cross-origin access (CORS) to the asset using `access-control-allow-origin`\n\nThe above conditions are met by the CampusM asset servers so any assets deployed via AEK tools should be suitable for storage.\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "-"
  },
  "scripts": {},
  "version": "0.0.8"
}
