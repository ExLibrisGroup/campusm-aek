"use strict";

var gift = require("gift");
var log = require("@ombiel/aek-log");
var ombConf = require("@ombiel/aek-fstore")("./package.json","ombiel");
var runtask = require("./runtask");
var fs = require("fs");

module.exports = function(opts) {
  if(!opts) { opts = {}; }
  return function(cb) {
    var repo = gift("./");
    log.info("running pre-deploy");

    var checkWebpack = function() {
      if(opts.alwaysBuild || (ombConf.get("webpack.build.dev") !== ombConf.get("webpack.build.prod.dev",true))) {
        log.info("Building Webpack production assets");
        runtask("webpack_prod",opts.gulp,function() {
          repo.add("./",function() {
            repo.commit("Build Webpack production assets",function() {
              cb();
            });
          });
        });
      }
      else{ cb(); }
    };


    var checkCSS = function() {
      if(opts.alwaysBuild || (ombConf.get("css.build.dev") !== ombConf.get("css.build.prod.dev",true))) {
        log.info("Building CSS production assets");
        runtask("css_prod",opts.gulp,function() {
          repo.add("./",function() {
            repo.commit("Build CSS production assets",function() {
              checkWebpack();
            });
          });
        });
      }
      else{ checkWebpack(); }
    };
    if(fs.existsSync("./.git")) {
      repo.status(function(err,status) {
        if(err) {
          cb(err);
        }
        else if(status && !status.clean) {
          log.error("git repo is not clean, please commit any changes before deploying");
          process.exit(); //eslint-disable-line no-process-exit
        }
        else {
          if(opts.buildTask) {
            runtask(opts.buildTask,opts.gulp,function() {
              repo.add("./",function() {
                repo.status(function(statusErr,postStatus) {
                  if(statusErr) {
                    cb(statusErr);
                  }
                  else {
                    if(postStatus && postStatus.clean === true) {
                      cb();
                    }
                    else {
                      repo.commit("Predeploy build",cb);
                    }
                  }
                });
              });
            });
          }
          else {
            checkCSS();
          }
        }
      });
    }
    else {
      if(opts.buildTask) {
        runtask(opts.buildTask,opts.gulp,cb);
      }
      else {
        checkCSS();
      }
    }
  };
};
