
var through = require('through2');
// fs = require("fs")
path = require("path")
// swig = require('swig')
// extReplace = require("gulp-ext-replace")
// var _ = require("lodash");
var rewire = require("rewire");
var Promise = require("rsvp").Promise;
var gulp = require("gulp");
var plumber = require("gulp-plumber");
var chalk = require("chalk");
var eyes = require("eyes");
var notifier = require("../notifier");
var _ = require("lodash");


var gulpScreens = function(env) {

  return through.obj(function(file, enc, cb) {

    var that = this;
    var promise;

    try {
      var ext = _.last(file.path.split("."));
      if(ext==="json") {
        promise = Promise.resolve(rewire(file.path)).then(function(data) {
          return Promise.resolve(rewire("../screen")({env:env},data.locals,data.template));
        });
      }
      else {
        promise = Promise.resolve(rewire(file.path)({env:env}));
      }
      promise.then(function(content) {
        file.contents = new Buffer(content);
        file.path = file.path.replace(/\.\w+$/gi, ".twig");
        that.push(file);
        cb();
      });
      promise.catch(function(err) {
        cb(err);
      });
    }
    catch(err) {
      cb(err);
    }
  });
};



module.exports = function(dev,opts) {
  opts = opts || {};
  var name = dev && "dev" || "prod";
  var Name = dev && "Development" || "Production";
  var hasErrors = false;
  return gulp.src('src/screens/*.*')
    .pipe(plumber({errorHandler: function(error) {
      hasErrors = true;
      console.log(chalk.red("ERROR"));
      eyes.inspect(error);
      try {
        notifier.notify({title:"AEK Error: " + Name + " Screen Build",message:error.message,sound:"Basso"});
      }
      catch(err) {} // eslint-disable-line no-empty
    }}))
    .pipe(gulpScreens(name))
    .pipe(gulp.dest(path.resolve(opts.dest || 'screens/',name)))
    .on('end',function() {
      if(!hasErrors) {
        try {
          notifier.notify({title:"AEK",message:Name + " Screens Built",sound:"Pop"});
        }
        catch(err) {} // eslint-disable-line no-empty
      }
    });
};
