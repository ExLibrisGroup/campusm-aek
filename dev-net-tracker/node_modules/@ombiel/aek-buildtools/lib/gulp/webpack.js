var glob = require("glob");
var gulp = require("gulp");
var gulpWebpack = require("gulp-webpack");
var _ = require("lodash");
var notifier = require("../notifier");
var plumber = require("gulp-plumber");
var chalk = require("chalk");
var eyes = require("eyes");
var notifier = require("../notifier");

var ombConf = require("@ombiel/aek-fstore")("./package.json","ombiel");

var webpackCache = {};
var webpackCacheProd = {};

module.exports = function(prod, srcBase, dest, commons, noMaps) {

  var opts = {};

  if(typeof srcBase === "object") {
    opts = srcBase;
    srcBase = opts.srcBase;
    if(!dest) { dest = opts.dest; }
    if(opts.commons != null) { commons = opts.commons; }
    if(opts.noMaps != null) { noMaps = opts.noMaps; }
    else {
      noMaps = prod;
    }
  }

  srcBase = srcBase || "./src/client/js";

  var entryFiles = glob.sync(srcBase + "/*.*").map(function(filename) {
    return filename;
  });


  if (entryFiles.length < 1) {
    return null;
  }

  var entry = {};

  entryFiles.forEach(function(filePath) {
    var split = filePath.split("/");
    var filename = split[split.length - 1];
    entry[filename.split(".")[0]] = filePath;
  });


  var webpackConfig = require("../webpack-config")(_.extend({},opts,{
    entry:entry,
    commons:commons,
    noMaps:noMaps,
    prod:prod
  }));

  webpackConfig.cache = prod && webpackCacheProd || webpackCache;

  dest = dest || (prod && 'public/prod/packed' || 'public/dev/packed');

  function handleStats(err,stats) {
    if(err) {
      try {
        notifier.notify({title:"Webpack Error",sound:"Basso",message:JSON.stringify(err,null,2)});
      }
      catch(err) {} // eslint-disable-line no-empty
    }
    else {

      var hasErrors = stats.hasErrors();

      var sound = hasErrors && "Basso" || (!(prod) && "Tink");

      var title = "Webpack " + (prod && "PROD " || "");

      if(hasErrors) {
        try {
          notifier.notify({title:title + "Error",sound:"Basso",message:stats.toString().substring(0,1024)});
        }
        catch(err) {} // eslint-disable-line no-empty
      }
      else {
        try {
          notifier.notify({title:title + "Success",sound:sound,message:stats.toString().substring(0,1024)});
        }
        catch(err) {} // eslint-disable-line no-empty
        if(opts.recordHash !== false) {
          if(!prod) {
            ombConf.set("webpack.build.dev",stats.hash);
          }
          else {
            ombConf.set("webpack.build.prod",{prod:stats.hash,dev:ombConf.get("webpack.build.dev")});
          }
        }
      }



      console.log("----webpack----");
      console.log(stats.toString({
        colors:true,
        hash:true,
        timings:true,
        assets:true,
        chunks:false,
        chunkModules:false,
        modules:false,
        children:true
      }));
      console.log("---------------");
    }
  }

  return gulp.src(entryFiles[0])
    .pipe(gulpWebpack(webpackConfig,null,handleStats))
    .pipe(gulp.dest(dest));
    // .on('end',function() {});
};
