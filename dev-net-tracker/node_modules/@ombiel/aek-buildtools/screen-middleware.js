/* global escape */
var _ = require("lodash");
var glob = require("glob");
var path = require("path");
var ect = require("ect");
var fs = require("fs");
var chokidar = require("chokidar");
var Ansi2Html = require('ansi-to-html');
var ansi2Html = new Ansi2Html({fg:"#000000",bg:"#ffffff",newline:true});
var mkdirp = require("mkdirp");
var Promise = require("rsvp").Promise;
var entities = require("entities");


var defaultLocals = {
  twigify:function(v) {
    if(_.isNumber(v)) {
      return v;
    }
    else {
      return '"' + v.replace(/\"/gi,'""') + '"';
    }
  },
  bodyAttributes:"", // eslint-disable-line camelcase
  bodyDataAttributes:{}, // eslint-disable-line camelcase
  scripts:[],
  stylesheets:[]

};

var options = {};

var screens;

function transpile(buildOptions) {

  var env = buildOptions.env === "prod" ? "prod" : "dev";

  var files = glob.sync("/*.{ect,twig}",{root:options.srcBase});

  screens = {};
  files.forEach(function(file) {
    var filename = path.basename(file);

    var locals = _.cloneDeep(defaultLocals);
    locals.env = env;
    locals._ = _;
    locals.configure = function(settings) {
      _.extend(locals,settings);
      // we must have connected version in prod so override it
      if(env === "prod") {
        locals.connected = true;
      }
    };
    locals.get_scripts = function() {  // eslint-disable-line camelcase
      return locals.scripts.map(function(script) {
        return script[env] || script;
      });
    };
    locals.get_stylesheets = function() {  // eslint-disable-line camelcase
      return locals.stylesheets.map(function(stylesheet) {
        return stylesheet[env] || stylesheet;
      });
    };
    locals.get_body_attributes = function() {  // eslint-disable-line camelcase
      var val;
      var bodyAttributes = locals.bodyAttributes;
      for(var name in locals.bodyDataAttributes) {
        val = locals.bodyDataAttributes[name];
        if(_.isString(val) || _.isNumber(val)) {
          bodyAttributes += ' data-' + name + '="' + entities.encodeXML(val) + '" ';  // eslint-disable-line camelcase
        }
        else {
          bodyAttributes += ' data-o-b-j-' + name + '="' + entities.encodeXML(JSON.stringify(val)) + '" ';  // eslint-disable-line camelcase
        }
      }
      return bodyAttributes;
    };

    if(options.locals) {
      locals = _.extend({},locals,options.locals);
    }

    var renderer = ect({ root : options.srcBase,open:"<<",close:">>" });
    var screenName = path.basename(file,path.extname(file));

    var content;
    try {
      content = renderer.render(filename, locals);
    }
    catch(e) {
      content = ansi2Html.toHtml(e.toString());
    }

    screens[screenName] = {
      name:screenName,
      content:content,
      offline:!locals.connected
    };
  });

  return screens;
}

module.exports = function(req,res,next) {
  if(!screens) {
    chokidar.watch(path.resolve(options.srcBase)).on("all",_.debounce(function() {
      transpile({});
    },100));
  }
  req.screens = screens || transpile({});
  next();
};

module.exports.setOptions = function(opts) {
  options = opts;
};

module.exports.gulp = function(opts) {

  opts = _.merge({},options,opts);

  return function() {
    return new Promise(function(resolve,reject) {
      transpile(opts);
      if(!_.keys(screens).length) {
        resolve();
      }
      else {
        mkdirp(path.resolve(opts.dest),function(err) {
          if(err) {
            console.error(err);
            reject(err);
          }
          else {
            var promise = Promise.resolve();
            _.each(screens,function(screen) {
              var filePromise = new Promise(function(res,rej) {
                fs.writeFile(path.resolve(opts.dest,screen.name + ".twig"),screen.content,function(writeErr) {
                  if(writeErr) { rej(writeErr); }
                  else { res(); }
                });
              });

              promise = promise.then(function() { return filePromise; });
            });
            promise.then(resolve);
          }
        });
      }
    });
  };
};
