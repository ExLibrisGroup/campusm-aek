log = require("../logger")
Promise = require("rsvp").Promise
fs = require("fs")
wrench = require("wrench")
auth = require("../auth")
path = require("path")
npm = require("../npm")
_ = require("lodash")
pullPackage = require("../pull-package")

boilerplates = {
  "Standard (recommended)":"exlib-boilerplate-aek-react"
  "React15 version (beta)":"exlib-boilerplate-aek-react@react15"
  "aek-basic":"omb-boilerplate-aek-basic"
}
  

start = Date.now()
module.exports =
  name:"create"
  help:"create a new package"
  options:[
    {
      name:"username"
      message:"Please enter your App Manager username"
      noPrompt:true
    }
    {
      name:"password"
      message:"Please enter your App Manager password"
      inputType:"password"
      noPrompt:true
    }
    {
      name:"name"
      position:1
      help:"Name of package"
      message:"Name of Package"
      required:true
      promptIfMissing:true
    }
    {
      name:"boilerplate"
      abbr:"b"
      help:"Name of boilerplate"
      message:"Please select a boilerplate for your new project"
      choices:_.keys(boilerplates)
      required:true
      promptIfMissing:true
      choiceIsOpen:true
    }
    {
      name:"devHost"
      help:"default hostname to run your dev server under (can be modified later in package.json)"
      message:"Please specify a hostname to run your dev server against"
      default:"bigskyu.ombiel.co.uk"
      beforeInquiry:auth.getOptionHostnames
      promptIfMissing:true
    }
  ]
  callback:(options)->
    returnError = (str)->
      log.error(str)
      process.exit()
    
    auth.getUserDetails(options)
      .then (userDetails)->
        packageName = options.name
        ## validate package name
        if !(/^[a-z0-9\-]{6,}$/).test(packageName)
          returnError("Sorry, this is not a valid package name. Please use at least 6 lowercase characters, hyphens or numbers. Do not use uppercase characters these are not accepted.")

        if userDetails.apps != "all"
          nspace = packageName.split("-")[0]
          if nspace in ["aek","omb","ombiel","exlib","exlibris"]
            returnError("Sorry, this is a reserved namespace, please try a different name")

        
        
        boilerplateName = boilerplates[options.boilerplate] || options.boilerplate

        cli = require("../cli")

        packageName = options.name
        
        pullOptions = {package:boilerplateName}
        if pullOptions.package.indexOf("@ombiel/")!=0
          pullOptions.package = "@ombiel/"+pullOptions.package

        destination = pullOptions.destination = "./"+packageName

        pullPackage(pullOptions).then(
          ()-> 
            log.info("Successfully extracted boilerplate (#{pullOptions.package})")
  
            pkgjson = require("../fstore")(path.resolve(destination,"package.json"))

            ombData = {
              boilerplate:pkgjson.get("name")+'@'+pkgjson.get("version")
              access:{
                write:{
                  users:[userDetails.username]
                }
              }
            };

            if options.devHost
              ombData.runserver = {hostname:options.devHost}

            pkgjson.set("ombiel",ombData)
            pkgjson.set("name","@ombiel/"+packageName)
            pkgjson.set("version","0.0.1")

            process.chdir(path.resolve(destination))
            log.info("Installing...")
            npm.command("install")

          ,(err)->
            returnError(err)
        )
