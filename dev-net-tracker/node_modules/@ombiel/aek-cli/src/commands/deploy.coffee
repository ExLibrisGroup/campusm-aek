log = require("../logger")
Promise = require("rsvp").Promise
npm = require "../npm"
config = require "../config"
utils = require "../utils"
gulpTask = require("../gulp-task")
pkgOmbiel = require("../fstore")("./package.json","ombiel")

shasum = require "shasum"

_ = require("lodash")
fs = require("fs")
# URL = require("url")

request = require("request")


auth = require("../auth")


module.exports =
  name:"deploy"
  help:"Deploy a package to your app"

  options:[
    {
      name:"username"
      message:"Please enter your App Manager username"
    }
    {
      name:"password"
      message:"Please enter your App Manager password"
      inputType:"password"
    }
    {
      name:"package"
      message:"Name of package to deploy (defaults to working directory)"
      position:1
    }
    {
      name:"hostname"
      message:"Which hostname would you like to target",
      beforeInquiry:(opts,data)->
        auth.getOptionHostnames(opts,data,pkgOmbiel.get("deployTarget"))

      promptIfMissing:true
    }
    
    {
      name:"version"
      message:"Version number or tag (defaults to 'latest')"
    }
    {
      name:"newversion"
      abbr:"n"
      flag:true
      message:"Automatically bump version number"
    }
    {
      name:"appManagerBase"
      noPrompt:true
      default:pkgOmbiel.get("appManager.baseURL")
    }
    {
      name:"bypassSSLVerification"
      noPrompt:true
      default:pkgOmbiel.get("appManager.bypassSSLVerification") || false
    }
  ]

  callback:(options)->

    returnError = (str)->
      log.error(str)
      process.exit()

    getPackageInfo = (key)->
      pjson = fs.readFileSync("./package.json")
      try
        pjson = JSON.parse(pjson)
      catch e
        returnError("Unable to parse package.json")
      return pjson[key]

  

    auth.getUserDetails(options)
      .then (userDetails)->

        pkg = options.package
        version = options.version

        promise = Promise.resolve()

        if !pkg
          
          log.info("No package specified")

          ## check name
          name = getPackageInfo("name")
          if !name
            returnError("""Package must have a name (eg {"name":"@ombiel/mypackage"})""")

          if name.indexOf("@ombiel")!=0
            returnError("""To push packages to the AEK registry, you must use the "ombiel" scope - please prefix your package name with "@ombiel" (eg {"name":"@ombiel/mypackage"})""")

          pkg = name

          log.info("Using package from working directory: "+pkg)

          if !version
            log.info("No version specified")
            promise = promise.then ()->
              return new Promise (resolve,reject)->
              
                workingVersion = getPackageInfo("version") ? "0.0.1"
                log.info "current working version: "+workingVersion
                
                npm.view().then (data)->
                  # console.log("data",data)
                  currentVersion = data?.version

                  log.info "Latest registry version is: "+currentVersion

                  if !options.newversion && (currentVersion == workingVersion)
                    log.warn "This package already exists in the registry"
                    log.warn "To deploy a new version, change the version number in package.json or use the '--newversion' option"
                    version = currentVersion
                    resolve(true)
                  else

                    gulpTask "_predeploy",(err,args...)->
                      versionPromise = Promise.resolve()
                      workingVersion = getPackageInfo("version") ? "0.0.1"
                      version = workingVersion
                      if currentVersion == workingVersion
                        log.info "Bumping version number..."
                        versionPromise = npm.command("version",["patch"],"pipe").then (newVersionNumber)->
                          if newVersionNumber.charAt(0) == "v"
                            newVersionNumber = newVersionNumber.substr(1)
                          log.info "New version number is: "+newVersionNumber
                          version = newVersionNumber

                      versionPromise.then ()->
                        log.warn "Pushing working package to registry (#{version})"
                        npm.command("publish").then ()->
                          resolve(true)
        
                      

        promise.then ()->
          if !pkg
            returnError("""package undeterminable""")

          if pkg.indexOf("@ombiel/")!=0
            pkg = "@ombiel/"+pkg
          
          if !version and pkg.substr(1).indexOf("@") == -1

            version = "latest"

          if version
            if version.indexOf("v")==0
              version = version.substr(1)
            if version.indexOf("@")!=0
              version = "@"+version
            pkg = pkg + version

          log.info("Deploying package: ",pkg)

          npm.view(pkg)
            .then (data)->

              if !data
                returnError("Can't find package: #{pkg}")

              if data.ombiel?.deployable==false
                returnError("This package has been flagged as non-deployable as it is designed for library use only")

              log.info("Package tarball is: "+data.dist.tarball)
              
              dc = utils.getDC(userDetails.username)

              requestOptions = 
                strictSSL:!options.bypassSSLVerification
                form:
                  username:dc.username
                  token:userDetails.token
                  hostname:options.hostname
                  tarball:data.dist.tarball
                  name:data.name.split("/").slice(1).join("/")
                  version:data.version
                
              # log.info("#{options.appManagerBase}/aek/tools/deploy")
              # log.info(requestOptions)

              request.post "#{options.appManagerBase || dc.appManagerBase}/aek/tools/deploy",requestOptions,(err,res,body)->

                if err
                  log.error "App Manager request failed",err

                try
                  data = JSON.parse(body)
                catch e
                  log.error "Unable to parse App Manager response",e
                  return
                
                
                
                if !data.details
                  log.error """#{data.msg && data.msg+": " || ""}#{_.isString(data.error) && data.error || "Deployment Failed"}"""
                
                else
                  log.info "Deploy Successful",{
                    details:_.omit(data.details,"token")
                    savedScreens:data.saved_screens
                    publicPaths:data.publicPaths
                  }

            .catch (err)->
              returnError(err)


        promise.catch (e)->
          log.error(e)





    # return true
