spawn = require("cross-spawn")
Promise = require("rsvp").Promise
log = require("./logger")
_ = require("lodash")
npm = require("npm")


command = (commandName,options=[],stdio="inherit")->
  return new Promise (resolve,reject)->
    Utils = require("./utils")
    args = _.isArray(options) && options || Utils.obj2Args(options)
    args = [commandName].concat(args)
    spawnOpts = {stdio:stdio}
    child = spawn("npm",args,spawnOpts)
    
    if stdio=="pipe"
      out = ""
      err = ""
      child.stdout.on "data",(data)->
        out += data.toString()
      child.stderr.on "data",(data)->
        err += data.toString()
    child.on "close",(exitCode)->
      if stdio=="inherit"
        if exitCode == 0
          resolve(out)
        else
          reject(exitCode)
      else
        if err 
          reject(err.trim())
        else
          resolve(out.trim())

api = (commandName,args,additional...)->
  return new Promise (resolve,reject)->
    npm.load [],()->
      npm.commands[commandName] args,additional...,(err,responseArgs...)->
        if err
          reject(err)
        else
          resolve(responseArgs...)

view = (packageName)->
  args = packageName && [packageName] || []
  return api("view",args,true)
    .then (data)->
      return _.values(data ? {})[0]
    .catch ()->
      return false

module.exports = {command,api,view}
