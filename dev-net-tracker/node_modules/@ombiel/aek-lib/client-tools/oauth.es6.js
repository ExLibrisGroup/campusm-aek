var utils = require("../utils");
var clientTools = require("../client-tools");
var EventEmitter = require("../event-emitter");




// in order to manage and handle oauth requests globally, we'll maintain a single promise
// at the topmost level of the app to prevent us repeating the same flow for simultaneous requests
var globalPromiseKey = "__CM_AEK_oAuthPromise";

// resets global promise by swallowing previous errors
// also used to generate the initial promise if it does not already exist
function resetGlobalPromise() {

  var globalPromise = window.top[globalPromiseKey] || Promise.resolve();

  return window.top[globalPromiseKey] = globalPromise
  .catch(()=>{});

}

// returns the current global promise to chain/queue further token requests
// this will generally be the last request in the queue
function getGlobalPromise() {
  return window.top[globalPromiseKey] || resetGlobalPromise();
}

// reset the globalPromise
function setGlobalPromise(promise) {
  return window.top[globalPromiseKey] = promise;
}




var getToken = (opts = {})=>{

  // ensure global oAuth promise exists to throttle token requests
  // if allowrenew, we'll reset the promise as this is a different flow and may have a different result
  var initPromise = opts.allowrenew ? resetGlobalPromise() : getGlobalPromise();

  var returnPromise = initPromise
  .then(()=>{
    return new Promise((resolve,reject)=>{

      var events = new EventEmitter();

      events.on("success",function(tokenDetails) {
        resolve(tokenDetails);
      });

      events.on("error",function(message,details) {
        var error = utils.normaliseError(message);
        if(details) {
          error.details = details;
        }
        reject(error);
      });

      events.on("success error",function() {
        events.off();
      });

      opts = utils.extend({},opts,{cb:events.emit.bind(events)});

      return clientTools.invoke("oAuthToken",opts);

    });
  });

  // if allowrenew, we'll catch any errors at the global level
  // as the behaviour can return different results
  // in this way we only batch the norenewal requests
  var newGlobalPromise = opts.allowrenew ? returnPromise.catch(()=>{}) : returnPromise;

  setGlobalPromise(newGlobalPromise);

  newGlobalPromise
  .catch(()=>{})
  .then(()=>{
    // if the global promise is unchanged,
    // we can assume the queue has completed and reset for any future requests
    if(getGlobalPromise() === newGlobalPromise) {
      resetGlobalPromise();
    }
  });

  return returnPromise;

};

module.exports = {getToken};
