var {createStore,combineReducers} = require("redux");
var _ = require("./utils");
var log = require("./utils/logger");


var storagize = (obj)=> {
  if(_.isArray(obj)) {
    return obj.map(storagize);
  }
  if(_.isPlainObject(obj)) {
    return _.chain(obj).omit(function(value,key){ return key.indexOf("$$$") === 0; }).mapValues(storagize).value();
  }
  return obj;
};

var fluxStore = (opts = {})=>{
  var defaultOpts = {
    reducers:{},
    initialState:{},
    storageReducer:storagize
  };

  opts = _.extend(defaultOpts,opts);

  var {localStorageKey,initialState,storageReducer,reducers} = opts;

  if(localStorageKey) {

    try {
      initialState = JSON.parse(localStorage[localStorageKey]);
    }
    catch(e) { log.warn("fluxStore","Unable to get initial state from storage"); }

  }

  var store = createStore(function(state = initialState,action) {

    log.info(action.type,action);

    var newState = combineReducers(reducers)(state,action);

    log.info("state",newState);

    if(localStorageKey) {
      try {
        localStorage[localStorageKey] = JSON.stringify(storageReducer(newState));
      }
      catch(e) { log.warn("Unable to persist state to storage",e); }
    }

    return newState;

  });

  return store;
};

module.exports = fluxStore;
