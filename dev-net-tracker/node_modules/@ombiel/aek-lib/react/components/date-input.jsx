var React = require("react");
var mergeProps = require("../utils/merge-props");
var moment = require("moment");
var Input = require("./input");
var Label = require("./label");


var _supportsDateInput;
function supportsDateInput() {
  if(_supportsDateInput == null) {
    var input = document.createElement("input");
    input.setAttribute("type","date");
    _supportsDateInput = input.type === "date";
  }
  return _supportsDateInput;
}



var DateInput = React.createClass({

  getDefaultProps:function() {
    return {
      dateDisplayFormat:"ddd DD MMM YYYY",
      dateInputFormat:"DD/MM/YYYY",
      dateValueFormat:"YYYY-MM-DD",
      invalidMessage:"This is not a valid date",
      allowNativeSupport:true
    };
  },

  getInitialState:function() {
    return {};
  },

  validateDate:function(date) {
    var m,
        dateIsValid,
        displayDate,
        value = "",
        inputDate;

    if(date) {
      if(typeof date === "string") {
        date = date.trim();
        // lets change uk date format to eu format for parsing
        var matches = date.match(/^(\d\d?)[\/\-](\d\d?)(([^\d])(.*))?/);
        if(matches) {
          date = `${matches[2]}/${matches[1]}`;
          if(matches[4]) {
            date += matches[4] === "-" && "/" || matches[4];
          }
          if(matches[5]) {
            date += matches[5];
          }
        }
      }

      m = moment(date);
      dateIsValid = m.isValid();
    }

    if(dateIsValid) {
      displayDate = m.format(this.props.dateDisplayFormat);
      inputDate = m.format(this.props.dateInputFormat);
      value = m.format(this.props.dateValueFormat);
    }


    return {dateIsValid,displayDate,value,inputDate};
  },

  componentWillMount:function() {
    var state = this.validateDate(this.props.value);
    state.userInputValue = state.inputDate;
    this.setState(state);
  },

  onChange:function(e) {
    var userInputValue = e.target.value || "";
    var {dateIsValid,displayDate,value} = this.validateDate(userInputValue);

    this.setState({userInputValue,dateIsValid,displayDate});

    if(this.props.onChange) {
      this.props.onChange(e,this.props.name,value);
    }
  },

  onFocus:function(ev) {
    this.setState({"focussed":true});
    if(this.props.onFocus) {
      this.props.onFocus(ev);
    }
  },

  onBlur:function(ev) {
    this.setState({"focussed":false});
    if(this.props.onBlur) {
      this.props.onBlur(ev);
    }
  },

  focus:function() {
    this.refs.input.focus();
  },

  supportsDateInput:function() {
    if(this.props.allowNativeSupport) {
      return supportsDateInput();
    }
    return false;
  },

  render: function() {

    var props = {},
        placeholder,
        displayDate;

    if(!this.supportsDateInput()) {
      props = mergeProps(this.props,{value:this.state.userInputValue,type:"text"});
      if(props.maxLength === undefined) {
        props.maxLength = this.props.dateInputFormat.length;
      }
      if(this.state.displayDate) {
        var displayDateProps = mergeProps({className:"positive label aek-valid-date-display"},{classSet:{focussed:this.state.focussed}});
        displayDate = <Label {...displayDateProps} onClick={this.focus} onFocus={this.focus}>{this.state.displayDate}</Label>;
      }
      else if(this.state.userInputValue && document.activeElement !== this.refs.input.getDOMNode()) {
        displayDate = <Label className="negative pointing above">{this.props.invalidMessage}</Label>;
      }
    }

    else {
      props = {type:"date",classSet:{"aek-show-placeholder":!this.props.value}};

      props = mergeProps(this.props,props);

      if(!this.props.value && this.props.placeholder) {
        placeholder = <div className="aek-date-input-placeholder"><span>{this.props.placeholder}</span></div>;
      }
    }

    return (
      <div className="aek-native-date-input">
        <Input {...props} ref="input" onChange={this.onChange} onFocus={this.onFocus} onBlur={this.onBlur}/>
        { placeholder }
        { displayDate }
      </div>
    );
  }
});

DateInput.defaultPlaceholder = "dd/mm/yyyy";

module.exports = DateInput;
