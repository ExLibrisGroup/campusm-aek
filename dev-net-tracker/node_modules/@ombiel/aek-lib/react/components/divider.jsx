var React = require("react");
var mergeProps = require("../utils/merge-props");
var getChildren = require("../utils/children");
var pickHtmlProps = require("../utils/pick-html-props");
var _ = require("-aek/utils");

var Divider = React.createClass({

  getDefaultProps:function() {
    return {
      component:"div",
      clearing:true
    };
  },

  render:function() {

    var props = this.props;
    var classSet = { ui:true };
    var children = getChildren(this);


    // states
    ["inverted","clearing","hidden","vertical"].forEach(function(prop) {
      if(props[prop]) { classSet[prop] = true; }
    });

    if(props.icon) {
      children.unshift(<i key="icon" className={props.icon+" icon"}/>);
    }

    ["variation"].forEach(function(prop) {
      if(props[prop]) { classSet[props[prop]] = true; }
    });

    classSet.horizontal = children.length && !props.vertical;

    classSet.divider = true;

    props = mergeProps({classSet},props,{hidden:null});

    let {component} = props;

    if (_.isString(component)) {
      props = pickHtmlProps(props);
    }

    return React.createElement(component,props,children);

  }

});

var SectionDivider = React.createClass({

  render:function() {

    return <Divider variation="section" {...this.props} />;

  }
});

var HeaderDivider = React.createClass({

  render:function() {

    return <Divider component="h4" variation="header" {...this.props} />;

  }
});

var FittedDivider = React.createClass({

  render:function() {

    return <Divider variation="fitted" {...this.props} />;

  }
});

var HiddenDivider = React.createClass({

  render:function() {

    return <Divider hidden {...this.props} />;

  }
});

var VerticalDivider = React.createClass({

  render:function() {

    return <Divider vertical {...this.props} />;

  }
});

var InvertedDivider = React.createClass({

  render:function() {
    return <Divider inverted {...this.props} />;
  }

});

Divider.SectionDivider = SectionDivider;
Divider.HeaderDivider = HeaderDivider;
Divider.FittedDivider = FittedDivider;

Divider.HiddenDivider = HiddenDivider;
Divider.VerticalDivider = VerticalDivider;
Divider.InvertedDivider = InvertedDivider;

Divider.Divider = Divider;

module.exports = Divider;
