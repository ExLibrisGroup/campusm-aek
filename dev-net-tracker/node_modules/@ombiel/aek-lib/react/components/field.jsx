var React = require("react");
var utils = require("../../utils");
var _ = utils;
var Input = require("./input");
var SelectInput = require("./select-input");
var {Checkbox,Toggle,Slider} = require("./checkbox");
var {Corner} = require("./label");
var personalDetails = require("../../personal-details");
var mergeProps = require("../utils/merge-props");
var getChildren = require("../utils/children");


var inputMappings = {
  // select:Select,
  checkbox:Checkbox,
  toggle:Toggle,
  slider:Slider
};

module.exports = React.createClass({
  displayName:"Field",

  getInitialState:function() {
    return {inputID:utils.uniqueId("formField_")};
  },

  onChange:function(e,name,value) {

    if(this.props.onChange) {
      if(!name) {
        name = e.target && e.target.name;
      }
      if(value === undefined) {
        value = e.target && e.target.value;
      }
      this.props.onChange(e,name,value);
    }

  },

  render:function() {

    var label = null;
    var props = this.props;
    var state = this.state;
    var id = props.id || state.inputID;
    var type = props.type || "text";
    var icon = props.icon || type.defaultIcon;
    var options = _.isFunction(props.options) && props.options.call(props.optionsContext || props) || props.options;
    var disabled = props.disabled || (options && options.length === 0);
    var classSet = {disabled,field:true};
    var validationMessage;
    var inputProps = {classSet:{}};
    var help = props.help;
    var inputChildren = getChildren(this);


    if(help == null && props.maxChars) {
      if(props.value) {
        help = `${props.value.length} of ${props.maxChars} chars`;
      }
      else {
        help = `max ${props.maxChars} characters`;
      }
    }

    if(help) {
      help = <div className="helptext">{help}</div>;
    }

    if(props.label && !props.hideLabel) {
      var labelProps = mergeProps({
        htmlFor:id
      },props.labelProps);
      label = <label {...labelProps}>{this.props.label}</label>;
    }

    // if(this.props.labeledInput) {
    //   inputContainerClass += " left labeled";
    // }

    // if(this.props.size) {
    //   inputContainerClass += " "+this.props.size;
    // }

    // if(icon) {
    //   inputContainerClass += " right icon";
    //   icon = <i className={icon+" icon"}></i>;
    // }

    if(props.required && !inputChildren.length && !props.excludeRequiredMarker) {
      inputChildren = [<Corner icon="asterisk" key="requiredAsterisk"/>,<input key="input"/>];
    }

    if(props.validation && !props.validation.valid && !state.focus) {
      classSet.error = true;
      var validationText = utils.isString(props.validation) && props.validation || props.validation.text;
      if(validationText) {
        validationMessage = (
          <div className="ui red negative pointing above ui label">{validationText}</div>
        );
      }
    }

    var placeholder = props.placeholder;

    if(placeholder == null) {
      placeholder = props.type === "select" && "-- Please Select --" || (props.type && props.type.defaultPlaceholder);
    }

    var defaultValue = props.defaultValue;

    if(defaultValue) {
      defaultValue = personalDetails.plate(defaultValue);
    }

    inputProps = mergeProps({
      id:id,
      placeholder:placeholder,
      value:props.value,
      defaultValue:defaultValue,
      onChange:this.onChange,
      name:props.name,
      onFocus:this.onFocus,
      onBlur:this.onBlur,
      disabled:disabled,
      maxLength:props.maxLength || props.maxChars,
      options:options,
      label:props.label,
      icon:icon,
      type:type
    },inputProps,props.inputProps);

    if(!inputProps.component) {
      if(type === "select") {
        type = SelectInput;
      }
    }

    var isCheckbox = utils.contains(["checkbox","slider","toggle"],type);

    classSet.inline = isCheckbox;

    // if(inputType.excludeRequiredMarker) {
    //   inputProps.requiredMarker = required;
    //   required = null;
    // }

    var inputComponent = _.isString(type) ? inputMappings[type] || Input : type;
    var input = React.createElement(inputComponent,inputProps,inputChildren);


    props = mergeProps({classSet,key:props.name},_.pick(props,"classSet","className","style"));

    return (
      <div {...props}>
        {!isCheckbox && label}
        {input}
        {help}
        {validationMessage}
      </div>
    );
  },
  onFocus:function() {
    this.setState({"focus":true});
  },
  onBlur:function() {
    this.setState({"focus":false});
  }
});
