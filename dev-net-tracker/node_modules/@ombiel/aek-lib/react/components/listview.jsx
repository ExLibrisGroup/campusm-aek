var React = require("react");
var mergeProps = require("../utils/merge-props");
var pickHtmlProps = require("../utils/pick-html-props");
var getChildren = require("../utils/children");
var _ = require("../../utils");

var ListviewItem = React.createClass({

  getDefaultProps:function() {
    return {
      component:"li",
      headingComponent:"h4"
    };
  },

  render:function() {

    var initProps = {className:"item"};

    var props = mergeProps(initProps,this.props);

    var content = props.children;
    var children = getChildren(this);
    var href = !props.disabled && props.href || (props.onClick && "#");
    var thumbnail = props.thumbnail;
    var icon = props.icon;
    var thumbSize = props.thumbSize === undefined ? "medium" : props.thumbSize;
    var thumbContained = props.thumbContained;
    var thumbBorder = props.thumbBorder;
    var thumbRounded = props.thumbRounded;
    var thumbAlt = props.thumbAlt;
    var labelRight = props.labelRight;
    var label = props.label;
    var labelClass = "label";
    var classSet = {
      active:props.active,
      disabled:props.disabled
    };

    if(props.labelIcon) {
      label = <span><i className={`${props.labelIcon} icon`}/> {label}</span>;
    }

    if(label) {
      if(props.labelEllipsis) { labelClass += " ellipsis"; }
      if(props.labelVariation) { labelClass += " " + props.labelVariation; }
      if(props.basicLabel) { labelClass += " basic"; }
    }

    if(!content || (typeof children[0] === "string")) {
      content = [];
      if(props.heading) {
        content.push(React.createElement(this.props.headingComponent,{key:"heading"},props.heading));
        if(props.text) {
          content.push(<p key="text">{props.text}</p>);
        }
        if(children.length) {
          content.push(<div key="content">{children}</div>);
        }
      }
      else if(children.length) {
        content = children;
      }
      else {
        content = props.text || "-";
      }
    }

    if(label && !(thumbnail || icon)) {

      let labelProps = pickHtmlProps(mergeProps({className:labelClass,children:label},this.props.labelProps));

      if(labelRight) {
        classSet.right = true;
        classSet.labeled = true;
        content = (
          <div>
            <div key="detail" className="detail">{content}</div>
            <div key="labelRight"><span {...labelProps}/></div>
          </div>
        );
      }
      else {
        content = [
          <h5 key="label" {...labelProps}/>,
          <div key="detail" className="detail">{content}</div>
        ];
      }
    }

    if(thumbnail || icon) {
      var thumb;
      var thumbClass = "thumbnail";
      let labelProps = mergeProps({className:labelClass,children:label},this.props.labelProps,{classSet:{label:false}});
      var labelContent = label && <div className="label"><span {...labelProps}/></div>;
      var labelContentLeft = !labelRight && labelContent;
      var labelContentRight = labelRight && labelContent;
      if(thumbSize === "label") { thumbClass += " " + "thumb-label"; }
      else if(thumbSize) { thumbClass += " " + thumbSize; }
      if(thumbnail) {
        if(!thumbAlt) {thumbAlt = "";}
        thumb = thumbSize && (thumbSize !== "label") && <aek-img style={{backgroundImage:`url(${thumbnail})`}} alt={thumbAlt} /> || <img src={thumbnail} alt={thumbAlt}/>;
        thumb = <div key="thumb">{thumb}</div>;
        if(thumbContained) { thumbClass += " contained"; }
        if(thumbBorder) { thumbClass += " bordered"; }
        if(thumbRounded || thumbRounded == null) { thumbClass += " rounded"; }
      }
      else {
        if(!thumbSize) { thumbClass += " medium"; }
        var iconProps = pickHtmlProps(mergeProps({className:icon + " icon"},props.iconProps));
        thumb = <i {...iconProps}/>;
      }
      content = (
        <div className={thumbClass}>
          {labelContentLeft}
          {thumb}
          <div>{content}</div>
          {labelContentRight}
        </div>
      );
    }

    if(href && !props.disabled) {
      content = (
        <a href={href} onClick={this.props.onClick}>{content}</a>
      );
    }

    delete props.onClick;
    delete props.href;

    props = mergeProps({classSet},props);

    if (_.isString(this.props.component)) {
      props = pickHtmlProps(props);
    }

    return React.createElement(this.props.component,props,content);

  }

});

var Listview = React.createClass({

  itemFactory:function(item,index) {
    var props = {
      item:item,
      onClick:item.onClick || this.props.onClick && this.props.onClick.bind(null,item)
    };

    if(typeof item === "string") { item = {text:item}; }

    ["basicLabel","labelVariation","labelEllipsis","labelRight","thumbnail","thumbSize","thumbContained","thumbAlt","thumbBorder","thumbRounded","headingComponent"].forEach(function(prop) {
      props[prop] = item[prop] == null ? this.props[prop] : item[prop];
    }.bind(this));

    ["label","thumbnail","icon","text","heading","active","href","disabled","children"].forEach(function(prop) {
      props[prop] = item[prop];
    });

    props.key = item.key || item.id || "item" + index;

    if(item.listviewItemProps) {
      _.extend(props,item.listviewItemProps);
    }

    return <ListviewItem {...props}/>;
  },

  render:function() {

    var initialProps = {
      className:"ui listview menu",
      items:[],
      itemFactory:this.itemFactory,
      component:"ul"
    };

    if(!this.props.itemFactory || this.props.formatted) {
      initialProps.className += " formatted";
    }

    var props = mergeProps(initialProps,this.props);

    var classSet = {
      "basic":props.basicLabel,
      "uniform":props.uniformLabels,
      // "right":props.labelRight,
      // "labeled":props.basicLabel || props.uniformLabels || props.labelRight,
      "stacked":props.stackLabels === true,
      "stackable":props.stackLabels === "auto",
      "inverted":props.inverted,
      "borderless":props.borderless,
      "flush":props.flush
    };

    if(props.variation) {
      classSet[props.variation] = true;
    }

    if(!props.children) {
      var items = props.items;
      if(!_.isArray(items)) {
        items = _.map(items,function(val,key) {
          return (_.isString(val) || _.isNumber(val)) && {label:key,text:val} || _.extend({label:key},val);
        });
      }

      if(items.length === 0 && props.noItemsContent) {
        props.children = props.noItemsContent;
      }
      else {
        props.children = items.map(function(item,index) {
          return props.itemFactory(item,index);
        });
      }
    }

    delete props.onClick;

    props = mergeProps(props,{classSet});

    let {component} = props;

    if (_.isString(component)) {
      props = pickHtmlProps(props);
    }

    return (React.createElement(component,props));
  }
});

Listview.Item = Listview.ListviewItem = ListviewItem;
Listview.Listview = Listview;

module.exports = Listview;
