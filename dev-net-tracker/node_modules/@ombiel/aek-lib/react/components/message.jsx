var _ = require("../../utils");
var React = require("react");
var mergeProps = require("../utils/merge-props");
var pickHtmlProps = require("../utils/pick-html-props");


var Message = React.createClass({

  getInitialState:function() {
    return {hidden:false};
  },

  dismiss:function(e) {
    e.preventDefault();
    if(!this.props.willDismiss || this.props.willDismiss(e)!==false) {
      this.setState({hidden:true});
      if(this.props.didDismiss) {
        setTimeout(this.props.didDismiss.bind(e),0);
      }
    }
  },

  render:function() {
    var props = this.props;

    if(this.state.hidden) {
      return false;
    }

    var classSet = {
      ui:true,
      visible:true
    };

    ["size","theme","variation"].forEach(function(prop) {
      if(props[prop]) { classSet[props[prop]] = true; }
    });

    ["icon","inlineIcon","compact"].forEach(function(prop) {
      if(props[prop]) { classSet[prop] = true; }
    });

    if(props.inlineIcon) { classSet.icon = false; }

    classSet.message = true;


    var style = {};

    if(_.contains(["top","bottom"],props.vAlign)) {
      style.verticalAlign = props.vAlign;
    }

    var icon = props.icon && <i className={props.icon+" icon"} style={style}></i>;
    var header = props.heading && <div className="header">{props.heading}</div>;
    var dismissIcon = props.dismissable && <a href="#" key="dismiss" className="close" onClick={this.dismiss}><i className="close icon"/></a>;

    props = mergeProps({classSet},props);

    var content = props.children;

    if(icon && !props.inlineIcon) {
      content = (
        <div className="content" key="content" style={style}>{dismissIcon} {header} {content}</div>
      );
      header = null;
    }
    else if(dismissIcon) {
      content = [dismissIcon,content];
    }

    return (
      <div {...pickHtmlProps(props)}>
        {icon}
        {header}
        {content}
      </div>
    );
  }
});

var WarningMessage = React.createClass({
  render:function() {
    return <Message variation="warning" icon="warning sign" {...this.props}/>;
  }
});

var InfoMessage = React.createClass({
  render:function() {
    return <Message variation="info" icon="info circle" {...this.props}/>;
  }
});

var ErrorMessage = React.createClass({
  render:function() {
    return <Message variation="error" icon="flag" {...this.props}/>;
  }
});

var SuccessMessage = React.createClass({
  render:function() {
    return <Message variation="success" icon="check circle" {...this.props}/>;
  }
});

_.extend(Message,{Message,WarningMessage,InfoMessage,ErrorMessage,SuccessMessage});

module.exports = Message;
