var {Router,Route} = require("../../router");
var utils = require("../../utils");
var _ = utils;
var React = require("react");
var Pager = require("./pager");
var Page = require("./page");
var Panel = require("./panel");
var {Padding} = require("./segment");
var {Message} = require("./message");
var mergeProps = require("../utils/merge-props");
var getChildren = require("../utils/children");

var defaultHandler = React.createClass({
  render:function() {
    return (
      <Page>
        <Padding>
          <Message>404 - sorry page not found</Message>
        </Padding>
      </Page>
    );
  }
});

class AekReactRouter extends Router {

  constructor(opts) {

    if(!opts) { opts = {}; }

    super(opts);
    // var router = this;

    // if(opts.routes) {
    //   this.addRoutes(opts.routes);
    // }

    // this.defaultHandler = opts.defaultHandler || defaultHandler;

    this.transitionName = opts.transtionName || "slide-horizontal";

  }

  // unhandled(ctx) {
  //   this.currentCtx = ctx;
  //   this.currentHandler = this.defaultHandler;
  //   this.forceUpdate();
  // }

  // addRoute(path,handler,transform) {
  //   if(utils.isReactComponent(handler)) {
  //     return this.addHandler(path,handler,transform);
  //   }
  //   else {
  //     return super.addRoute(path,handler);
  //   }
  // }

  // addHandler(path,handler,transform) {
  //   path = this.cleanPath(path);
  //   var router = this;
  //   if(transform) {
  //     super.addRoute(path,transform);
  //   }
  //   super.addRoute(path,function(ctx) {
  //     router.currentCtx = ctx;
  //     router.currentHandler = handler;
  //     router.forceUpdate();
  //   });
  // }

  // createLinkComponent() {
  //
  //   var router = this;
  //
  //   return React.createClass({
  //
  //     onClick:function(e) {
  //       e.preventDefault();
  //       var href = this.props.href;
  //       var back = this.props.back;
  //       var replace = this.props.replace;
  //
  //       if(back) {
  //         if(href) {
  //           router.backTo(href);
  //         }
  //         else {
  //           router.goBack();
  //         }
  //       }
  //       else {
  //         if(href) {
  //           if(replace) {
  //             router.replace(href);
  //           }
  //           else {
  //             router.goto(href);
  //           }
  //         }
  //       }
  //
  //     },
  //
  //     render:function() {
  //       var props = mergeProps({href:"#",onClick:this.onClick},this.props);
  //       var component = props.component || "a";
  //       delete props.component;
  //       return React.createElement(component,props);
  //
  //     }
  //   });
  // }

  // addRoutes(routes) {
  //   var router = this;
  //   routes.forEach(function(route) {
  //     if(utils.isArray(route)) {
  //       route = {path:route[0],handler:route[1],transform:route[2]};
  //     }
  //     router.addRoute(route.path,route.handler,route.transform);
  //   });
  // }

  // forceUpdate() {
  //   if(this.component) { this.component.forceUpdate(); }
  // }

  // render(targetNode) {
  //   if(this._isRendered) {
  //     this.forceUpdate();
  //     return;
  //   }
  //
  //   if(!targetNode) {
  //     targetNode = document.createElement("div");
  //     targetNode.id = "router";
  //     document.body.appendChild(targetNode);
  //   }
  //
  //   this.component = React.render(<RouterView router={this}/>,targetNode);
  //   this.start();
  // }

}



var RouterView = React.createClass({

  getDefaultProps:function() {
    return {
      component:Panel,
      handler:defaultHandler
    };
  },

  componentWillMount:function() {

    var router = this.props.router || new AekReactRouter();

    this.router = router;

    this.route = router.addRoute("*",(ctx,next)=>{
      this.forceUpdate();
      next();
    });

    router.start();
  },

  componentWillUnmount() {
    this.router.removeRoute(this.route);
  },

  render:function() {

    var router = this.router;


    var ctx = router.currentCtx;

    var handler = _.find(getChildren(this),(child)=>{
      let route = new Route(child.props.path);
      return route.match(ctx.path,ctx.params);
    });

    if(handler) {
      handler = React.cloneElement(handler,{ctx,router,key:ctx.path});
    }
    else {
      handler = React.createElement(this.props.defaultHandler,{ctx,router,key:ctx.path});
    }

    var componentProps = {};

    _.each(["top","left","width","height"],function(k) {
      if(_.isNumber(this.props[k])) {
        componentProps[k] = this.props[k];
      }
    }.bind(this));

    componentProps = mergeProps(componentProps,this.props.componentProps);

    return (
      <Pager component={this.props.component} transitionDirection={ctx.transitionDirection} {...componentProps}>
        {handler}
      </Pager>
    );
  }
});




AekReactRouter.RouterView = RouterView;
AekReactRouter.AekReactRouter = AekReactRouter;

module.exports = AekReactRouter;
