var React = require("react");
var mergeProps = require("../utils/merge-props");
var pickHtmlProps = require("../utils/pick-html-props");
var _ = require("../../utils");
var {CBox} = require("./layout");


var Segment = React.createClass({

  render:function() {

    var classSet = {};
    var props = this.props;
    var variation = this.props.variation || "";
    var style = {};

    ["disabled","loading","inverted","compact","nopadding"].forEach(function(prop) {
      if(this.props[prop]) { classSet[prop] = true; }
    }.bind(this));

    if(props.theme) {
      classSet[props.theme] = true;
    }
    if(props.ordinality) {
      classSet[props.ordinality] = true;
    }

    if(props.float) {
      variation += ` ${props.float} floated`;
      style.maxWidth = "50%";
    }

    if(props.textAlign) {
      variation += ` ${props.textAlign} aligned`;
    }

    let {children,empty} = props;

    if(empty) {
      children = null;
    }

    if(!React.Children.count(children) && !props.loading && (props.placeholder || props.placeholderProps || props.placeholderComponent)) {

      let placeholderComponent = props.placeholderComponent || CBox;

      let placeholderProps = mergeProps({
        children:props.placeholder,
        height:100,
        style:{
          fontSize:"1.3em",
          opacity:0.7,
          fontStyle:"italic",
          position:"relative",
          fontWeight:200
        }
      },props.placeholderProps);

      children = React.createElement(placeholderComponent,placeholderProps);
    }


    props = pickHtmlProps(mergeProps({
      className: `ui ${variation} segment`
    },{classSet,style},props));

    delete props.placeholder;

    return (<div {...props} >{children}</div>);
  }
});

var BasicSegment = React.createClass({
  render:function() {

    var props = mergeProps({className:"basic",style:{margin:0}},this.props);

    return <Segment {...props}/>;

  }
});

var Padding = React.createClass({

  render:function() {
    var props = mergeProps({className:"padding",component:"div"},this.props);
    var component = props.component;
    if (_.isString(component)) {
      props = pickHtmlProps(props);
    }
    return React.createElement(component,props);
  }
});

Segment.BasicSegment = BasicSegment;
Segment.Padding = Padding;
Segment.Segment = Segment;

module.exports = Segment;
