var React = require("react");
var _ = require("../../utils");
var pickHtmlProps = require("../utils/pick-html-props");
var mergeProps = require("../utils/merge-props");
var Segment = require("./segment");

var TableCell = (props)=>{

  let style = {};

  let {align} = props;

  if(_.isString(align)) {
    align.split(" ").forEach((a)=>{
      if(_.includes(["left","center","right"],a)) {
        style.textAlign = a;
      }
      else if (_.includes(["top","middle","bottom"],a)) {
        style.verticalAlign = a;
      }
    });
  }

  props = mergeProps({
    classSet:{
      collapsing:props.collapsing,
      positive:props.positive,
      negative:props.negative,
      error:props.error,
      warning:props.warning,
      active:props.active,
      disabled:props.disabled
    },
    style
  },props);

  let component = props.component || "td";

  let {children} = props;

  if(!children) { children = props.text; }

  if(_.isString(component)) {
    props = pickHtmlProps(props,{exclude:["data"]});
  }

  return React.createElement(component,props,children);
};

var TableLabelCell = (props)=>{
  props = mergeProps({collapsing:true},props,{component:"th"});
  return <TableCell {...props}/>;
};

var TableHeaderCell = (props)=>{
  props = mergeProps(props,{component:"th"});
  return <TableCell {...props}/>;
};

var TableRow = (props)=>{
  let {children} = props;
  if (!children) {
    let data = props.data || [];
    let {cellProps} = props;
    children = data.map((item,i)=>{

      let itemProps = mergeProps({key:`cell${i}`},cellProps);

      if(React.isValidElement(item)) {
        return item;
      }
      else if(_.isObject(item)) {
        return React.createElement(TableCell,mergeProps(itemProps,item));
      }
      return <TableCell {...itemProps}>{item}</TableCell>;
    });
  }

  props = pickHtmlProps(props,{exclude:["data"]});

  return <tr {...props}>{children}</tr>;
};

var TableBody = (props)=>{
  let {children} = props;
  if(!children) {
    let data = props.data || [];
    let {cellProps,labelCellProps,rowProps} = props;
    if(!_.isArray(data)) {
      let {columns} = props;

      data = _.map(data,(item,key)=>{
        let rowData;
        if(columns) {
          rowData = columns.map(k=>item[k]);
        }
        else if(_.isArray(item)) {
          rowData = item;
        }
        else {
          rowData = [item];
        }

        return [<TableLabelCell {...mergeProps({key:"label",text:key,data:rowData},labelCellProps)} />].concat(rowData);
      });
    }
    children = data.map((item,i)=>{
      if(React.isValidElement(item)) {return item;}
      let itemProps = mergeProps({key:`row${i}`,data:item,cellProps},rowProps);
      return <TableRow {...itemProps}/>;
    });
  }

  props = pickHtmlProps(props,{exclude:["data"]});

  return <tbody {...props}>{children}</tbody>;
};

var TableHeader = (props)=>{
  let {children} = props;
  if(!children) {
    var data = props.data || [];
    let {cellProps,rowProps} = props;
    cellProps = mergeProps({component:TableHeaderCell},cellProps);
    rowProps = mergeProps({data,cellProps},rowProps);
    children = <TableRow {...rowProps}/>;
  }

  props = pickHtmlProps(props,{exclude:["data"]});

  return <thead {...props}>{children}</thead>;
};

var Table = (props)=>{

  props = mergeProps({
    className:`ui ${props.theme || ""} table`,
    classSet:{
      unstackable:!props.stackable,
      padded:props.padded,
      "very compact":props.compact,
      small:props.small,
      large:props.large,
      celled:props.celled,
      basic:props.basic,
      inverted:props.inverted,
      flush:props.flush
    }
  },props);

  let {children} = props;

  if(!children) {
    children = [];
    let {headerCells,columns,data,cellProps,rowProps,headerProps,bodyProps,labelCellProps} = props;

    columns = columns && columns.map((col)=>{
      if (_.isString(col) || _.isNumber(col)) {
        return {[col]:col};
      }
      return col;
    });

    if(!headerCells && columns) {
      headerCells = columns.map((col)=>{
        return _.values(col)[0];
      });
    }
    if(headerCells) {
      headerProps = mergeProps({cellProps,rowProps,data:headerCells,key:"header"},headerProps);
      children.push(<TableHeader {...headerProps}/>);
    }
    bodyProps = mergeProps({
      cellProps,rowProps,labelCellProps,
      data:data,
      columns:columns && columns.map((col)=>_.keys(col)[0]).slice(1),
      key:"body"
    },bodyProps);
    children.push(<TableBody {...bodyProps}/>);
  }

  props = pickHtmlProps(props,{exclude:["data"]});

  return <table {...props}>{children}</table>;

};

var TableSegment = (props)=>{

  props = mergeProps({
    className:"table-segment",
    style:{
      width:"100%",
      padding:0,
      overflow:"auto"
    }
  },props);

  return <Segment {...props} />;
};


_.extend(Table,{Table,TableSegment,TableCell,TableRow,TableBody,TableHeaderCell,TableHeader,TableLabelCell,Cell:TableCell,Row:TableRow,HeaderCell:TableHeaderCell,LabelCell:TableLabelCell});

module.exports = Table;
