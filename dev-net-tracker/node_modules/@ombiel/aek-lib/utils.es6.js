require("console-polyfill"); // fixes issues with console commands in IE9
var old_ = window && window._;
var _ = require("./lib/lodash-custom");

var utils;

if(old_) {
  window._ = old_;
}

// adapted from jQuery

var r20 = /%20/g,
  rbracket = /\[\]$/,
  getClass = {}.toString;
  // rCRLF = /\r?\n/g,
  // rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
  // rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, add ) {
  var name;

  if ( utils.isArray( obj ) ) {
    // Serialize array item.
    utils.each( obj, function( i, v ) {
      if ( rbracket.test( prefix ) ) {
        // Treat each array item as a scalar.
        add( prefix, v );

      } else {
        // Item is non-scalar (array or object), encode its numeric index.
        buildParams(
          prefix + "[" + ( typeof v === "object" ? i : "" ) + "]",
          v,
          add
        );
      }
    });

  } else if ( utils.isObject( obj ) ) {
    // Serialize object item.
    for ( name in obj ) {
      buildParams( prefix + "[" + name + "]", obj[ name ], add );
    }

  } else {
    // Serialize scalar item.
    add( prefix, obj );
  }
}



utils = module.exports = _.extend({},_,{

  get:require("lodash.get"),
  pickBy:require("lodash.pickby"),

  b:function(fnName,...args) {
    return function(target) {
      return utils[fnName].call(utils,target,...args);
    };
  },

  isFunction:function(obj) {
    return obj && getClass.call(obj) === '[object Function]';
  },

  //customised version of merge
  fuse:function(...args) {
    return this.merge(...args,(tObj,sObj)=>{
      if(_.isArray(sObj)) {
        return sObj;
      }
    });
  },

  //customised version of _.template
  plate:function(template,obj,opts) {

    var baseObj = {};

    // attempt to define undecalred vars
    template.replace(/\{\{\{?\s*([a-z0-9_\$]+)(\.[a-z0-9_\$]+)?\s*\}?\}\}/gi,function(match,propertyName,extra) {
      baseObj[propertyName] = extra && {} || baseObj[propertyName] || null;
    });


    obj = _.extend(baseObj,obj);

    var defaults = {
      // evaluate: /\{\{(.+?)\}\}/g,
      escape: /\{\{\{(.+?)\}\}\}/g,
      interpolate: /\{\{(.+?)\}\}/g
    };

    opts = _.merge(defaults,opts);

    return _.template(template,obj,opts);

  },


  // param serializer adapteed from jQuery
  param:function(a,spaceEntity) {
    var prefix,
      s = [],
      add = function( key, value ) {
        // If value is a function, invoke it and return its value
        //value = utils.isFunction( value ) ? value() : ( value == null ? "" : value );
        value = utils.isFunction( value ) ? value() : value;
        if(value != null) {
          s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
        }
      };

    for ( prefix in a ) {
      buildParams( prefix, a[ prefix ], add );
    }

    // Return the resulting serialization
    var out = s.join( "&" );

    // originally this function replaced "%20" with "+" which is probably the "correct" way
    // "%20" seems to be more universally accepted however and iOS app doesn't like "+"
    // so now default remains "%20" with an optional spaceEntity argument if required
    if(spaceEntity) {
      out = out.replace(r20,spaceEntity);
    }

    return out;
  },

  parseQueryString:function(str) {
    var obj = {};
    if(str.indexOf("?") > -1) {
      str = str.split("?")[1];
    }
    str.replace(/([^?=&]+)(=([^&]*))/g,function($0,$1,$2,$3) {
      obj[decodeURIComponent($1)] = decodeURIComponent($3);
    });
    return obj;
  },


  // DOM utils

  getWindowDimensions:function() {
    var w = window,
    d = document,
    e = d.documentElement,
    g = d.getElementsByTagName('body')[0],
    width = w.innerWidth || e.clientWidth || g.clientWidth,
    height = w.innerHeight || e.clientHeight || g.clientHeight;
    return {width,height};
  },

  outerHeight:function(el) {
    var style = window.getComputedStyle(el);
    var marginTop = parseFloat(style.marginTop) || 0;
    var marginBottom = parseFloat(style.marginBottom) || 0;
    return marginTop + el.offsetHeight + marginBottom;
  },

  outerWidth:function(el) {
    var style = window.getComputedStyle(el);
    var marginLeft = parseFloat(style.marginLeft) || 0;
    var marginRight = parseFloat(style.marginRight) || 0;
    return marginLeft + el.offsetWidth + marginRight;
  },

  // react utils

  isReactComponent:function(object) {
    if(!object || !object.type || !object.type.prototype) {
      return false;
    }
    var prototype = object.type.prototype;
    return ('shouldComponentUpdate' in prototype) && ('componentWillReceiveProps' in prototype);
  },

  // aek environment helpers
  getEnvironment:function() {
    return window.document.documentElement.getAttribute("data-env");
  },
  getEnv:function() {
    return this.getEnvironment();
  },
  isDev:function() {
    return this.getEnv() === "dev";
  },
  getPlatform:function() {
    return window.document.documentElement.getAttribute("data-platform") || "";
  },
  isWeb:function() {
    return this.getPlatform().substring(0,3).toLowerCase() === "web";
  },
  getPackageData:function() {
    var json = window.document.documentElement.getAttribute("data-aek-package");
    if(!json) {
      return null;
    }
    try {
      var data = JSON.parse(json);
      return data;
    }
    catch(e) {
      return null;
    }
  },
  getPackageName:function() {
    var packageData = utils.getPackageData();
    if(packageData) {
      return packageData.name;
    }
    return null;
  },
  isNative:function() {
    return !this.isWeb();
  },
  currentURL:function() {
    var currentLocation = document.body.getAttribute("data-location");
    // newURL = currentLocation
    // currentParams = aek.parseQueryString(currentLocation)
    // redirectBase = currentParams[redirectBaseKey]
    // params[redirectBaseKey] = null
    // newURL = aek.modifyQueryString(currentLocation,params)

    // if aek.isNative()
    //   if newActivity
    //     newURL = prefixSelfReferenceUrl(newURL,currentLocation)
    //   else if redirectBase
    //     newURL = prefixSelfReferenceUrl(newURL,currentLocation,true,redirectBase)
    // return newURL

    if(!currentLocation) {
      currentLocation = location.pathname;
    }

    return currentLocation;
  },

  currentAbsoluteURL:function() {
    var currentLocation = utils.currentURL();
    return `${location.protocol}//${location.host}${currentLocation}`;
  },

  openURL:function(url) {
    var customURL;
    try {
      customURL = window.top.CampusM.page.customURL;
    }
    catch(e) {} //eslint-disable-line no-empty

    if(customURL) {
      customURL = window.top.CampusM.page.customURL(url);
    }

    if(!customURL) {
      window.open(url);
    }
  },

  getBodyDataAttribute:function(key) {
    var obj = window.document.body.getAttribute("data-o-b-j-" + key);
    if(obj) {
      return JSON.parse(obj);
    }
    return window.document.body.getAttribute("data-" + key);

  },

  // other general utils
  normaliseError:function(error) {
    if(this.isError(error)) { return error; }
    return new Error(error);
  },

  asArray:function(obj,opts = {}) {
    var out = [];

    if(_.isArray(obj)) {
      out = obj;
    }
    else if(obj) {
      out = [obj];
    }

    if(!opts.includeEmptyObjects) {
      out = out.filter(function(item) {
        return !_.isEmpty(item);
      });
    }

    return out;
  },

  // string utils
  titleCase:function(str) {
    if(!str) {return "";}
    return str.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
  },

  validateEmail:function(email) {
    var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(email);
  },

  validateTel:function(tel) {
    var re = /^[0-9\+\(\) ]+$/ ;
    return tel.length > 6 && re.test(tel);
  },

  publicPath:function(path) {
    var normPath = path.replace(/^(\/public)?\//gi,"");
    var publicPath = window.document.documentElement.getAttribute("data-public-assets");

    if(publicPath) {
      return `${publicPath}/${normPath}`;
    }

    if(utils.isDev()) {
      return `/public/${normPath}`;
    }
    var pkg = utils.getPackageData();
    return `https://portal.ombiel.co.uk/assets/aek/${pkg.name}/${pkg.version}/${normPath}`;
  }
});
