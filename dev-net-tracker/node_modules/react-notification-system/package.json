{
  "_args": [
    [
      {
        "raw": "react-notification-system@^0.2.11",
        "scope": null,
        "escapedName": "react-notification-system",
        "name": "react-notification-system",
        "rawSpec": "^0.2.11",
        "spec": ">=0.2.11 <0.3.0",
        "type": "range"
      },
      "C:\\Users\\paytonp\\dev-net-tracker\\node_modules\\@ombiel\\aek-lib"
    ]
  ],
  "_from": "react-notification-system@>=0.2.11 <0.3.0",
  "_id": "react-notification-system@0.2.15",
  "_inCache": true,
  "_location": "/react-notification-system",
  "_nodeVersion": "6.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-notification-system-0.2.15.tgz_1501615854967_0.0597900717984885"
  },
  "_npmUser": {
    "name": "igorprado",
    "email": "igorprado@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-notification-system@^0.2.11",
    "scope": null,
    "escapedName": "react-notification-system",
    "name": "react-notification-system",
    "rawSpec": "^0.2.11",
    "spec": ">=0.2.11 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@ombiel/aek-lib"
  ],
  "_resolved": "https://registry.npmjs.org/react-notification-system/-/react-notification-system-0.2.15.tgz",
  "_shasum": "132bc4bdac55a0abcb0969e3110c955927b9f5da",
  "_shrinkwrap": null,
  "_spec": "react-notification-system@^0.2.11",
  "_where": "C:\\Users\\paytonp\\dev-net-tracker\\node_modules\\@ombiel\\aek-lib",
  "author": {
    "name": "Igor Prado"
  },
  "bugs": {
    "url": "https://github.com/igorprado/react-notification-system/issues"
  },
  "dependencies": {
    "create-react-class": "^15.5.1",
    "object-assign": "^4.0.1",
    "prop-types": "^15.5.6"
  },
  "description": "A React Notification System fully customized",
  "devDependencies": {
    "autoprefixer-loader": "^3.1.0",
    "babel-core": "^6.14.0",
    "babel-eslint": "^6.1.2",
    "babel-loader": "^6.2.5",
    "babel-plugin-react-class-display-name": "^0.1.0",
    "babel-plugin-react-transform": "^2.0.2",
    "babel-preset-airbnb": "^2.0.0",
    "css-loader": "^0.24.0",
    "eslint": "3.4.0",
    "eslint-config-airbnb": "^10.0.1",
    "eslint-plugin-import": "^1.14.0",
    "eslint-plugin-jsx-a11y": "^2.2.1",
    "eslint-plugin-react": "^6.2.0",
    "expect": "^1.12.1",
    "express": "^4.13.3",
    "extract-text-webpack-plugin": "^0.8.2",
    "file-loader": "^0.8.4",
    "install": "^0.1.8",
    "isparta-loader": "^1.0.0",
    "karma": "^0.13.10",
    "karma-chai-plugins": "^0.6.0",
    "karma-chrome-launcher": "^0.2.1",
    "karma-cli": "^0.1.1",
    "karma-coverage": "^0.5.2",
    "karma-coveralls": "^1.1.2",
    "karma-firefox-launcher": "^0.1.6",
    "karma-mocha": "^0.2.0",
    "karma-sourcemap-loader": "^0.3.6",
    "karma-webpack": "^1.7.0",
    "mocha": "^2.3.3",
    "node-sass": "^3.3.3",
    "react": "^15.0.0",
    "react-addons-test-utils": "^15.0.0",
    "react-dom": "^15.0.0",
    "react-tools": "^0.13.2",
    "react-transform-catch-errors": "^1.0.0",
    "react-transform-hmr": "^1.0.1",
    "redbox-react": "^1.1.1",
    "rimraf": "^2.4.3",
    "sass-loader": "^3.0.0",
    "style-loader": "^0.12.4",
    "webpack": "^1.12.2",
    "webpack-dev-middleware": "^1.2.0",
    "webpack-hot-middleware": "^2.4.1"
  },
  "directories": {},
  "dist": {
    "shasum": "132bc4bdac55a0abcb0969e3110c955927b9f5da",
    "tarball": "https://registry.npmjs.org/react-notification-system/-/react-notification-system-0.2.15.tgz"
  },
  "gitHead": "012e088079dc053dd0a52160dbf9b5929cb365f0",
  "homepage": "https://github.com/igorprado/react-notification-system",
  "keywords": [
    "react",
    "notification",
    "notification system",
    "component",
    "react component",
    "react-component"
  ],
  "license": "MIT",
  "main": "dist/NotificationSystem.js",
  "maintainers": [
    {
      "name": "igorprado",
      "email": "igorprado@gmail.com"
    }
  ],
  "name": "react-notification-system",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "0.14.x || ^15.0.0",
    "react-dom": "0.14.x || ^15.0.0"
  },
  "readme": "# React Notification System\n\n[![npm version](https://badge.fury.io/js/react-notification-system.svg)](http://badge.fury.io/js/react-notification-system) [![npm](https://img.shields.io/npm/dm/react-notification-system.svg)](https://www.npmjs.com/package/react-notification-system) [![Dependency Status](https://david-dm.org/igorprado/react-notification-system.svg)](https://david-dm.org/igorprado/react-notification-system) [![devDependency Status](https://david-dm.org/igorprado/react-notification-system/dev-status.svg)](https://david-dm.org/igorprado/react-notification-system#info=devDependencies) [![Build Status](https://travis-ci.org/igorprado/react-notification-system.svg?branch=master)](https://travis-ci.org/igorprado/react-notification-system) [![Coverage Status](https://coveralls.io/repos/igorprado/react-notification-system/badge.svg?branch=master&service=github)](https://coveralls.io/github/igorprado/react-notification-system?branch=master)\n\n> A complete and totally customizable component for notifications in React.\n\n_Initially built for [Eterpret](http://dev.eterpret.com) @ [Scalable Path](http://www.scalablepath.com)._\n\n<a href=\"https://igorprado.github.io/react-notification-system/\"><img width=\"728\" src=\"example/src/images/screenshot.jpg\" alt=\"Screenshot\"></a>\n\n## Installing\n\nThis component is available as CommonJS and UMD module. Install via NPM running:\n\n```\nnpm install react-notification-system\n```\n\n### Important\n\nFor **React ^0.14.x** or **React ^15.x.x**, use version 0.2.x:\n\n```\nnpm install react-notification-system@0.2.x\n```\n\nFor **React 0.13.x**, use version 0.1.x:\n\n```\nnpm install react-notification-system@0.1.x\n```\n\n\n\n## Using\n\nFor optimal appearance, this component **must be rendered on a top level HTML element** in your application to avoid position conflicts.\n\nHere is a basic example. For a more advanced usage, please see the [example code](https://github.com/igorprado/react-notification-system/blob/master/example/src/scripts/App.jsx).\n\n```js\nvar React = require('react');\nvar ReactDOM = require('react-dom');\nvar NotificationSystem = require('react-notification-system');\n\nvar MyComponent = React.createClass({\n  _notificationSystem: null,\n\n  _addNotification: function(event) {\n    event.preventDefault();\n    this._notificationSystem.addNotification({\n      message: 'Notification message',\n      level: 'success'\n    });\n  },\n\n  componentDidMount: function() {\n    this._notificationSystem = this.refs.notificationSystem;\n  },\n\n  render: function() {\n    return (\n      <div>\n        <button onClick={this._addNotification}>Add notification</button>\n        <NotificationSystem ref=\"notificationSystem\" />\n      </div>\n      );\n  }\n});\n\nReactDOM.render(\n  React.createElement(MyComponent),\n  document.getElementById('app')\n);\n```\n\n## Methods\n\n### `addNotification(notification)`\n\nAdd a notification object. This displays the notification based on the [object](#creating-a-notification) you passed.\n\nReturns the notification object to be used to programmatically dismiss a notification.\n\n### `removeNotification(notification)`\n\nRemove a notification programmatically. You can pass an object returned by `addNotification()` or by `onAdd()` callback. If passing an object, you need to make sure it must contain the `uid` property. You can pass only the `uid` too: `removeNotification(uid)`.\n\n\n### `editNotification(notification)`\n\nEdit a notification programmatically. You can pass an object previously returned by `addNotification()` or by `onAdd()` callback. If passing an object, you need to make sure it must contain the `uid` property. You can pass only the `uid` too: `editNotification(uid)`.\n\n\n### `clearNotifications()`\n\nRemoves ALL notifications programatically.\n\n## Creating a notification\n\nThe notification object has the following properties:\n\n| Name         | Type            | Default   | Description                                                                                                                                                               |\n|------------  |---------------  |---------  |-------------------------------------------------------------------------------------------------------------------------------------------------------------------------  |\n| title        | string          | null      | Title of the notification                                                                                                                                                 |\n| message      | string          | null      | Message of the notification                                                                                                                                              |\n| level        | string          | null      | Level of the notification. Available: **success**, **error**, **warning** and **info**                                                                                    |\n| position     | string          | tr        | Position of the notification. Available: **tr (top right)**, **tl (top left)**, **tc (top center)**, **br (bottom right)**, **bl (bottom left)**, **bc (bottom center)**  |\n| autoDismiss  | integer         | 5         | Delay in seconds for the notification go away. Set this to **0** to not auto-dismiss the notification                                                                      |\n| dismissible  | bool            | true      | Set if notification is dismissible by the user. [See more](#dismissible)                                                                                                  |\n| action       | object          | null      | Add a button with label and callback function (callback is optional). [See more](#action)                                                                                                        |\n| children       | element,string          | null      | Adds custom content, and overrides `action` (if defined) [See more](#children)                                                                                                        |\n| onAdd | function | null | A callback function that will be called when the notification is successfully added. The first argument is the original notification e.g. `function (notification) { console.log(notification.title + 'was added'); }` |\n| onRemove     | function        | null      | A callback function that will be called when the notification is about to be removed. The first argument is the original notification e.g. `function (notification) { console.log(notification.title + 'was removed'); }` |\n| uid          | integer/string           | null      | Overrides the internal `uid`. Useful if you are managing your notifications id. Notifications with same `uid` won't be displayed. |\n\n\n### Dismissible\n\nIf set to false, the notification will not display the dismiss ('x') button and will only be dismissible programmatically or after autoDismiss timeout. [See more](#removenotificationnotification)\n\n### Action\n\nAdd a button and a callback function to the notification. If this button is clicked, the callback function is called (if provided) and the notification is dismissed.\n\n```js\nnotification = {\n  [...],\n  action: {\n    label: 'Button name',\n    callback: function() {\n      console.log('Notification button clicked!');\n    }\n  }\n}\n\n```\n\n### Children\n\nAdd custom content / react elements\n\n```js\nnotification = {\n  [...],\n  children: (\n    <div>\n      <h2>Hello World</h2>\n      <a>Anchor</a>\n    </div>\n  )\n}\n\n```\n\n## Styles\n\nThis component was made to work as plug and play. For that, a handcrafted style was added to it and is used as inline CSS.\n\nYou can change this style by overriding the default inline styles or disable all inline styles and use your own styles.\n\n### Overriding\n\nFor this, use the `style` prop to pass an object with your styles. Your object must be something like this:\n\n```js\nvar style = {\n  NotificationItem: { // Override the notification item\n    DefaultStyle: { // Applied to every notification, regardless of the notification level\n      margin: '10px 5px 2px 1px'\n    },\n\n    success: { // Applied only to the success notification item\n      color: 'red'\n    }\n  }\n}\n\n<NotificationSystem ref=\"notificationSystem\" style={style} />\n\n```\n\nRefer to [this file](https://github.com/igorprado/react-notification-system/blob/master/src/styles.js) to see what can you override.\n\n### Disabling inline styles\n\nTo disable all inline styles, just pass `false` to the prop `style`.\n\n```js\n<NotificationSystem ref=\"notificationSystem\" style={false} />\n```\n\nHere is the notification HTML:\n\n```html\n<div class=\"notifications-wrapper\">\n  <div class=\"notifications-{position}\"> <!-- '{position}' can be one of the positions available: ex: notifications-tr -->\n    <div class=\"notification notification-{level} notification-{state} {notification-not-dismissible}\"> <!-- '{level}' can be: success | error | warning | info. '{state}' can be: visible | hidden. {notification-not-dismissible} is present if notification is not dismissible by user -->\n      <h4 class=\"notification-title\">Default title</h4>\n      <div class=\"notification-message\">Default message</div>\n      <span class=\"notification-dismiss\">×</span>\n      <div class=\"notification-action-wrapper\">\n        <button class=\"notification-action-button\">Action button</button>\n      </div>\n    </div>\n  </div>\n</div>\n\n```\n\n#### Important\n\nUsing this method you have to take care of **every style**, from containers positions to animations. To control animations, use the classes `notification-visible` and `notification-hidden`. If your CSS styles will not handle any animation (transition), you need to set the prop `noAnimation` to `true` when adding the Notification System component:\n\n```js\n<NotificationSystem ref=\"notificationSystem\" noAnimation={true} />\n```\n\nSee [#74](https://github.com/igorprado/react-notification-system/issues/74) for more details.\n\n## Roadmap\n\n* Improve tests and coverage\n* Improve performance\n\n## Contributions\n\nClone this repo by running:\n\n```\ngit clone git@github.com:igorprado/react-notification-system.git\n```\n\nEnter the project folder and install the dependencies:\n\n```\nnpm install\n```\n\nTo start a development server and use the `example` app to load the component, type:\n\n```\nnpm start\n```\n\nOpen `http://localhost:8000`.\n\n---\n\nRun the tests:\n\n```\nnpm test\n```\n\nYou can find the coverage details under `coverage/` folder.\n\nAfter that, just edit the files under `src/` and `example/src/app.js`. It uses React hot reload.\n\nThis component is under construction. I will add more guidelines to who wants to contribute.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/igorprado/react-notification-system.git"
  },
  "scripts": {
    "build": "jsx -x jsx ./src ./dist & jsx ./src ./dist && webpack --stats --config webpack.config.umd.prod.js && webpack --stats --config webpack.config.umd.dev.js",
    "build:example": "rimraf example/build/ && webpack --stats --config webpack.config.prod.js",
    "lint": "eslint src --ext .jsx,.js",
    "prebuild": "npm run prepare-build",
    "prepare-build": "npm run lint && rimraf dist/",
    "start": "NODE_ENV=development node devServer.js",
    "test": "karma start --single-run",
    "test-watch": "karma start"
  },
  "version": "0.2.15"
}
