{
  "_args": [
    [
      {
        "raw": "stylus-loader@^2.0.0",
        "scope": null,
        "escapedName": "stylus-loader",
        "name": "stylus-loader",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "C:\\Users\\paytonp\\dev-net-tracker\\node_modules\\@ombiel\\aek-buildtools"
    ]
  ],
  "_from": "stylus-loader@>=2.0.0 <3.0.0",
  "_id": "stylus-loader@2.5.1",
  "_inCache": true,
  "_location": "/stylus-loader",
  "_nodeVersion": "6.3.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/stylus-loader-2.5.1.tgz_1488904121618_0.12431719549931586"
  },
  "_npmUser": {
    "name": "mzgoddard",
    "email": "mzgoddard@gmail.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "stylus-loader@^2.0.0",
    "scope": null,
    "escapedName": "stylus-loader",
    "name": "stylus-loader",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@ombiel/aek-buildtools"
  ],
  "_resolved": "https://registry.npmjs.org/stylus-loader/-/stylus-loader-2.5.1.tgz",
  "_shasum": "d5ad8a7e0958adc12b8581e7bb169b9a61d54216",
  "_shrinkwrap": null,
  "_spec": "stylus-loader@^2.0.0",
  "_where": "C:\\Users\\paytonp\\dev-net-tracker\\node_modules\\@ombiel\\aek-buildtools",
  "author": {
    "name": "Kyle Robinson Young",
    "email": "kyle@dontkry.com",
    "url": "http://dontkry.com"
  },
  "bugs": {
    "url": "https://github.com/shama/stylus-loader/issues"
  },
  "dependencies": {
    "loader-utils": "^0.2.9",
    "lodash.clonedeep": "^4.5.0",
    "when": "~3.6.x"
  },
  "description": "Stylus loader for webpack",
  "devDependencies": {
    "benchmark": "^1.0.0",
    "css-loader": "^0.14.0",
    "mocha": "~2.1.0",
    "mocha-loader": "~0.7.1",
    "nib": "^1.0.4",
    "node-libs-browser": "^0.5.2",
    "raw-loader": "~0.5.1",
    "should": "~4.6.1",
    "style-loader": "^0.12.2",
    "stylus": ">=0.52.4",
    "testem": "^0.8.3",
    "webpack": "^1.9.8",
    "webpack-dev-server": "~1.7.0"
  },
  "directories": {},
  "dist": {
    "shasum": "d5ad8a7e0958adc12b8581e7bb169b9a61d54216",
    "tarball": "https://registry.npmjs.org/stylus-loader/-/stylus-loader-2.5.1.tgz"
  },
  "files": [
    "index.js",
    "lib/"
  ],
  "gitHead": "68f76a183f9ae1d06970cb3197597cb40354b221",
  "homepage": "https://github.com/shama/stylus-loader#readme",
  "keywords": [
    "webpack",
    "loader",
    "stylus"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "shama",
      "email": "kyle@dontkry.com"
    },
    {
      "name": "mzgoddard",
      "email": "mzgoddard@gmail.com"
    }
  ],
  "name": "stylus-loader",
  "optionalDependencies": {},
  "peerDependencies": {
    "stylus": ">=0.52.4"
  },
  "readme": "# stylus-loader\nA [stylus](http://learnboost.github.io/stylus/) loader for [webpack](https://github.com/webpack/webpack).\n\n[![build status](https://secure.travis-ci.org/shama/stylus-loader.svg)](https://travis-ci.org/shama/stylus-loader)\n[![NPM version](https://badge.fury.io/js/stylus-loader.svg)](https://badge.fury.io/js/stylus-loader)\n\n## Usage\n\n```js\nvar css = require('!raw!stylus!./file.styl'); // Just the CSS\nvar css = require('!css!stylus!./file.styl'); // CSS with processed url(...)s\n```\n\nSee [css-loader](https://github.com/webpack/css-loader) to see the effect of processed `url(...)`s.\n\nOr within the webpack config:\n\n```js\nmodule: {\n  loaders: [{\n    test: /\\.styl$/,\n    loader: 'css-loader!stylus-loader?paths=node_modules/bootstrap-stylus/stylus/'\n  }]\n}\n```\n\nThen you can: `var css = require('./file.styl');`.\n\nUse in tandem with the [style-loader](https://github.com/webpack/style-loader) to add the css rules to your `document`:\n\n```js\nmodule: {\n  loaders: [\n    { test: /\\.styl$/, loader: 'style-loader!css-loader!stylus-loader' }\n  ]\n}\n```\n\nand then `require('./file.styl');` will compile and add the CSS to your page.\n\n`stylus-loader` can also take advantage of webpack's resolve options. With the default options it'll find files in `web_modules` as well as `node_modules`, make sure to prefix any lookup in node_modules with `~`. For example if you have a styles package lookup files in it like `@import '~styles/my-styles`. It can also find stylus files without having the extension specified in the `@import` and index files in folders if webpack is configured for stylus's file extension.\n\n```js\nmodule: {\n  resolve: {\n    extensions: ['', '.js', '.styl']\n  }\n}\n```\n\nwill let you have an `index.styl` file in your styles package and `require('styles')` or `@import '~styles'` it. It also lets you load a stylus file from a package installed in node_modules or if you add a modulesDirectories, like `modulesDirectories: ['node_modules', 'web_modules', 'bower_components']` option you could load from a folder like bower_components. To load files from a relative path leave off the `~` and `@import 'relative-styles/my-styles';` it.\n\nBe careful though not to use the extensions configuration for two types of in one folder. If a folder has a `index.js` and a `index.styl` and you `@import './that-folder'`, it'll end up importing a javascript file into your stylus.\n\n### Stylus Plugins\n\nYou can also use stylus plugins by adding an extra `stylus` section to your `webpack.config.js`.\n\n```js\nvar stylus_plugin = require('stylus_plugin');\nmodule: {\n  loaders: [\n    { test: /\\.styl$/, loader: 'style-loader!css-loader!stylus-loader' }\n  ]\n},\nstylus: {\n  use: [stylus_plugin()]\n}\n```\n\nMultiple configs can be used by giving other configs different names and referring to the with the `config` query option.\n\n\n```js\nvar stylus_plugin = require('stylus_plugin');\nmodule: {\n  loaders: [\n    {\n      test: /\\.other\\.styl$/,\n      loader: 'style-loader!css-loader!stylus-loader?config=stylusOther'\n    }\n  ]\n},\nstylusOther: {\n  use: [stylus_plugin()]\n}\n```\n\n#### Webpack 2\n\nWebpack 2 formalizes its options with a schema. Options can be provided to `stylus-loader` in the options field to `module.rules` or through LoaderOptionsPlugin or `stylus-loader`'s OptionsPlugin (a convenience wrapper around LoaderOptionsPlugin).\n\nConfig through module rules:\n\n```js\nmodule: {\n  rules: [\n    {\n      test: /\\.styl$/,\n      use: [\n        'style-loader',\n        'css-loader',\n        {\n          loader: 'stylus-loader',\n          options: {\n            use: [stylus_plugin()],\n          },\n        },\n      ],\n    }\n  ],\n},\n```\n\nConfig through LoaderOptionsPlugin:\n\n```js\nmodule: {\n  rules: [\n    {\n      test: /\\.styl$/,\n      loader: 'style-loader!css-loader!stylus-loader',\n    },\n  ],\n},\nplugins: [\n  new webpack.LoaderOptionsPlugin({\n    test: /\\.styl$/,\n    stylus: {\n      // You can have multiple stylus configs with other names and use them\n      // with `stylus-loader?config=otherConfig`.\n      default: {\n        use: [stylus_plugin()],\n      },\n      otherConfig: {\n        use: [other_plugin()],\n      },\n    },\n  }),\n],\n```\n\nConfig through `stylus-loader`'s OptionsPlugin (convenience wrapper for LoaderOptionsPlugin):\n\n```js\nplugins: [\n  new stylusLoader.OptionsPlugin({\n    default: {\n      use: [stylus_plugin()],\n    },\n  }),\n],\n```\n\n#### Using nib with stylus\n\nThe easiest way of enabling `nib` is to import it in the stylus options:\n\n```js\nstylus: {\n  use: [require('nib')()],\n  import: ['~nib/lib/nib/index.styl']\n}\n```\n\nwhere `~` resolves to `node_modules/`\n\n### Prefer webpack resolving\n\n`stylus-loader` currently prefers resolving paths with stylus's resovling utilities and then falling back to webpack when it can't find files. Use the `preferPathResolver` option with the value `'webpack'` to swap this. This has the benefit of using webpack's async resolving instead of stylus's sync resolving. If you have a lot of dependencies in your stylus files this'll let those dependencies be found in parallel.\n\n```js\nstylus: {\n  preferPathResolver: 'webpack',\n}\n```\n\n## Install\n\n`npm install stylus-loader stylus --save-dev`\n\n**Important**: in order to have ability use any `stylus` package version,\nit won't be installed automatically. So it's required to\nadd it to `package.json` along with `stylus-loader`.\n\n## Testing\n\n```\nnpm test\nopen http://localhost:8080/test/\n```\n\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style.\n\n## Release History\n* Please see https://github.com/shama/stylus-loader/releases\n* 2.5.1 - Fix paths mutation in options (@vio)\n* 2.5.0 - Define paths in global stylusOptions, in addtion to query params (@JounQin)\n* 2.4.0 - Add OptionsPlugin to help support webpack 2 (@mzgoddard)\n* 2.3.1 - Fix typo in README (@stevewillard)\n* 2.3.0 - Fix most use cases of relative path resolving (@mzgoddard), Add option to prefer a path resolver (webpack or stylus) (@mzgoddard)\n* 2.2.0 - Let stylus use option be just a function (@yuffiy), Track json calls as imports like use calls (@gnarf)\n* 2.1.2 - Fix support for stylus include config (@andrewburgess), Add block-level imports to listimports (@kenaniah)\n* 2.1.1 - Support Node 6 (@yyx990803), Test in webpack 1 and 2 (@phyllisstein)\n* 2.1.0 - Add support for stylus's include and set (@michaek)\n* 2.0.1 - Add peer dependency on stylus (@jchitel), fix PathCache for webpack 2 (@Unhelpful)\n* 2.0.0 - Remove dependency on stylus (@kossnocorps)\n* 1.6.1 - Remove version breaking change in 1.6.0\n* 1.6.0 - Remove dependency on stylus (@kossnocorps)\n* 1.3.0 - resolve use() calls (@mzgoddard), manual imports through path cache (@mzgoddard)\n* 1.2.0 - files in package.json (@SimenB), test running with testem (@mzgoddard), and some performance changes (@mzgoddard)\n* 1.1.0 - Pass through sourceMap option to stylus instead of defaulting to inline. Inherit source-map from devtool (@jordansexton).\n* 1.0.0 - Basic source map support (@skozin). Remove nib as dep. stylus is now a direct dep (as peerDependencies are deprecated).\n* 0.6.0 - Support loader prefixes when resolving paths (@kpdecker).\n* 0.5.0 - Disable Stylus parser caching in listImports (@DaQuirm). Update to stylus@0.49.2 and nib@1.0.4 as peerDependencies (@kompot).\n* 0.4.0 - Allow configuration of plugins through webpack config (@bobzoller). Update to stylus 0.47.2 (@shanewilson).\n* 0.3.1 - Fix when dependency (@tkellen)\n* 0.3.0 - Define url resolver() when \"resolve url\" option is true (@mzgoddard).\n* 0.2.0 - Now tracks dependencies for @import statements making cacheable work. Update stylus dep.\n* 0.1.0 - Initial release\n\n## License\nCopyright (c) 2014 Kyle Robinson Young  \nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/shama/stylus-loader.git"
  },
  "scripts": {
    "test": "testem ci",
    "test-build": "webpack --config test/webpack.config.js --output-path=test/tmp --output-filename=bundle.js",
    "test-dev": "testem -l firefox",
    "test-one": "testem ci -l firefox"
  },
  "version": "2.5.1"
}
