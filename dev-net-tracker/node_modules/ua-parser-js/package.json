{
  "_args": [
    [
      {
        "raw": "ua-parser-js@^0.7.9",
        "scope": null,
        "escapedName": "ua-parser-js",
        "name": "ua-parser-js",
        "rawSpec": "^0.7.9",
        "spec": ">=0.7.9 <0.8.0",
        "type": "range"
      },
      "C:\\Users\\paytonp\\dev-net-tracker\\node_modules\\fbjs"
    ]
  ],
  "_from": "ua-parser-js@>=0.7.9 <0.8.0",
  "_id": "ua-parser-js@0.7.14",
  "_inCache": true,
  "_location": "/ua-parser-js",
  "_nodeVersion": "4.2.6",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/ua-parser-js-0.7.14.tgz_1500468454756_0.2808702592737973"
  },
  "_npmUser": {
    "name": "faisalman",
    "email": "fyzlman@gmail.com"
  },
  "_npmVersion": "3.5.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ua-parser-js@^0.7.9",
    "scope": null,
    "escapedName": "ua-parser-js",
    "name": "ua-parser-js",
    "rawSpec": "^0.7.9",
    "spec": ">=0.7.9 <0.8.0",
    "type": "range"
  },
  "_requiredBy": [
    "/fbjs"
  ],
  "_resolved": "https://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.7.14.tgz",
  "_shasum": "110d53fa4c3f326c121292bbeac904d2e03387ca",
  "_shrinkwrap": null,
  "_spec": "ua-parser-js@^0.7.9",
  "_where": "C:\\Users\\paytonp\\dev-net-tracker\\node_modules\\fbjs",
  "author": {
    "name": "Faisal Salman",
    "email": "f@faisalman.com",
    "url": "http://faisalman.com"
  },
  "bugs": {
    "url": "https://github.com/faisalman/ua-parser-js/issues"
  },
  "contributors": [
    {
      "name": "Aamir Poonawalla",
      "email": "aamir@urx.com"
    },
    {
      "name": "Admas",
      "email": "mollases@users.noreply.github.com"
    },
    {
      "name": "algenon",
      "email": "m@antonz.ru"
    },
    {
      "name": "Andrea Vaghi",
      "email": "andrea.vaghi@jobrapido.com"
    },
    {
      "name": "Anton Zhiyanov",
      "email": "m@antonz.ru"
    },
    {
      "name": "Austin Pray",
      "email": "austin@austinpray.com"
    },
    {
      "name": "Benjamin Bertrand",
      "email": "bertrand.design@gmail.com"
    },
    {
      "name": "boneyao",
      "email": "admin@boneyao.com"
    },
    {
      "name": "Carl C Von Lewin",
      "email": "carlchristianlewin@gmail.com"
    },
    {
      "name": "CESAR RAMOS",
      "email": "c@imagenproactiva.com"
    },
    {
      "name": "Christopher De Cairos",
      "email": "chris.decairos@gmail.com"
    },
    {
      "name": "Davit Barbakadze",
      "email": "jayarjo@gmail.com"
    },
    {
      "name": "ddivernois",
      "email": "david-emmanuel.divernois@amadeus.com"
    },
    {
      "name": "Demis Palma",
      "email": "demis.palma@gmail.com"
    },
    {
      "name": "Dmitry Tyschenko",
      "email": "dtyschenko@gmail.com"
    },
    {
      "name": "Douglas Li",
      "email": "doug@knotch.it"
    },
    {
      "name": "Dumitru Uzun",
      "email": "contact@duzun.me"
    },
    {
      "name": "Erik Hesselink",
      "email": "hesselink@gmail.com"
    },
    {
      "name": "Fabian Becker",
      "email": "halfdan@xnorfz.de"
    },
    {
      "name": "Faisal Salman",
      "email": "fyzlman@gmail.com"
    },
    {
      "name": "Frédéric Camblor",
      "email": "fcamblor@gmail.com"
    },
    {
      "name": "Grigory Dmitrenko",
      "email": "grigory@snsk.ru"
    },
    {
      "name": "Hendrik Helwich",
      "email": "h.helwich@iplabs.de"
    },
    {
      "name": "jackpoll",
      "email": "jackpoll123456@gmail.com"
    },
    {
      "name": "Jake Mc",
      "email": "startswithaj@users.noreply.github.com"
    },
    {
      "name": "John Tantalo",
      "email": "john.tantalo@gmail.com"
    },
    {
      "name": "John Yanarella",
      "email": "jmy@codecatalyst.com"
    },
    {
      "name": "Jon Buckley",
      "email": "jon@jbuckley.ca"
    },
    {
      "name": "Kendall Buchanan",
      "email": "kendall@kendagriff.com"
    },
    {
      "name": "Lee Treveil",
      "email": "leetreveil@gmail.com"
    },
    {
      "name": "leonardo",
      "email": "leofiore@libero.it"
    },
    {
      "name": "Levente Balogh",
      "email": "noreply@github.com"
    },
    {
      "name": "Liam Quinn",
      "email": "lquinn@blackberry.com"
    },
    {
      "name": "Lithin",
      "email": "lithin@webklipper.com"
    },
    {
      "name": "Lukas Eipert",
      "email": "leipert@users.noreply.github.com"
    },
    {
      "name": "Malash",
      "email": "i@malash.me"
    },
    {
      "name": "Martynas",
      "email": "noreply@github.com"
    },
    {
      "name": "Maximilian Haupt",
      "email": "mail@maximilianhaupt.com"
    },
    {
      "name": "Max Maurer",
      "email": "maxemanuel.maurer@gmail.com"
    },
    {
      "name": "Michael Hess",
      "email": "mhess@connectify.me"
    },
    {
      "name": "naoh",
      "email": "noreply@github.com"
    },
    {
      "name": "Nik Rolls",
      "email": "nik@rolls.cc"
    },
    {
      "name": "niris",
      "email": "nirisix@gmail.com"
    },
    {
      "name": "otakuSiD",
      "email": "otakusid@gmail.com"
    },
    {
      "name": "Peter Dave Hello",
      "email": "PeterDaveHello@users.noreply.github.com"
    },
    {
      "name": "philippsimon",
      "email": "github@philippsimon.de"
    },
    {
      "name": "Pieter Hendrickx",
      "email": "pieter.hendrickx@belfius.be"
    },
    {
      "name": "Robert Tod",
      "email": "robert@qubit.com"
    },
    {
      "name": "Ross Noble",
      "email": "rosshnoble@gmail.com"
    },
    {
      "name": "Sandro Sonntag",
      "email": "sandro.sonntag@adorsys.de"
    },
    {
      "name": "sgautrea",
      "email": "shanegautreau@gmail.com"
    },
    {
      "name": "Shane Gautreau",
      "email": "sgautrea@opentext.com"
    },
    {
      "name": "Shane Thacker",
      "email": "shane@steadymade.com"
    },
    {
      "name": "Simon Eisenmann",
      "email": "simon@longsleep.org"
    },
    {
      "name": "Simon Lang",
      "email": "me@simonlang.org"
    },
    {
      "name": "Sylvain Gizard",
      "email": "sylvain.gizard@gmail.com"
    },
    {
      "name": "szchenghuang",
      "email": "szchenghuang@gmail.com"
    },
    {
      "name": "Vadim Kurachevsky",
      "email": "vadim@hmvs.org"
    },
    {
      "name": "Yun Young-jin",
      "email": "yupmin@yupmin-office-macmini.local"
    }
  ],
  "demo": "https://faisalman.github.io/ua-parser-js",
  "dependencies": {},
  "description": "Lightweight JavaScript-based user-agent string parser",
  "devDependencies": {
    "jshint": "~1.1.0",
    "mocha": "~1.8.0",
    "requirejs": "^2.3.2",
    "uglify-js": "~2.7.5",
    "verup": "^1.3.x"
  },
  "directories": {
    "dist": "dist",
    "src": "src",
    "test": "test"
  },
  "dist": {
    "shasum": "110d53fa4c3f326c121292bbeac904d2e03387ca",
    "tarball": "https://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.7.14.tgz"
  },
  "download": "https://raw.github.com/faisalman/ua-parser-js/master/dist/ua-parser.min.js",
  "engines": {
    "node": "*"
  },
  "gitHead": "7ae3098778572742544385938a2726c4efa01a02",
  "homepage": "http://github.com/faisalman/ua-parser-js",
  "keywords": [
    "user-agent",
    "parser",
    "browser",
    "engine",
    "os",
    "device",
    "cpu",
    "jquery-plugin",
    "ecosystem:jquery"
  ],
  "license": "(GPL-2.0 OR MIT)",
  "main": "src/ua-parser.js",
  "maintainers": [
    {
      "name": "faisalman",
      "email": "fyzlman@gmail.com"
    }
  ],
  "name": "ua-parser-js",
  "optionalDependencies": {},
  "readme": "# UAParser.js\n\n<img align=\"right\" src=\"https://raw.githubusercontent.com/faisalman/ua-parser-js/gh-pages/images/logo.png\"> A JavaScript-based User-Agent string parser. Can be used either in browser (client-side) or in node.js (server-side) environment. Also available as jQuery/Zepto plugin, Bower/Meteor package, & RequireJS/AMD module. This library aims to identify detailed type of web browser, layout engine, operating system, cpu architecture, and device type/model, entirely from user-agent string with a relatively small footprint (~11KB when minified / ~4KB gzipped). Written in vanilla JavaScript, which means it doesn't require any other library and can be used independently. However, it's not recommended to use this library as browser detection since the result may not accurate than using feature detection.\n\n[![Build Status](https://travis-ci.org/faisalman/ua-parser-js.svg?branch=master)](https://travis-ci.org/faisalman/ua-parser-js)\n[![NPM downloads](https://img.shields.io/npm/dw/ua-parser-js.svg)](https://www.npmjs.com/package/ua-parser-js)\n[![NPM](https://img.shields.io/npm/v/ua-parser-js.svg)](https://www.npmjs.com/package/ua-parser-js)\n[![Bower](https://img.shields.io/bower/v/ua-parser-js.svg)](https://bower.io/)\n[![CDNJS](https://img.shields.io/cdnjs/v/UAParser.js.svg)](https://cdnjs.com/libraries/UAParser.js)\n[![Gratipay](https://img.shields.io/gratipay/team/UAParser.js.svg)](https://gratipay.com/UAParser.js)\n[![Flattr this](http://api.flattr.com/button/flattr-badge-large.png)](http://flattr.com/thing/3867907/faisalmanua-parser-js-on-GitHub)\n\n* Author    : Faisal Salman <<f@faisalman.com>>\n* Demo      : http://faisalman.github.io/ua-parser-js\n* Source    : https://github.com/faisalman/ua-parser-js\n\n# Constructor\n\n* `new UAParser([uastring][,extensions])`\n    * returns new instance\n\n* `UAParser([uastring][,extensions])`\n    * returns result object `{ ua: '', browser: {}, cpu: {}, device: {}, engine: {}, os: {} }`\n\n# Methods\n\n* `getBrowser()`\n    * returns `{ name: '', version: '' }`\n\n```\n# Possible 'browser.name':\nAmaya, Android Browser, Arora, Avant, Baidu, Blazer, Bolt, Bowser, Camino, Chimera, \nChrome [WebView], Chromium, Comodo Dragon, Conkeror, Dillo, Dolphin, Doris, Edge, \nEpiphany, Fennec, Firebird, Firefox, Flock, GoBrowser, iCab, ICE Browser, IceApe, \nIceCat, IceDragon, Iceweasel, IE[Mobile], Iron, Jasmine, K-Meleon, Konqueror, Kindle, \nLinks, Lunascape, Lynx, Maemo, Maxthon, Midori, Minimo, MIUI Browser, [Mobile] Safari, \nMosaic, Mozilla, Netfront, Netscape, NetSurf, Nokia, OmniWeb, Opera [Mini/Mobi/Tablet], \nPhantomJS, Phoenix, Polaris, QQBrowser, RockMelt, Silk, Skyfire, SeaMonkey, Sleipnir, \nSlimBrowser, Swiftfox, Tizen, UCBrowser, Vivaldi, w3m, WeChat, Yandex\n\n# 'browser.version' determined dynamically\n```\n\n* `getDevice()`\n    * returns `{ model: '', type: '', vendor: '' }` \n\n```\n# Possible 'device.type':\nconsole, mobile, tablet, smarttv, wearable, embedded\n\n# Possible 'device.vendor':\nAcer, Alcatel, Amazon, Apple, Archos, Asus, BenQ, BlackBerry, Dell, GeeksPhone, \nGoogle, HP, HTC, Huawei, Jolla, Lenovo, LG, Meizu, Microsoft, Motorola, Nexian, \nNintendo, Nokia, Nvidia, OnePlus, Ouya, Palm, Panasonic, Pebble, Polytron, RIM, \nSamsung, Sharp, Siemens, Sony[Ericsson], Sprint, Xbox, Xiaomi, ZTE\n\n# 'device.model' determined dynamically\n```\n\n* `getEngine()`\n    * returns `{ name: '', version: '' }`\n\n```\n# Possible 'engine.name'\nAmaya, EdgeHTML, Gecko, iCab, KHTML, Links, Lynx, NetFront, NetSurf, Presto, \nTasman, Trident, w3m, WebKit\n\n# 'engine.version' determined dynamically\n```\n\n* `getOS()`\n    * returns `{ name: '', version: '' }`\n\n```\n# Possible 'os.name'\nAIX, Amiga OS, Android, Arch, Bada, BeOS, BlackBerry, CentOS, Chromium OS, Contiki,\nFedora, Firefox OS, FreeBSD, Debian, DragonFly, Gentoo, GNU, Haiku, Hurd, iOS, \nJoli, Linpus, Linux, Mac OS, Mageia, Mandriva, MeeGo, Minix, Mint, Morph OS, NetBSD, \nNintendo, OpenBSD, OpenVMS, OS/2, Palm, PC-BSD, PCLinuxOS, Plan9, Playstation, QNX, RedHat, \nRIM Tablet OS, RISC OS, Sailfish, Series40, Slackware, Solaris, SUSE, Symbian, Tizen, \nUbuntu, UNIX, VectorLinux, WebOS, Windows [Phone/Mobile], Zenwalk\n\n# 'os.version' determined dynamically\n```\n\n* `getCPU()`\n    * returns `{ architecture: '' }`\n\n```\n# Possible 'cpu.architecture'\n68k, amd64, arm[64], avr, ia[32/64], irix[64], mips[64], pa-risc, ppc, sparc[64]\n```\n\n* `getResult()`\n    * returns `{ ua: '', browser: {}, cpu: {}, device: {}, engine: {}, os: {} }`\n\n* `getUA()`\n    * returns UA string of current instance\n\n* `setUA(uastring)`\n    * set UA string to parse\n    * returns current instance\n\n\n# Example\n\n```html\n<!doctype html>\n<html>\n<head>\n<script type=\"text/javascript\" src=\"ua-parser.min.js\"></script>\n<script type=\"text/javascript\">\n\n\tvar parser = new UAParser();\n\n    // by default it takes ua string from current browser's window.navigator.userAgent\n    console.log(parser.getResult());\n    /*\n        /// this will print an object structured like this:\n        {\n            ua: \"\",\n            browser: {\n                name: \"\",\n                version: \"\"\n            },\n            engine: {\n                name: \"\",\n                version: \"\"\n            },\n            os: {\n                name: \"\",\n                version: \"\"\n            },\n            device: {\n                model: \"\",\n                type: \"\",\n                vendor: \"\"\n            },\n            cpu: {\n                architecture: \"\"\n            }\n        }\n    */\n\n    // let's test a custom user-agent string as an example\n    var uastring = \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.2 (KHTML, like Gecko) Ubuntu/11.10 Chromium/15.0.874.106 Chrome/15.0.874.106 Safari/535.2\";\n    parser.setUA(uastring);\n\n    var result = parser.getResult();\n    // this will also produce the same result (without instantiation):\n    // var result = UAParser(uastring);\n\n    console.log(result.browser);        // {name: \"Chromium\", version: \"15.0.874.106\"}\n    console.log(result.device);         // {model: undefined, type: undefined, vendor: undefined}\n    console.log(result.os);             // {name: \"Ubuntu\", version: \"11.10\"}\n    console.log(result.os.version);     // \"11.10\"\n    console.log(result.engine.name);    // \"WebKit\"\n    console.log(result.cpu.architecture);   // \"amd64\"\n\n    // do some other tests\n    var uastring2 = \"Mozilla/5.0 (compatible; Konqueror/4.1; OpenBSD) KHTML/4.1.4 (like Gecko)\";\n    console.log(parser.setUA(uastring2).getBrowser().name); // \"Konqueror\"\n    console.log(parser.getOS());                            // {name: \"OpenBSD\", version: undefined}\n    console.log(parser.getEngine());                        // {name: \"KHTML\", version: \"4.1.4\"}\n\n    var uastring3 = 'Mozilla/5.0 (PlayBook; U; RIM Tablet OS 1.0.0; en-US) AppleWebKit/534.11 (KHTML, like Gecko) Version/7.1.0.7 Safari/534.11';\n    console.log(parser.setUA(uastring3).getDevice().model); // \"PlayBook\"\n    console.log(parser.getOS())                             // {name: \"RIM Tablet OS\", version: \"1.0.0\"}\n    console.log(parser.getBrowser().name);                  // \"Safari\"\n\n</script>\n</head>\n<body>\n</body>\n</html>\n```\n\n## Using node.js\n\n```sh\n$ npm install ua-parser-js\n```\n\n```js\nvar http = require('http');\nvar parser = require('ua-parser-js');\n\nhttp.createServer(function (req, res) {\n    // get user-agent header\n    var ua = parser(req.headers['user-agent']);\n    // write the result as response\n    res.end(JSON.stringify(ua, null, '  '));\n})\n.listen(1337, '127.0.0.1');\n\nconsole.log('Server running at http://127.0.0.1:1337/');\n```\n\n## Using requirejs\n\n```js\nrequirejs.config({\n    baseUrl : 'js/lib', // path to your script directory\n    paths   : {\n        'ua-parser-js' : 'ua-parser.min'\n    }\n});\n\nrequirejs(['ua-parser-js'], function(UAParser) {\n    var parser = new UAParser();\n    console.log(parser.getResult());\n});\n```\n\n## Using bower\n\n```sh\n$ bower install ua-parser-js\n```\n\n## Using meteor\n\n```sh\n$ meteor add faisalman:ua-parser-js\n```\n\n## Using jQuery/Zepto ($.ua)\n\nAlthough written in vanilla js (which means it doesn't depends on jQuery), this library will automatically detect if jQuery/Zepto is present and create `$.ua` object based on browser's user-agent (although in case you need, `window.UAParser` constructor is still present). To get/set user-agent you can use: `$.ua.get()` / `$.ua.set(uastring)`. \n\n```js\n// In browser with default user-agent: 'Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Sprint APA7373KT Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0':\n\n// Do some tests\nconsole.log($.ua.device);           // {vendor: \"HTC\", model: \"Evo Shift 4G\", type: \"mobile\"}\nconsole.log($.ua.os);               // {name: \"Android\", version: \"2.3.4\"}\nconsole.log($.ua.os.name);          // \"Android\"\nconsole.log($.ua.get());            // \"Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Sprint APA7373KT Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0\"\n\n// reset to custom user-agent\n$.ua.set('Mozilla/5.0 (Linux; U; Android 3.0.1; en-us; Xoom Build/HWI69) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13');\n\n// Test again\nconsole.log($.ua.browser.name);     // \"Safari\"\nconsole.log($.ua.engine.name);      // \"Webkit\"\nconsole.log($.ua.device);           // {vendor: \"Motorola\", model: \"Xoom\", type: \"tablet\"}\nconsole.log(parseInt($.ua.browser.version.split('.')[0], 10));  // 4\n\n// Add class to <body> tag\n// <body class=\"ua-browser-safari ua-devicetype-tablet\">\n$('body').addClass('ua-browser-' + $.ua.browser.name + ' ua-devicetype-' + $.ua.device.type);\n```\n\n## Extending regex patterns\n\n* `UAParser([uastring,] extensions)`\n\nPass your own regexes to extend the limited matching rules.\n\n```js\n// Example:\nvar myOwnRegex = [[/(myownbrowser)\\/([\\w\\.]+)/i], [UAParser.BROWSER.NAME, UAParser.BROWSER.VERSION]];\nvar myParser = new UAParser({ browser: myOwnRegex });\nvar uaString = 'Mozilla/5.0 MyOwnBrowser/1.3';\nconsole.log(myParser.setUA(uaString).getBrowser());   // {name: \"MyOwnBrowser\", version: \"1.3\"}\n```\n\n\n# Development\n\n## Contribute\n\n* Fork and clone this repository\n* Make some changes as required\n* Write a unit test to showcase your feature\n* Run the test suites to make sure the changes you made didn't break anything `$ npm run test`\n* Commit and push to your own repository\n* Submit a pull request to this repository under `develop` branch\n* Profit? $$$\n\n## Build\n\nBuild a minified & packed script\n\n```sh\n$ npm run build\n```\n\n\n# Donate\n\nDo you use & like UAParser.js but you don’t find a way to show some love? If yes, please consider donating to support this project. Otherwise, no worries, regardless of whether there is support or not, I will keep maintaining this project. Still, if you buy me a cup of coffee I would be more than happy though :)\n\n[![Support via Pledgie](https://pledgie.com/campaigns/34252.png?skin_name=chrome)](https://pledgie.com/campaigns/34252)\n\n\n# License\n\nDual licensed under GPLv2 & MIT\n\nCopyright © 2012-2016 Faisal Salman <<fyzlman@gmail.com>>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in \nthe Software without restriction, including without limitation the rights to use, \ncopy, modify, merge, publish, distribute, sublicense, and/or sell copies of the \nSoftware, and to permit persons to whom the Software is furnished to do so, \nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/faisalman/ua-parser-js.git"
  },
  "scripts": {
    "build": "uglifyjs src/ua-parser.js -o dist/ua-parser.min.js --comments '/UAParser\\.js/' && uglifyjs src/ua-parser.js -o dist/ua-parser.pack.js --comments '/UAParser\\.js/' --compress --mangle",
    "test": "jshint src/ua-parser.js && mocha -R nyan test/test.js",
    "version": "node ./node_modules/verup 0",
    "verup": "node ./node_modules/verup"
  },
  "title": "UAParser.js",
  "version": "0.7.14",
  "verup": {
    "files": [
      "bower.json",
      "package.js",
      "src/ua-parser.js"
    ],
    "regs": [
      "^((?:\\$|(\\s*\\*\\s*@)|(\\s*(?:var|,)?\\s+))(?:LIBVERSION|version)[\\s\\:='\"]+)([0-9]+(?:\\.[0-9]+){2,2})",
      "^(\\s?\\*.*v)([0-9]+(?:\\.[0-9]+){2,2})"
    ]
  }
}
