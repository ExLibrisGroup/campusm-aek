{
  "_args": [
    [
      {
        "raw": "z-schema-errors@0.0.1",
        "scope": null,
        "escapedName": "z-schema-errors",
        "name": "z-schema-errors",
        "rawSpec": "0.0.1",
        "spec": "0.0.1",
        "type": "version"
      },
      "C:\\Users\\paytonp\\dev-net-tracker\\node_modules\\opter"
    ]
  ],
  "_from": "z-schema-errors@0.0.1",
  "_id": "z-schema-errors@0.0.1",
  "_inCache": true,
  "_location": "/z-schema-errors",
  "_npmUser": {
    "name": "dschenkelman",
    "email": "damian.schenkelman@gmail.com"
  },
  "_npmVersion": "1.4.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "z-schema-errors@0.0.1",
    "scope": null,
    "escapedName": "z-schema-errors",
    "name": "z-schema-errors",
    "rawSpec": "0.0.1",
    "spec": "0.0.1",
    "type": "version"
  },
  "_requiredBy": [
    "/opter"
  ],
  "_resolved": "https://registry.npmjs.org/z-schema-errors/-/z-schema-errors-0.0.1.tgz",
  "_shasum": "e06270a4ca43925729f25764789ca9f46bff0f7d",
  "_shrinkwrap": null,
  "_spec": "z-schema-errors@0.0.1",
  "_where": "C:\\Users\\paytonp\\dev-net-tracker\\node_modules\\opter",
  "author": {
    "name": "Damian Schenkelman"
  },
  "bugs": {
    "url": "https://github.com/dschenkelman/z-schema-errors/issues"
  },
  "dependencies": {
    "xtend": "^4.0.0"
  },
  "description": "A module to normalize error messages from Z-Schema error reports",
  "devDependencies": {
    "jshint": "^2.4.4",
    "mocha": "^1.18.0",
    "should": "^3.1.3"
  },
  "directories": {},
  "dist": {
    "shasum": "e06270a4ca43925729f25764789ca9f46bff0f7d",
    "tarball": "https://registry.npmjs.org/z-schema-errors/-/z-schema-errors-0.0.1.tgz"
  },
  "homepage": "https://github.com/dschenkelman/z-schema-errors",
  "jshintConfig": {
    "strict": "true",
    "globalstrict": "true"
  },
  "keywords": [
    "json-schema",
    "errors"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "dschenkelman",
      "email": "damian.schenkelman@gmail.com"
    }
  ],
  "name": "z-schema-errors",
  "optionalDependencies": {},
  "readme": "z-schema-errors\n========\nA module to normalize error messages from [Z-Schema](https://github.com/zaggino/z-schema) error reports.\n\nInstalling\n------------\n```Shell\nnpm install z-schema-errors\n```\n\nIntroduction\n----------\nThis module aims to standarize how messages are created for reports. It:\n* Automatically transforms nested properties and array elements in `path` into a friendly notation that can be understood by programmers. For example `path: '#/items/[0]'` becomes `items[0]`.\n* Extracts the first nested array in `params`.\n* Allows users to customize message format on an error code basis, specifying where to place different properties using macros. Supported macros are: `{message}`, `{path}`, `{description}`, `{params}`.\n* Allows users to provide a `contextMessage` to be included in all errors through the `{contextMessage}` macro.\n* Allows user to specify how the values for `{message}`, `{path}`, `{description}`, `{params}` are generated.\n\n> To check the defaults take a look at the [source code](https://github.com/dschenkelman/z-schema-errors/blob/master/lib/index.js#L8-L30).\n\nBasic usage\n-----------\nUse this if you want to get quickly started:\n```javascript\nvar ZSchema = require('z-schema');\nvar ZSchemaErrors = require('z-schema-errors');\n\nvar validator = new ZSchema();\nvar reporter = ZSchemaErrors.init();\n\nvar isValid = validator.validate(json, schema);\n\nif (!isValid){\n    console.log(validator.lastReport);\n    // {\n    //    errors:\n    //    [\n    //          {\n    //              code: 'ENUM_MISMATCH',\n    //              params: [ 'invalid_value' ],\n    //              description: 'The elements'\n    //              path: '#/elements',\n    //          }\n    //     ]\n    // };\n\n    var errorMessage = reporter.extractMessage(validator.lastReport);\n\n    console.log(errorMessage);\n    // prints \"An error occurred 'Invalid property \\\"invalid_value\\\"' on property elements (The elements).\"\n}\n```\n\nCustomizing the format of messages\n-----------------\nIf you want more control over how the message is created:\n```javascript\nvar ZSchema = require('z-schema');\nvar ZSchemaErrors = require('z-schema-errors');\n\nvar validator = new ZSchema();\nvar reporter = ZSchemaErrors.init({\n    formats: {\n        'INVALID_TYPE': '{path} has an invalid type. Error: {message}'\n    }\n});\n\nvar isValid = validator.validate(json, schema);\n\nif (!isValid){\n    console.log(validator.lastReport);\n    // {\n    //    errors:\n    //    [\n    //          {\n    //              code: 'INVALID_TYPE',\n    //              path: '#/items/[0]',\n    //              description: 'The item',\n    //              message: 'Expected type number but found type string'\n    //          }\n    //     ]\n    // };\n    var errorMessage = reporter.extractMessage(validator.lastReport);\n\n    console.log(errorMessage);\n    // prints \"items[0] has an invalid type. Error: Expected type number but found type string\"\n}\n```\n\nCustomizing macro values\n-----------------\nIf you want more control over how each macro value is determined:\n```javascript\nvar ZSchema = require('z-schema');\nvar ZSchemaErrors = require('z-schema-errors');\n\nvar validator = new ZSchema();\nvar reporter = ZSchemaErrors.init({\n    extractors: {\n        description: function(d){ return 'Description: ' + d; }\n    }\n});\n\nvar isValid = validator.validate(json, schema);\n\nif (!isValid){\n    console.log(validator.lastReport);\n    // {\n    //    errors:\n    //    [\n    //          {\n    //              code: 'INVALID_TYPE',\n    //              path: '#/items/[0]',\n    //              description: 'The item',\n    //              message: 'Expected type number but found type string'\n    //          }\n    //     ]\n    // };\n    var errorMessage = reporter.extractMessage(validator.lastReport);\n\n    console.log(errorMessage);\n    // prints \"An error occurred 'Expected type number but found type string' on property items[0] Description: The item.\"\n}\n```\n\nCustomizing the context message\n-------------------\nIf you want to change the context message:\n```javascript\nvar ZSchema = require('z-schema');\nvar ZSchemaErrors = require('z-schema-errors');\n\nvar validator = new ZSchema();\nvar reporter = ZSchemaErrors.init({\n    contextMessage: 'Error!!!'\n});\n\n...\n\nvar isValid = validator.validate(json, schema);\n\nif (!isValid){\n    console.log(validator.lastReport);\n    // {\n    //    errors:\n    //    [\n    //          {\n    //              code: 'INVALID_TYPE',\n    //              path: '#/items/[0]',\n    //              description: 'The item',\n    //              message: 'Expected type number but found type string'\n    //          }\n    //     ]\n    // };\n    var errorMessage = reporter.extractMessage(validator.lastReport);\n\n    console.log(errorMessage);\n    // prints \"\"Error!!! 'Expected type number but found type string' on property items[0] (The item).\"\n}\n```\n\nContributing\n---------\nPull requests and issues are more than welcome. When submitting a PR make sure to run the tests:\n``` Shell\nnpm test\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/dschenkelman/z-schema-errors.git"
  },
  "scripts": {
    "pretest": "find lib test -name '*.js' -print0 | xargs -0 jshint",
    "test": "mocha --reporter list"
  },
  "version": "0.0.1"
}
