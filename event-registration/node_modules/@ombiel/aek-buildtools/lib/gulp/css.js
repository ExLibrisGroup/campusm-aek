"use strict";
var sourcemaps = require("gulp-sourcemaps");
var less = require("gulp-less");
var stylus = require("gulp-stylus");
var autoprefixer = require("gulp-autoprefixer");
var minifyCSS = require("gulp-minify-css");
var gulpNotify = require("gulp-notify");
var plumber = require("gulp-plumber");
var hashFiles = require('hash-files');
var merge = require("merge-stream");
var Promise = require("rsvp").Promise;
var gulp = require("gulp");

var ombConf = require("@ombiel/aek-fstore")("./package.json","ombiel");
var pkg = require("@ombiel/aek-fstore")("./package.json");

var sourcemapOptions = {sourceRoot:"aek:///"+pkg.get("name")+"/./src/client/css"};

module.exports = function() {

  function build() {
    return new Promise(function(resolve) {
      merge(
        gulp.src('src/client/css/*.less')
          .pipe(plumber({errorHandler: gulpNotify.onError({message:"Error: <%= error.message %>",sound:"Basso"})}))
          .pipe(sourcemaps.init())
          .pipe(less())
          .pipe(autoprefixer())
          .pipe(sourcemaps.write(null,sourcemapOptions))
          .pipe(gulp.dest('public/dev/css'))
          .pipe(gulpNotify({title:"CSS Less Success",sound:"Tink",message:"<%= file.relative %>"}))
        ,
        gulp.src('src/client/css/*.styl')
          .pipe(plumber({errorHandler: gulpNotify.onError({message:"Error: <%= error.message %>",sound:"Basso"})}))
          .pipe(sourcemaps.init())
          .pipe(stylus())
          .pipe(autoprefixer())
          .pipe(sourcemaps.write(null,sourcemapOptions))
          .pipe(gulp.dest('public/dev/css'))
          .pipe(gulpNotify({title:"CSS Stylus Success",sound:"Tink",message:"<%= file.relative %>"}))
        ,
        gulp.src('src/client/css/*.css')
          .pipe(gulp.dest('public/dev/css'))
      )
      .on("end",resolve)
      .resume();
    });
  }



  return {
    dev:function(cb) {
      build().then(function() {
        ombConf.set("css.build.dev",hashFiles.sync({files:["public/dev/css/**"]}));
        cb();
      });
    },
    prod:function(cb) {
      gulp.src('public/dev/css/**/*.css')
        .pipe(minifyCSS())
        .pipe(gulp.dest('public/prod/css'))
        .on("end",function() {
          ombConf.set("css.build.prod",{dev:ombConf.get("css.build.dev"),prod:hashFiles.sync({files:["public/prod/css/**"]})});
          cb();
        })
        .resume();
    }
  };
};
