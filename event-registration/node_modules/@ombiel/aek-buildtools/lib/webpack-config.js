var _ = require("lodash");
var path = require("path");
var pkg = require("@ombiel/aek-fstore")("./package.json");
var webpack = require("webpack");

var autoprefixerConf = JSON.stringify(require("./conf/autoprefixer"));

module.exports = function(opts) {

  if(opts && opts.env) {
    if(opts.prod && opts.env.prod) {
      opts = _.extend({},opts,opts.env.prod);
    }
    else if(opts.env.dev) {
      opts = _.extend({},opts,opts.env.dev);
    }
  }

  var webpackConfig = {
    module: {
      loaders: [
        { test: /\.es6\.js$/, loader: 'source-map-loader!babel?optional=runtime' },
        { test: /\.jsx$/, loader: 'source-map-loader!babel?optional=runtime' },
        { test: /\.coffee$/, loader: 'source-map-loader!coffee' },
        { test: /\.json$/, loader: 'json' },
        { test: /\.css$/,exclude:/\.gbl\.css$/,loader: 'style?sourceMap!css?modules!autoprefixer?' + autoprefixerConf },
        { test: /\.less$/,exclude:/\.gbl\.less$/, loader: 'style?sourceMap!css?modules!autoprefixer?' + autoprefixerConf + '!less' },
        { test: /\.styl$/,exclude:/\.gbl\.styl$/, loader: 'style?sourceMap!css?modules!autoprefixer?' + autoprefixerConf + '!stylus' },
        { test: /\.gbl\.css$/, loader: 'style?sourceMap!css!autoprefixer?' + autoprefixerConf },
        { test: /\.gbl\.less$/, loader: 'style?sourceMap!css!autoprefixer?' + autoprefixerConf + '!less' },
        { test: /\.gbl\.styl$/, loader: 'style?sourceMap!css!autoprefixer?' + autoprefixerConf + '!stylus' }

      ]
    },
    entry:opts.entry,
    output:{
      path:"/public/js/",
      publicPath:"/public/js/",
      filename:"[name].js",
      devtoolModuleFilenameTemplate:function(info) {
        return "aek:///" + pkg.get("name") + "/" + info.resourcePath.replace(/^\.\//,"").replace(/(\~|\.\.)\//g,"node_modules/");
      }
    },
    resolve:{
      modulesDirectories:["./node_modules",path.resolve("./node_modules"),path.resolve(__dirname,"../node_modules")],
      extensions:["",".es6.js",".js",".coffee",".jsx",".json",".css",".less",".styl",".gbl.css",".gbl.less",".gbl.styl"],
      alias:_.extend({},opts.alias,{
        "-":path.resolve("./")
      })
    },
    externals:opts.externals || {},
    resolveLoader:{
      modulesDirectories:["./node_modules",path.resolve("./node_modules"),path.resolve(__dirname,"../node_modules")]
    },
    plugins:[
      new webpack.DefinePlugin({
        __aekENV__:opts.prod && '"prod"' || '"dev"',
        __aekPackageVersion__:'"' + pkg.get("version") + '"'
      }),
      new webpack.IgnorePlugin(/^\.\/locale$/, /moment$/)
    ]

  };

  if(opts.module && opts.module.loaders) {
    webpackConfig.module.loaders = webpackConfig.module.loaders.concat(opts.module.loaders);
  }
  if(opts.plugins) {
    webpackConfig.plugins = webpackConfig.plugins.concat(opts.plugins);
  }

  if(opts.commons) {
    webpackConfig.plugins.push(new webpack.optimize.CommonsChunkPlugin("common","common.js"));
  }
  if(!opts.noMaps) {
    webpackConfig.devtool = 'source-map';
  }
  if(opts.prod) {
    webpackConfig.plugins.push(new webpack.optimize.UglifyJsPlugin({
      compress: {
        warnings: false
      }
    }));
  }

  return webpackConfig;
};
