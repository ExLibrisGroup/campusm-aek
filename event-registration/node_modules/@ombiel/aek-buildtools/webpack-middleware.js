var webpack = require("webpack");
var chokidar = require("chokidar");
var _ = require("lodash");
var glob = require("glob");
var path = require("path");
var options = {};
var entry;

var config,compiler,middleware;


function getEntry() {
  var files = glob.sync("/*.{jsx,js,coffee}",{root:options.srcBase});
  var out = {};
  files.forEach(function(filename) {
    out[path.basename(path.basename(filename,path.extname(filename)),".es6")] = path.resolve(options.srcBase,filename);
  });
  return out;
}


function reset() {

  if(middleware) {
    middleware.close();
  }

  console.log("Resetting webpack config");

  config = require("./lib/webpack-config")(_.extend({},options,{entry:entry,prod:false}));
  config.devtool = options.devtool || "cheap-module-eval-source-map";
  compiler = webpack(config);

  middleware = require("webpack-dev-middleware")(compiler,{ 
    publicPath:"/",
    stats:{
      colors:true,
      chunkModules:false,
      chunks:false
    }
  });  
}

function start() {
  entry = getEntry();
  reset();
  
  chokidar.watch(path.resolve(options.srcBase),{ignoreInitial:true}).on("all",_.debounce(function() {
    var newEntry = getEntry();
    if(!_.isEqual(entry,newEntry)) {
      entry = newEntry;
      reset();
    }
  },100));
}

module.exports = function(req,res,next) {
  if(!middleware) {
    start();
  }
  
  return middleware(req,res,next);
};

module.exports.setOptions = function(opts) {
  options = opts;
};

module.exports.start = start;


