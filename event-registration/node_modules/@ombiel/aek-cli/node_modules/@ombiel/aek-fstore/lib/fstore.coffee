fs = require("fs")

class FStore 
  constructor:(@filename,@base=[])->
    if typeof(@base)=="string"
      @base=@base.split(".")
    @rootData = null

  load:()->
    if fs.existsSync(@filename)
      @rootData = JSON.parse(fs.readFileSync(@filename))
    else
      @rootData = {}

  normKey:(key)->
    if typeof(key)=="string"
      key = key.split(".")
    key = @base.concat(key)

  get:(key,useCache=false)->
    if !useCache or !@rootData?
      @load()
    key = @normKey(key)
    keyIndex = 0
    target = @rootData
    while target && keyIndex<key.length
      target = target[key[keyIndex]]
      keyIndex += 1
    return target


  set:(key,val)->
    @load()
    key = @normKey(key)
    target = @rootData
    for k in key[...-1]
      do(k)->
        if !target[k]
          target[k] = {}
        target = target[k]

    target[key[key.length-1]] = val
    fs.writeFileSync(@filename,JSON.stringify(@rootData,null,2))

module.exports = (filename,base=[])->
  return new FStore(filename,base)