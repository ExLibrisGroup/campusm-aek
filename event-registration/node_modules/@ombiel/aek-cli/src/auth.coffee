log = require("./logger")
utils = require("./utils")
config = require("./config")
Promise = require("rsvp").Promise
request = require("request")
inquirer = require("inquirer")
npm = require("./npm")
_ = require("lodash")
fs = require("fs")
URL = require("url")

pkgOmbiel = require("./fstore")("./package.json","ombiel")


getStoredCreds = ()->
  utils.npmGet("username").then (username)->
    if username
      utils.npmGet("omb_token")
        .then (token)->
          return {
            username:username
            token:token
          }

loginPrompt = (fields)->
  return new Promise (resolve,reject)->
    utils.npmGet("username")
      .then (username)-> 
        userQuestion = 
          name:"username"
          message:"username"
          
        if username
          userQuestion.default = username
        
        inquirer.prompt [
          userQuestion
          {
            name:"password"
            message:"password"
            type:"password"
          }
        ],(creds)->
          resolve(authenticate(creds,fields))

      .catch (e)->
        reject(e)

renew = (fields)->
  getStoredCreds()
    .then (creds)->
      return authenticate(creds,fields)
    .catch ()->
      return loginPrompt(fields)

login = (creds,fields)->
  if creds and creds.username and creds.password
    return authenticate(creds,fields)
  else
    return renew(fields)


logout = ()->
  utils.npmDelete("_password").then ()->
    utils.npmDelete("omb_token").then ()->
      utils.npmDelete("username").then ()->
        utils.npmDelete("email").then ()->
          utils.npmDelete("always-auth").then ()->
            host = URL.parse(config.registry).host.replace(/\:/gi,"_")
            npm.command "cache",["clean",host]
    

authenticate = (creds,fields)->

  requestOptions = form:_.clone(creds)

  if fields
    requestOptions.form.fields = fields
    
  return new Promise (resolve,reject)->
    
    dc = utils.getDC(creds.username)
    requestOptions.form.username = dc.username
    
    request.post "#{dc.appManagerBase}/aek/auth/user-details",requestOptions,(err,res,body)->
      try
        data = JSON.parse(body)

      if data?.token

        promise = Promise.resolve()

        promise = promise.then ()->
          npm.command "set",["@ombiel:registry",config.registry+"/"]

        promise = promise.then ()->
          utils.npmSet("username",creds.username)

        promise = promise.then ()->
          utils.npmSet("_password",new Buffer(data.token).toString('base64'))

        promise = promise.then ()->
          utils.npmSet("omb_token",data.token)

        promise = promise.then ()->
          utils.npmSet("email",data.email)

        promise = promise.then ()->
          utils.npmSet("always-auth","true")

        promise.then ()->
          resolve(_.extend({},data,username:creds.username))
        .catch (err)->
          reject(err)
        
      else
        reject (err ? Error(data && data.error || "login failed"))



_userDetails = null
getUserDetails = (creds)->
  promise = new Promise (resolve,reject)->
    if _userDetails
      resolve(_userDetails)
    else
      login(creds,"apps")
        .then (userDetails)->
          # console.log "USERDETAILS",userDetails
          _userDetails = userDetails
          resolve(userDetails)
        .catch (e)->
          reject(e)

getOptionHostnames = (opts,data,defaultHost)->
  opts = _.clone(opts)
  new Promise (resolve,reject)->
    getUserDetails(data)
      .then (userDetails)->
        apps = userDetails.apps
        if apps=="all"
          try
            pkgHosts = pkgOmbiel.get("access.write.hosts")
            if pkgHosts
              opts.choices = pkgHosts
            else
              opts.default = defaultHost || "mycudev.ombiel.co.uk"
          catch e
            opts.default = defaultHost || "mycudev.ombiel.co.uk"
        else
          opts.choices = _.pluck(apps,"hostname")
        resolve(opts)
      .catch (e)->
        log.error(e)


module.exports = {login,renew,authenticate,logout,getUserDetails,getOptionHostnames}

  
