var React = require("react");
var mergeProps = require("../utils/merge-props");
var getChildren = require("../utils/children");
var _ = require("../../utils");
var pickHtmlProps = require("../utils/pick-html-props");

var Button = React.createClass({
  render:function() {

    var initialProps = {
      className:"ui button"
    };

    // if loading we should disable by default
    if(this.props.loading) { initialProps.disabled = true; }


    var props = mergeProps(initialProps,this.props);

    var classSet = {};


    // add relevant classes for "state"
    for (let state of ["active","disabled","loading","basic","inverted","fluid","circular","compact"]) {
      if(props[state]) {
        classSet[state] = true;
      }
    }

    // sizes
    if(_.contains(["mini","tiny","small","big","large","huge","massive"],props.size)) {
      classSet[props.size] = true;
    }

    // variations
    if(props.variation) {
      classSet[props.variation] = true;
    }

    // social
    if(!props.icon && _.contains(["facebook","twitter","google plus","linkedin","instagram","youtube"],props.variation)) {
      props.icon = props.variation;
    }

    // loading state should not adopt disabled style
    if(props.loading) { classSet.disabled = false; }



    if(props.link) {
      props.href = props.link;
      delete props.link;
    }

    var children = getChildren(this);

    // Icons
    if(props.icon) {
      classSet.icon = !children.length || props.iconBox;
      var iconClass = props.icon+" icon";
      if(props.iconRight) { iconClass = "right " + iconClass; }
      if(props.iconBox) {
        if(props.iconRight) {
          classSet.right = true;
        }
        classSet.labeled = true;
      }
      var icon = <i className={iconClass}/>;
      if(props.iconRight) {
        children.push(icon);
      }
      else {
        children.unshift(icon);
      }
      // icon is an html5 attribute so we must remove it to prevent it from going to the DOM node
      delete props.icon;
    }

    var component = props.href && "a" || "button";
    props.children = children;
    props = pickHtmlProps(mergeProps(props,{classSet:classSet}));


    return (React.createElement(component,props));
  }
});

Button.Button = Button;

module.exports = Button;
