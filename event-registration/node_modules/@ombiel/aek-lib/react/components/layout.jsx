var React = require("react");
var utils = require("../../utils");
var mergeProps = require("../utils/merge-props.jsx");
var pickHtmlProps = require("../utils/pick-html-props");
var _ = utils;
var Panel = require("./panel");
var ReactDOM = require("react-dom");

var flexWarning = function() {
  console.warn("AEK `flex` property has been deprecated, please use `data-flex` instead. Usage is the same only the name has changed for compatibility"); // eslint-disable-line no-console
};

flexWarning = _.once(flexWarning);


var layoutElements = [];

function updateLayout() {
  _.each(layoutElements,function(element) {
    element.updateLayout();
  });
}

var debounceLayout = _.debounce(updateLayout,0);

function addLayoutElement(element) {
  layoutElements.push(element);
  debounceLayout();
}

function removeLayoutElement(element) {
  _.remove(layoutElements,function(el) {
    return element === el;
  });
  debounceLayout();
}

window.addEventListener("resize",updateLayout);

function getFlex(child) {
  var {flex,size} = child.props;
  if (flex != null) { flexWarning(); }
  if (flex == null) { flex = child.props["data-flex"]; }
  if (flex == null && size == null) { flex = 1; }

  if(flex === 0 && !child.key) {
    console.warn("layout children with flex==0 must have a defined key"); // eslint-disable-line no-console
    flex = 1;
  }

  return flex;
}

var Layout = React.createClass({

  getInitialState:function() {
     return {measured:{}};
  },

  getDefaultProps:function() {
    return {component:Panel};
  },

  componentWillMount:function() {
    addLayoutElement(this);
    this.updateLayout();
  },

  componentWillUnmount:function() {
    removeLayoutElement(this);
  },

  getWidth:function() {
    return this.getDimension("width");
  },
  getHeight:function() {
    return this.getDimension("height");
  },

  getDimension:function(dimension) {
    var v = parseInt(this.props[dimension]);
    if(_.isNaN(v)) {
      v = parseInt(this.state[dimension]);
    }
    if(_.isNaN(v)) {
      return null;
    }
    else {
      return v;
    }
  },

  updateLayout:function(retry) {

    var state = {
      lastMeasured:this.state.measured || {},
      measured:{}
    };

    if(this.isMounted()){
      var el;
      try {
        el = ReactDOM.findDOMNode(this);
      }
      catch(e) {} // eslint-disable-line no-empty

      if(el) {
        if(this.props.width == null) {
          state.width = el.clientWidth;
        }
        if(this.props.height == null) {
          state.height = el.clientHeight;
        }
      }
    }
    try{
      this.setState(state);
    }
    catch(e) {} // eslint-disable-line no-empty


    // sometimes container isn't quite ready to measure - if height is zero, try again after a short delay
    if(state.height === 0 && !retry) {
      setTimeout(function() {
        this.updateLayout(true);
      }.bind(this),100);
    }

  },

  findChildNode(key) {

    if (!this.childNodes) {
      this.childNodes = {};
    }

    if (this.childNodes[key]) {
      return this.childNodes[key];
    }

    var el = this.el;

    if(!this.el) {
      try {
        el = this.el = ReactDOM.findDOMNode(this);
      }
      catch(e) {} // eslint-disable-line no-empty
    }

    return this.childNodes[key] = _.find(el.children,(el)=>{
      return el.getAttribute("data-cm-layout-key") === key;
    });

  },

  measure:function() {
    var measured;

    React.Children.forEach(this.props.children,(child)=>{

      if(!child) { return; }

      var flex = getFlex(child);

      if((!child.props.size && child.props.size !== 0) && flex === 0) {

        var childMeasured;

        var domNode = this.findChildNode(child.key);

        // measurement can fail in Firefox if modal iframe is display:none - https://bugzilla.mozilla.org/show_bug.cgi?id=548397
        // in these scenarios, the measurement is very unlikely to have changed so we can just allow it to fail
        try {
          if(this.props.dimension === "height") {
            childMeasured = utils.outerHeight(domNode);
          }
          else {
            childMeasured = utils.outerWidth(domNode);
          }

          if(childMeasured !== this.state.measured[child.key]) {
            measured = measured || {};
            measured[child.key] = childMeasured;
          }
        }
        catch(e) {} //eslint-disable-line no-empty


        // if measurement is zero, this is probably because the is a layout
        // component and/or only has absolute positioned elements
        // so lets iterate over its children to get a measurement
        // if(measured[child.key]==0) {

        //   var max = 0
        //   _.each(domNode.children,function(subNode) {

        //     var val = parseFloat(window.getComputedStyle(subNode)[this.props.dimension]);
        //     if(val && val>max) {
        //       max = val
        //     }
        //   }.bind(this))
        //   measured[child.key] = max
        // }

      }
    }.bind(this));
    if(measured) {
      measured = _.extend({},this.state.measured,measured);
      this.setState({measured:measured});
    }
  },

  // updateStateFromProps:function(nextProps) {
  //   var state = {}

  //   _.each(["height","width","top","left"],function(key) {
  //     if(nextProps[key] != null) {
  //       state[key] = nextProps[key]
  //     }
  //   }.bind(this))

  //   this.setState(state)
  // },

  // componentWillReceiveProps:function(nextProps) {

  //   this.updateStateFromProps(nextProps)

  // },

  render:function() {

    var dimension = this.props.dimension || "height";
    // var posDimension = dimension==="width" && "left" || "top";
    var width = this.getWidth();
    var height = this.getHeight();
    var top = this.props.top;
    var left = this.props.left;
    var size = this.getDimension(dimension) || 0;
    var children = [];
    var remainingSize = size;
    var totalFlexUnits = 0;

    React.Children.forEach(this.props.children,function(child) {

      if(!child) { return; }

      var flex = getFlex(child);

      if(child.props.size) {
        remainingSize -= parseFloat(child.props.size);
      }
      else if(flex) {
        totalFlexUnits += parseFloat(flex);
      }
      else {
        var sze = child.key && (this.state.measured != null ? this.state.measured[child.key] : (this.state.lastMeasured[child.key] || 0));
        remainingSize -= sze;
      }
    }.bind(this));

    var flexUnitSize = remainingSize / totalFlexUnits;
    var pos = 0;

    React.Children.forEach(this.props.children,function(child,index) {

      if(!child) { return; }

      var additionalProps = {};
      var sze;
      var flex = getFlex(child);


      additionalProps.key = child.key || ("_child" + index);


      if(child.props.size) {
        sze = child.props.size;
      }
      else if(flex) {
        sze = parseFloat(flex) * flexUnitSize;
      }
      else {
        if(child.key) {
          additionalProps["data-cm-layout-key"] = child.key;
          sze = this.state.measured[child.key] || 0;
        }
      }

      var l,t,w,h;

      if(dimension === "height") {
        if(child.props.size || flex) {
          h = sze;
        }
        t = pos;
      }
      else {
        if(child.props.size || flex) {
          w = sze;
        }
        l = pos;
      }
      pos += (parseFloat(sze) || 0);


      if(_.isString(child.type)) {

        var styl = {};

        if(dimension === "height") {
          styl.width = "100%";
        }
        else {
          styl.height = "100%";
        }

        l = l || 0;
        t = t || 0;
        styl.left = l + "px";
        styl.top = t + "px";
        styl.position = "absolute";


        if(_.isNumber(h)) {
          styl.height = h + "px";
        }

        if(_.isNumber(w)) {
          styl.width = w + "px";
        }

        styl = _.extend(styl,child.props.style);
        additionalProps.style = styl;
      }
      else{
        _.extend(additionalProps,{left:l,top:t,width:w,height:h});
      }

      let props = mergeProps(child.props,additionalProps);

      let newChild = React.cloneElement(child,props);

      children.push(newChild);

    }.bind(this));

    var style = {overflow:"hidden"};

    if(_.isNumber(left) || _.isNumber(top)) {
      style = {
        position:"absolute",
        left:"0px",
        top:"0px",
        height:"100%",
        width:"100%"
      };

      if(_.isNumber(left)) {
        style.left = left + "px";
      }

      if(_.isNumber(top)) {
        style.top = top + "px";
      }

      if(_.isNumber(height)) {
        style.height = height + "px";
      }
      else if(dimension === "height") {
        style.height = pos + "px";
      }

      if(_.isNumber(width)) {
        style.width = width + "px";
      }
      else if(dimension === "width") {
        style.width = pos + "px";
      }

    }

    if(this.props.style) {
      _.extend(style,this.props.style);
    }

    this.renderedChildren = children;

    var componentProps = mergeProps({className:this.props.className},this.props.componentProps,{style:style});

    if (_.isString(this.props.component)) {
      componentProps = pickHtmlProps(componentProps);
    }

    return (
      React.createElement(this.props.component,componentProps,children)
    );
  },

  componentDidMount:function() {
    this.measure();
  },

  componentDidUpdate:function() {
    this.measure();
  }

});

var VBox = React.createClass({
  render:function() {
    var props = mergeProps({className:"vbox"},this.props);
    return <Layout dimension="height" {...props}>{this.props.children}</Layout>;
  }
});

var HBox = React.createClass({
  render:function() {
    var props = mergeProps({className:"hbox"},this.props);
    return <Layout dimension="width" {...props}>{this.props.children}</Layout>;
  }
});

var CBox = React.createClass({
  render:function() {

    var component = this.props.component || Panel;
    var innerComponent = this.props.innerComponent || "div";
    var innerProps = this.props.innerProps || {};

    var outerStyle = _.extend({
      height:this.props.height,
      width:this.props.width,
      top:this.props.top,
      left:this.props.left,
      display:"table",
      position:"absolute"
    },this.props.style);

    var outerProps = mergeProps({className:"cbox"},this.props,{style:outerStyle});

    var innerStyle = _.extend({
      display:"table-cell",
      textAlign:"center",
      verticalAlign:"middle"
    },innerProps.style);

    innerProps = mergeProps({className:"cbox-inner"},this.innerProps,{style:innerStyle});

    if (_.isString(innerComponent)) {
      innerProps = pickHtmlProps(innerProps);
    }

    var inner = React.createElement(innerComponent,innerProps,this.props.children);

    if (_.isString(component)) {
      outerProps = pickHtmlProps(outerProps);
    }

    return React.createElement(component, outerProps, inner);
  }
});

module.exports = {VBox,HBox,CBox,Panel,updateLayout};
