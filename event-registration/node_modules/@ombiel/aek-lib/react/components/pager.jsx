var React = require("react");
var HorizontalSlideTransition = require("../transitions/horizontal-slide");
var mergeProps = require("../utils/merge-props");
var Panel = require("./panel");
var _ = require("../../utils");

var Pager = React.createClass({

  getInitialState:function() {
    return {oldPages:[]};
  },

  getDefaultProps:function() {
    return {
      component:Panel
    };
  },

  detachPage:function(key) {
    setTimeout(function() {
      this.setState({
        oldPages:_.reject(this.state.oldPages,(page)=>page.key===key)
      });
    }.bind(this),1);
  },

  componentWillMount: function () {
    this.checkProps(this.props);
  },

  checkProps:function(props) {
    var child = props.children,
        currentPage = this.state.currentPage,
        childKey = child && child.key,
        currentKey = currentPage && currentPage.key,
        pager = this,
        newState = {},
        oldPages = this.state.oldPages;


    if(childKey !== currentKey) {
      if(currentPage) {
        var currentPageTransition = React.cloneElement(currentPage.transition,{
          transitionMode:"out",
          transitionDirection:props.transitionDirection,
          key:currentPage.key
        });
        currentPage.transition = currentPageTransition;
        oldPages = oldPages.concat([currentPage]);
        newState.currentPage = null;
      }
      if(childKey) {
        // make sure new child isn't still transitioning out
        var newChild = _.findWhere(this.state.oldPages,{key:childKey});
        if(newChild) {
          oldPages = _.reject(oldPages,(page)=>page.key===childKey);
        }
        else {
          newChild = {
            key:childKey,
            transition:<HorizontalSlideTransition>{child}</HorizontalSlideTransition>
          };
        }

        newChild.transition = React.cloneElement(newChild.transition,{
          transitionMode:currentKey && "in" || null,
          key:childKey,
          transitionDirection:props.transitionDirection,
          onComplete:currentKey && function() {
            pager.detachPage(currentKey);
          },
          children:child
        });

        newState.currentPage = newChild;

      }

      newState.oldPages = oldPages;

      this.setState(newState);

    }
    // need to clone currentPage to ensure that any changed props are propogated
    else if(currentPage) {
      currentPage.transition = React.cloneElement(currentPage.transition,{
        key:currentPage.key,
        children:props.children
      });
    }
  },

  componentWillReceiveProps:function(props) {
    
    this.checkProps(props);
    
  },

  render:function() {
    var content = this.state.oldPages.map(function(page) {
      return page.transition;
    });
    if(this.state.currentPage) {
      content.push(this.state.currentPage.transition);
    }

    var props = mergeProps({"className":"pager",style:{overflow:"hidden"}},this.props);

    return React.createElement(this.props.component,props,content);
  }

});

module.exports = Pager;


