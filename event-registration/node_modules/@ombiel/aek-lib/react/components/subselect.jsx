
var React = require("react");
var utils = require("../../utils");
var _ = utils;
var mergeProps = require("../utils/merge-props");
var router = require("../../router");
var {VBox} = require("./layout");
var {BannerHeader} = require("./header");
var {Padding} = require("./segment");
var Listview = require("./listview");
var Input = require("./input");
var SelectInput = require("./select-input");
var Page = require("./page");

var ieVersion = new Function("/*@cc_on return @_jscript_version; @*/")();

var Subselect = React.createClass({

  onClick:function() {
    if(!this.props.disabled) {
      var ctx = this.props.ctx || router.currentContext;
      if(ctx) {
        ctx.modifyQuery({formField:this.props.name});
      }
    }
  },

  onKeyDown:function(e) {
    if(_.contains([39,40,38,32,13],e.keyCode)) {
      e.preventDefault();
      this.onClick();
    }
  },

  render: function() {

    if(ieVersion === 9) {
      return <SelectInput {...this.props}/>;
    }

    var val = this.props.value;
    if(val != null) {
      var selectedOption = _.findWhere(this.props.options,{value:val});
      if(selectedOption) { val = selectedOption.label; }
    }

    var props = mergeProps(this.props,{
      type:"text",
      readOnly:true,
      onClick:this.onClick,
      onKeyDown:this.onKeyDown,
      className:"selector",
      tabindex:"0",
      value:val
    });

    if(props.icon === undefined) {
      props.icon = "angle right";
    }

    return (
      <Input {...props} />
    );


  }
});

Subselect.Handler = React.createClass({

  onClick:function(option,e) {
    e.preventDefault();
    var field = this.props.field;
    if(field && field.onChange) {
      field.onChange(e,field.name,option.value);
    }

    if(field && field.onSelect) {
      field.onSelect(field,option);
    }
    else if(this.props.field){
      var ctx = this.props.ctx || router.currentContext;
      if(ctx) {
        ctx.modifyQuery({formField:null},"back");
      }
      setTimeout(()=>{
        if(this.props.form && this.props.form.focus) {
          this.props.form.focus(field.name);
        }
      },20);
    }

  },

  render:function() {
    var field = this.props.field;
    var options = field.options;

    var items = options.map(function(option) {
      var item;
      if(_.isString(option)) {
        item = {text:option,value:option};
      }
      else {
        item = {
          text:option.label,
          value:option.value
        };
      }

      if(option.value === field.value) {
        item.active = true;
        item.iconRight = "checkmark";
      }

      return item;
    });

    return (
      <VBox>
        <BannerHeader key="label" level={4} flex={0} className="raised subselect">{field.label}</BannerHeader>
        <Page flex="1">
          <Padding>
            <Listview flush className="subselect" items={items} onClick={this.onClick}/>
          </Padding>
        </Page>
      </VBox>
    );
  }
});

Subselect.defaultPlaceholder = "-- Please Select --";

module.exports = Subselect;
