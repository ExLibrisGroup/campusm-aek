var React = require("react"),
    ReactDOM = require("react-dom"),
    cloneWithProps = require("../utils/clone"),
    vendorStyle = require("../../vendor-style"),
    vendorPrefix = vendorStyle.prefix,
    createTween = require("../../tween/create"),
    easing = require("../../tween/easing"),
    stylesheet = require("../../stylesheet"),
    _ = require("../../utils");


var HorizontalSlideTransition = React.createClass({

  componentWillMount:function() {
    if(this.props.transitionMode=="in") {
      this.translate = {
        xPerc:this.props.transitionDirection=="back" && -100 || 100
      }
    }
    else {
      this.translate = {xPerc:0}
    }

    var transformProperty = vendorPrefix("transform")

    if(vendorStyle.hasProperty("perspective")) {
      this.updateTween = function() {
        if (this.domNode) {
          this.domNode.style[transformProperty] = "translate3D("+this.translate.xPerc+"%,0,0)"
        }
      }.bind(this)
    }
    else {
      this.updateTween = function() {
        window.domNode = this.domNode
        this.domNode.style[transformProperty] = "translateX("+this.translate.xPerc+"%)"
      }.bind(this)
    }
  },

  componentDidMount: function () {
    this.domNode = ReactDOM.findDOMNode(this);
    this.startTransition(this.props)
  },

  getDefaultProps:function() {
    return {
      duration:400,
      easing:easing.Quadratic.InOut
    }
  },

  startTransition:function(props) {

    var mode = props.transitionMode,
        dir = props.transitionDirection;

    var tween = createTween(this.translate);

    if(mode && dir) {

        tween.to({
          xPerc:(mode=="out" && (dir=="forward" && -50 || 50) || 0)
        },props.duration)

      _.each(["easing","delay","onUpdate","onComplete","onStop"],function(prop) {
        if(props[prop]) {
          tween[prop](props[prop])
        }
      })

      // need to do this here as well as in render as this is executed before
      // added to prevent flicker due to enabling/disabling webkitOverflowScroll
      if(mode=="out") {
        this.domNode.className += " aek-transition-out";
      }

      tween.onUpdate(this.updateTween);

      // set whole page into animation mode
      // this disables webkitOverflowScrolling which causes flickering in iOS
      if(mode!="out") {
        document.body.setAttribute("data-aek-is-animating","true")
        tween.once("stop complete",function() {
          // re-applying webkitOverflowScrolling
          document.body.setAttribute("data-aek-is-animating","false");
        })
      }

      this.updateTween();
      tween.start()



    }

    this.updateTween()

  },

  checkState:function(props) {
    if((props.transitionMode != this.props.transitionMode) || (props.transitionDirection != this.props.transitionDirection)) {
      this.startTransition(props)
    }
  },

  componentWillReceiveProps:function(props) {
    this.checkState(props)
  },

  render:function() {
    var newProps = {}
    if(this.props.transitionMode=="out") {
      newProps.className="aek-transition-out"
    }
    // clone children to ensure forceUpdates are honoured
    return cloneWithProps(this.props.children,newProps)
  },

  componentDidUpdate:function() {
    window.requestAnimationFrame(this.updateTween)
  }
})

module.exports = HorizontalSlideTransition
