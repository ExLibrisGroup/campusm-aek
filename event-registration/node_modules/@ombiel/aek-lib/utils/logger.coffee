consoleMethods = 'assert,clear,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,markTimeline,profile,profiles,profileEnd,show,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn'.split(",")
loggerMethods = 'stack,batch,enable,disable'.split(",")


soloLogger = null

isEnabled = (logger)->
  logger.enabled && (!soloLogger || soloLogger==logger.loggerName )


if __aekENV__=="dev" && (typeof(window.console?.log) == "function")
  
  consoleMethods.forEach (methodName)->
    console[methodName] ?= console.log

  loggers = {}

  hslFromLabel = (str)->
    sum = Array.prototype.reduce.call str,((prev,curr)->prev+curr.charCodeAt(0)),0
    mult = Array.prototype.reduce.call str,((prev,curr)->prev*curr.charCodeAt(0)),1
    hue = Math.pow(mult,4) % 360
    sat = 50 + mult % 50
    light = 20 + sum % 30
    return """hsl(#{hue},#{sat}%,#{light}%)"""

  isFirefox = "mozApps" of navigator

  module.exports = (name,arg...)->

    if "solo" in arg
      soloLogger = name
    else if soloLogger==name
      soloLogger = null

    if loggers[name]
      logger = loggers[name]
      logger.warn """Logger name '#{name}' already taken""" 
      return logger

    logger = (args...)->logger.log(args...)

    logger.loggerName = name

    color = null
    logger.enabled = false
    opts = {}

    arg.forEach (a)->
      if a=="solo"
        logger.enabled = true
      else if typeof(a)=="boolean"
        logger.enabled = a
      else if typeof(a)=="string"
        color = a
      else
        opts = a

    if opts.enabled?
      logger.enabled = opts.enabled


    color ?= opts.color
    
    labelStyle = """background-color:#{color ? hslFromLabel(name.split(":")[0])};color:white;padding:0 3px;border-radius:2px;#{opts.labelStyle}"""
      
    loggers[name] = logger
    
    styledMethods = ["log","info","warn","error"]

    unless isFirefox
      styledMethods = styledMethods.concat(["group","groupCollapsed"])

    for i in styledMethods
      do(i)->
        logger[i] = (args...)=>
          console[i]("%c"+name+"%c",labelStyle,'color:inherit;',args...)


    for i of console
      do(i)->
        if typeof(console[i])=="function"
          target = logger[i] && logger[i].bind(logger) || console[i].bind(console)
          logger[i] = (args...)=>
            if isEnabled(logger)
              return target(args...)

    logger.stack = (obj,args...)->
      if isEnabled(logger)
        if isFirefox # Mozilla/Firefox
          console.log("%c"+name,labelStyle+";display:block;");
          console.groupCollapsed(obj)
          console.trace(args...)
        else
          logger.groupCollapsed(obj)
          console.trace(args...)
        console.groupEnd()

    logger.batch = (obj,cb)->
      if isEnabled(logger)
        if isFirefox
          console.log("%c"+name,labelStyle+";display:block;");
        logger.groupCollapsed(obj)
        cb()
        logger.groupEnd()

    return logger


  for i in ["log","info","warn","error","trace","group","stack","groupCollapsed","batch"]
    do(i)->
      module.exports[i] = (name,args...)->
        logger = loggers[name] ? module.exports(name,true)
        return logger[i](args...)

  module.exports.enable = (name)->
    loggers[name]?.enabled = true

  module.exports.disable = (name)->
    loggers[name]?.enabled = false


else

  # production mode

  doNothing = ->

  logger = ()->
    return logger

  for i in consoleMethods.concat(loggerMethods)
    logger[i] = doNothing
  
  module.exports = logger
