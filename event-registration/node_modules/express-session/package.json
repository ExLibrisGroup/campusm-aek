{
  "_args": [
    [
      {
        "raw": "express-session@^1.9.1",
        "scope": null,
        "escapedName": "express-session",
        "name": "express-session",
        "rawSpec": "^1.9.1",
        "spec": ">=1.9.1 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\paytonp\\Projects\\NA campusM Tiles\\ibeacon-triggered-survey\\node_modules\\@ombiel\\aek-cli"
    ]
  ],
  "_from": "express-session@>=1.9.1 <2.0.0",
  "_id": "express-session@1.15.6",
  "_inCache": true,
  "_location": "/express-session",
  "_nodeVersion": "6.11.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/express-session-1.15.6.tgz_1506453181688_0.8409461784176528"
  },
  "_npmUser": {
    "name": "dougwilson",
    "email": "doug@somethingdoug.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "express-session@^1.9.1",
    "scope": null,
    "escapedName": "express-session",
    "name": "express-session",
    "rawSpec": "^1.9.1",
    "spec": ">=1.9.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@ombiel/aek-cli"
  ],
  "_resolved": "https://registry.npmjs.org/express-session/-/express-session-1.15.6.tgz",
  "_shasum": "47b4160c88f42ab70fe8a508e31cbff76757ab0a",
  "_shrinkwrap": null,
  "_spec": "express-session@^1.9.1",
  "_where": "C:\\Users\\paytonp\\Projects\\NA campusM Tiles\\ibeacon-triggered-survey\\node_modules\\@ombiel\\aek-cli",
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca",
    "url": "http://tjholowaychuk.com"
  },
  "bugs": {
    "url": "https://github.com/expressjs/session/issues"
  },
  "contributors": [
    {
      "name": "Douglas Christopher Wilson",
      "email": "doug@somethingdoug.com"
    },
    {
      "name": "Joe Wagner",
      "email": "njwjs722@gmail.com"
    }
  ],
  "dependencies": {
    "cookie": "0.3.1",
    "cookie-signature": "1.0.6",
    "crc": "3.4.4",
    "debug": "2.6.9",
    "depd": "~1.1.1",
    "on-headers": "~1.0.1",
    "parseurl": "~1.3.2",
    "uid-safe": "~2.1.5",
    "utils-merge": "1.0.1"
  },
  "description": "Simple session middleware for Express",
  "devDependencies": {
    "after": "0.8.2",
    "cookie-parser": "1.4.3",
    "eslint": "3.19.0",
    "eslint-plugin-markdown": "1.0.0-beta.6",
    "express": "4.15.5",
    "istanbul": "0.4.5",
    "mocha": "2.5.3",
    "supertest": "1.1.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-r0nrHTCYtAMrFwZ0kBzZEXa1vtPVrw0dKvGSrKP4dahwBQ1BJpF2/y1Pp4sCD/0kvxV4zZeclyvfmw0B4RMJQA==",
    "shasum": "47b4160c88f42ab70fe8a508e31cbff76757ab0a",
    "tarball": "https://registry.npmjs.org/express-session/-/express-session-1.15.6.tgz"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "files": [
    "session/",
    "HISTORY.md",
    "LICENSE",
    "index.js"
  ],
  "gitHead": "89fd7156129210f2b0c350afcbdf226665a8328c",
  "homepage": "https://github.com/expressjs/session#readme",
  "license": "MIT",
  "maintainers": [
    {
      "name": "defunctzombie",
      "email": "shtylman@gmail.com"
    },
    {
      "name": "dougwilson",
      "email": "doug@somethingdoug.com"
    },
    {
      "name": "mscdex",
      "email": "mscdex@mscdex.net"
    }
  ],
  "name": "express-session",
  "optionalDependencies": {},
  "readme": "# express-session\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\n## Installation\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```sh\n$ npm install express-session\n```\n\n## API\n\n```js\nvar session = require('express-session')\n```\n\n### session(options)\n\nCreate a session middleware with the given `options`.\n\n**Note** Session data is _not_ saved in the cookie itself, just the session ID.\nSession data is stored server-side.\n\n**Note** Since version 1.5.0, the [`cookie-parser` middleware](https://www.npmjs.com/package/cookie-parser)\nno longer needs to be used for this module to work. This module now directly reads\nand writes cookies on `req`/`res`. Using `cookie-parser` may result in issues\nif the `secret` is not the same between this module and `cookie-parser`.\n\n**Warning** The default server-side session storage, `MemoryStore`, is _purposely_\nnot designed for a production environment. It will leak memory under most\nconditions, does not scale past a single process, and is meant for debugging and\ndeveloping.\n\nFor a list of stores, see [compatible session stores](#compatible-session-stores).\n\n#### Options\n\n`express-session` accepts these properties in the options object.\n\n##### cookie\n\nSettings object for the session ID cookie. The default value is\n`{ path: '/', httpOnly: true, secure: false, maxAge: null }`.\n\nThe following are options that can be set in this object.\n\n##### cookie.domain\n\nSpecifies the value for the `Domain` `Set-Cookie` attribute. By default, no domain\nis set, and most clients will consider the cookie to apply to only the current\ndomain.\n\n##### cookie.expires\n\nSpecifies the `Date` object to be the value for the `Expires` `Set-Cookie` attribute.\nBy default, no expiration is set, and most clients will consider this a\n\"non-persistent cookie\" and will delete it on a condition like exiting a web browser\napplication.\n\n**Note** If both `expires` and `maxAge` are set in the options, then the last one\ndefined in the object is what is used.\n\n**Note** The `expires` option should not be set directly; instead only use the `maxAge`\noption.\n\n##### cookie.httpOnly\n\nSpecifies the `boolean` value for the `HttpOnly` `Set-Cookie` attribute. When truthy,\nthe `HttpOnly` attribute is set, otherwise it is not. By default, the `HttpOnly`\nattribute is set.\n\n**Note** be careful when setting this to `true`, as compliant clients will not allow\nclient-side JavaScript to see the cookie in `document.cookie`.\n\n##### cookie.maxAge\n\nSpecifies the `number` (in milliseconds) to use when calculating the `Expires`\n`Set-Cookie` attribute. This is done by taking the current server time and adding\n`maxAge` milliseconds to the value to calculate an `Expires` datetime. By default,\nno maximum age is set.\n\n**Note** If both `expires` and `maxAge` are set in the options, then the last one\ndefined in the object is what is used.\n\n##### cookie.path\n\nSpecifies the value for the `Path` `Set-Cookie`. By default, this is set to `'/'`, which\nis the root path of the domain.\n\n##### cookie.sameSite\n\nSpecifies the `boolean` or `string` to be the value for the `SameSite` `Set-Cookie` attribute.\n\n  - `true` will set the `SameSite` attribute to `Strict` for strict same site enforcement.\n  - `false` will not set the `SameSite` attribute.\n  - `'lax'` will set the `SameSite` attribute to `Lax` for lax same site enforcement.\n  - `'strict'` will set the `SameSite` attribute to `Strict` for strict same site enforcement.\n\nMore information about the different enforcement levels can be found in the specification\nhttps://tools.ietf.org/html/draft-west-first-party-cookies-07#section-4.1.1\n\n**Note** This is an attribute that has not yet been fully standardized, and may change in\nthe future. This also means many clients may ignore this attribute until they understand it.\n\n##### cookie.secure\n\nSpecifies the `boolean` value for the `Secure` `Set-Cookie` attribute. When truthy,\nthe `Secure` attribute is set, otherwise it is not. By default, the `Secure`\nattribute is not set.\n\n**Note** be careful when setting this to `true`, as compliant clients will not send\nthe cookie back to the server in the future if the browser does not have an HTTPS\nconnection.\n\nPlease note that `secure: true` is a **recommended** option. However, it requires\nan https-enabled website, i.e., HTTPS is necessary for secure cookies. If `secure`\nis set, and you access your site over HTTP, the cookie will not be set. If you\nhave your node.js behind a proxy and are using `secure: true`, you need to set\n\"trust proxy\" in express:\n\n```js\nvar app = express()\napp.set('trust proxy', 1) // trust first proxy\napp.use(session({\n  secret: 'keyboard cat',\n  resave: false,\n  saveUninitialized: true,\n  cookie: { secure: true }\n}))\n```\n\nFor using secure cookies in production, but allowing for testing in development,\nthe following is an example of enabling this setup based on `NODE_ENV` in express:\n\n```js\nvar app = express()\nvar sess = {\n  secret: 'keyboard cat',\n  cookie: {}\n}\n\nif (app.get('env') === 'production') {\n  app.set('trust proxy', 1) // trust first proxy\n  sess.cookie.secure = true // serve secure cookies\n}\n\napp.use(session(sess))\n```\n\nThe `cookie.secure` option can also be set to the special value `'auto'` to have\nthis setting automatically match the determined security of the connection. Be\ncareful when using this setting if the site is available both as HTTP and HTTPS,\nas once the cookie is set on HTTPS, it will no longer be visible over HTTP. This\nis useful when the Express `\"trust proxy\"` setting is properly setup to simplify\ndevelopment vs production configuration.\n\n##### genid\n\nFunction to call to generate a new session ID. Provide a function that returns\na string that will be used as a session ID. The function is given `req` as the\nfirst argument if you want to use some value attached to `req` when generating\nthe ID.\n\nThe default value is a function which uses the `uid-safe` library to generate IDs.\n\n**NOTE** be careful to generate unique IDs so your sessions do not conflict.\n\n```js\napp.use(session({\n  genid: function(req) {\n    return genuuid() // use UUIDs for session IDs\n  },\n  secret: 'keyboard cat'\n}))\n```\n\n##### name\n\nThe name of the session ID cookie to set in the response (and read from in the\nrequest).\n\nThe default value is `'connect.sid'`.\n\n**Note** if you have multiple apps running on the same hostname (this is just\nthe name, i.e. `localhost` or `127.0.0.1`; different schemes and ports do not\nname a different hostname), then you need to separate the session cookies from\neach other. The simplest method is to simply set different `name`s per app.\n\n##### proxy\n\nTrust the reverse proxy when setting secure cookies (via the \"X-Forwarded-Proto\"\nheader).\n\nThe default value is `undefined`.\n\n  - `true` The \"X-Forwarded-Proto\" header will be used.\n  - `false` All headers are ignored and the connection is considered secure only\n    if there is a direct TLS/SSL connection.\n  - `undefined` Uses the \"trust proxy\" setting from express\n\n##### resave\n\nForces the session to be saved back to the session store, even if the session\nwas never modified during the request. Depending on your store this may be\nnecessary, but it can also create race conditions where a client makes two\nparallel requests to your server and changes made to the session in one\nrequest may get overwritten when the other request ends, even if it made no\nchanges (this behavior also depends on what store you're using).\n\nThe default value is `true`, but using the default has been deprecated,\nas the default will change in the future. Please research into this setting\nand choose what is appropriate to your use-case. Typically, you'll want\n`false`.\n\nHow do I know if this is necessary for my store? The best way to know is to\ncheck with your store if it implements the `touch` method. If it does, then\nyou can safely set `resave: false`. If it does not implement the `touch`\nmethod and your store sets an expiration date on stored sessions, then you\nlikely need `resave: true`.\n\n##### rolling\n\nForce a session identifier cookie to be set on every response. The expiration\nis reset to the original [`maxAge`](#cookiemaxage), resetting the expiration\ncountdown.\n\nThe default value is `false`.\n\n**Note** When this option is set to `true` but the `saveUninitialized` option is\nset to `false`, the cookie will not be set on a response with an uninitialized\nsession.\n\n##### saveUninitialized\n\nForces a session that is \"uninitialized\" to be saved to the store. A session is\nuninitialized when it is new but not modified. Choosing `false` is useful for\nimplementing login sessions, reducing server storage usage, or complying with\nlaws that require permission before setting a cookie. Choosing `false` will also\nhelp with race conditions where a client makes multiple parallel requests\nwithout a session.\n\nThe default value is `true`, but using the default has been deprecated, as the\ndefault will change in the future. Please research into this setting and\nchoose what is appropriate to your use-case.\n\n**Note** if you are using Session in conjunction with PassportJS, Passport\nwill add an empty Passport object to the session for use after a user is\nauthenticated, which will be treated as a modification to the session, causing\nit to be saved. *This has been fixed in PassportJS 0.3.0*\n\n##### secret\n\n**Required option**\n\nThis is the secret used to sign the session ID cookie. This can be either a string\nfor a single secret, or an array of multiple secrets. If an array of secrets is\nprovided, only the first element will be used to sign the session ID cookie, while\nall the elements will be considered when verifying the signature in requests.\n\n##### store\n\nThe session store instance, defaults to a new `MemoryStore` instance.\n\n##### unset\n\nControl the result of unsetting `req.session` (through `delete`, setting to `null`,\netc.).\n\nThe default value is `'keep'`.\n\n  - `'destroy'` The session will be destroyed (deleted) when the response ends.\n  - `'keep'` The session in the store will be kept, but modifications made during\n    the request are ignored and not saved.\n\n### req.session\n\nTo store or access session data, simply use the request property `req.session`,\nwhich is (generally) serialized as JSON by the store, so nested objects\nare typically fine. For example below is a user-specific view counter:\n\n```js\n// Use the session middleware\napp.use(session({ secret: 'keyboard cat', cookie: { maxAge: 60000 }}))\n\n// Access the session as req.session\napp.get('/', function(req, res, next) {\n  if (req.session.views) {\n    req.session.views++\n    res.setHeader('Content-Type', 'text/html')\n    res.write('<p>views: ' + req.session.views + '</p>')\n    res.write('<p>expires in: ' + (req.session.cookie.maxAge / 1000) + 's</p>')\n    res.end()\n  } else {\n    req.session.views = 1\n    res.end('welcome to the session demo. refresh!')\n  }\n})\n```\n\n#### Session.regenerate(callback)\n\nTo regenerate the session simply invoke the method. Once complete,\na new SID and `Session` instance will be initialized at `req.session`\nand the `callback` will be invoked.\n\n```js\nreq.session.regenerate(function(err) {\n  // will have a new session here\n})\n```\n\n#### Session.destroy(callback)\n\nDestroys the session and will unset the `req.session` property.\nOnce complete, the `callback` will be invoked.\n\n```js\nreq.session.destroy(function(err) {\n  // cannot access session here\n})\n```\n\n#### Session.reload(callback)\n\nReloads the session data from the store and re-populates the\n`req.session` object. Once complete, the `callback` will be invoked.\n\n```js\nreq.session.reload(function(err) {\n  // session updated\n})\n```\n\n#### Session.save(callback)\n\nSave the session back to the store, replacing the contents on the store with the\ncontents in memory (though a store may do something else--consult the store's\ndocumentation for exact behavior).\n\nThis method is automatically called at the end of the HTTP response if the\nsession data has been altered (though this behavior can be altered with various\noptions in the middleware constructor). Because of this, typically this method\ndoes not need to be called.\n\nThere are some cases where it is useful to call this method, for example,\nredirects, long-lived requests or in WebSockets.\n\n```js\nreq.session.save(function(err) {\n  // session saved\n})\n```\n\n#### Session.touch()\n\nUpdates the `.maxAge` property. Typically this is\nnot necessary to call, as the session middleware does this for you.\n\n### req.session.id\n\nEach session has a unique ID associated with it. This property is an\nalias of [`req.sessionID`](#reqsessionid-1) and cannot be modified.\nIt has been added to make the session ID accessible from the `session`\nobject.\n\n### req.session.cookie\n\nEach session has a unique cookie object accompany it. This allows\nyou to alter the session cookie per visitor. For example we can\nset `req.session.cookie.expires` to `false` to enable the cookie\nto remain for only the duration of the user-agent.\n\n#### Cookie.maxAge\n\nAlternatively `req.session.cookie.maxAge` will return the time\nremaining in milliseconds, which we may also re-assign a new value\nto adjust the `.expires` property appropriately. The following\nare essentially equivalent\n\n```js\nvar hour = 3600000\nreq.session.cookie.expires = new Date(Date.now() + hour)\nreq.session.cookie.maxAge = hour\n```\n\nFor example when `maxAge` is set to `60000` (one minute), and 30 seconds\nhas elapsed it will return `30000` until the current request has completed,\nat which time `req.session.touch()` is called to reset `req.session.maxAge`\nto its original value.\n\n```js\nreq.session.cookie.maxAge // => 30000\n```\n\n### req.sessionID\n\nTo get the ID of the loaded session, access the request property\n`req.sessionID`. This is simply a read-only value set when a session\nis loaded/created.\n\n## Session Store Implementation\n\nEvery session store _must_ be an `EventEmitter` and implement specific\nmethods. The following methods are the list of **required**, **recommended**,\nand **optional**.\n\n  * Required methods are ones that this module will always call on the store.\n  * Recommended methods are ones that this module will call on the store if\n    available.\n  * Optional methods are ones this module does not call at all, but helps\n    present uniform stores to users.\n\nFor an example implementation view the [connect-redis](http://github.com/visionmedia/connect-redis) repo.\n\n### store.all(callback)\n\n**Optional**\n\nThis optional method is used to get all sessions in the store as an array. The\n`callback` should be called as `callback(error, sessions)`.\n\n### store.destroy(sid, callback)\n\n**Required**\n\nThis required method is used to destroy/delete a session from the store given\na session ID (`sid`). The `callback` should be called as `callback(error)` once\nthe session is destroyed.\n\n### store.clear(callback)\n\n**Optional**\n\nThis optional method is used to delete all sessions from the store. The\n`callback` should be called as `callback(error)` once the store is cleared.\n\n### store.length(callback)\n\n**Optional**\n\nThis optional method is used to get the count of all sessions in the store.\nThe `callback` should be called as `callback(error, len)`.\n\n### store.get(sid, callback)\n\n**Required**\n\nThis required method is used to get a session from the store given a session\nID (`sid`). The `callback` should be called as `callback(error, session)`.\n\nThe `session` argument should be a session if found, otherwise `null` or\n`undefined` if the session was not found (and there was no error). A special\ncase is made when `error.code === 'ENOENT'` to act like `callback(null, null)`.\n\n### store.set(sid, session, callback)\n\n**Required**\n\nThis required method is used to upsert a session into the store given a\nsession ID (`sid`) and session (`session`) object. The callback should be\ncalled as `callback(error)` once the session has been set in the store.\n\n### store.touch(sid, session, callback)\n\n**Recommended**\n\nThis recommended method is used to \"touch\" a given session given a\nsession ID (`sid`) and session (`session`) object. The `callback` should be\ncalled as `callback(error)` once the session has been touched.\n\nThis is primarily used when the store will automatically delete idle sessions\nand this method is used to signal to the store the given session is active,\npotentially resetting the idle timer.\n\n## Compatible Session Stores\n\nThe following modules implement a session store that is compatible with this\nmodule. Please make a PR to add additional modules :)\n\n[![★][aerospike-session-store-image] aerospike-session-store][aerospike-session-store-url] A session store using [Aerospike](http://www.aerospike.com/).\n\n[aerospike-session-store-url]: https://www.npmjs.com/package/aerospike-session-store\n[aerospike-session-store-image]: https://img.shields.io/github/stars/aerospike/aerospike-session-store-expressjs.svg?label=%E2%98%85\n\n[![★][cassandra-store-image] cassandra-store][cassandra-store-url] An Apache Cassandra-based session store.\n\n[cassandra-store-url]: https://www.npmjs.com/package/cassandra-store\n[cassandra-store-image]: https://img.shields.io/github/stars/webcc/cassandra-store.svg?label=%E2%98%85\n\n[![★][cluster-store-image] cluster-store][cluster-store-url] A wrapper for using in-process / embedded\nstores - such as SQLite (via knex), leveldb, files, or memory - with node cluster (desirable for Raspberry Pi 2\nand other multi-core embedded devices).\n\n[cluster-store-url]: https://www.npmjs.com/package/cluster-store\n[cluster-store-image]: https://img.shields.io/github/stars/coolaj86/cluster-store.svg?label=%E2%98%85\n\n[![★][connect-azuretables-image] connect-azuretables][connect-azuretables-url] An [Azure Table Storage](https://azure.microsoft.com/en-gb/services/storage/tables/)-based session store.\n\n[connect-azuretables-url]: https://www.npmjs.com/package/connect-azuretables\n[connect-azuretables-image]: https://img.shields.io/github/stars/mike-goodwin/connect-azuretables.svg?label=%E2%98%85\n\n[![★][connect-cloudant-store-image] connect-cloudant-store][connect-cloudant-store-url] An [IBM Cloudant](https://cloudant.com/)-based session store.\n\n[connect-cloudant-store-url]: https://www.npmjs.com/package/connect-cloudant-store\n[connect-cloudant-store-image]: https://img.shields.io/github/stars/adriantanasa/connect-cloudant-store.svg?label=%E2%98%85\n\n[![★][connect-couchbase-image] connect-couchbase][connect-couchbase-url] A [couchbase](http://www.couchbase.com/)-based session store.\n\n[connect-couchbase-url]: https://www.npmjs.com/package/connect-couchbase\n[connect-couchbase-image]: https://img.shields.io/github/stars/christophermina/connect-couchbase.svg?label=%E2%98%85\n\n[![★][connect-datacache-image] connect-datacache][connect-datacache-url] An [IBM Bluemix Data Cache](http://www.ibm.com/cloud-computing/bluemix/)-based session store.\n\n[connect-datacache-url]: https://www.npmjs.com/package/connect-datacache\n[connect-datacache-image]: https://img.shields.io/github/stars/adriantanasa/connect-datacache.svg?label=%E2%98%85\n\n[![★][connect-db2-image] connect-db2][connect-db2-url] An IBM DB2-based session store built using [ibm_db](https://www.npmjs.com/package/ibm_db) module.\n\n[connect-db2-url]: https://www.npmjs.com/package/connect-db2\n[connect-db2-image]: https://img.shields.io/github/stars/wallali/connect-db2.svg?label=%E2%98%85\n\n[![★][connect-dynamodb-image] connect-dynamodb][connect-dynamodb-url] A DynamoDB-based session store.\n\n[connect-dynamodb-url]: https://github.com/ca98am79/connect-dynamodb\n[connect-dynamodb-image]: https://img.shields.io/github/stars/ca98am79/connect-dynamodb.svg?label=%E2%98%85\n\n[![★][connect-loki-image] connect-loki][connect-loki-url] A Loki.js-based session store.\n\n[connect-loki-url]: https://www.npmjs.com/package/connect-loki\n[connect-loki-image]: https://img.shields.io/github/stars/Requarks/connect-loki.svg?label=%E2%98%85\n\n[![★][connect-ml-image] connect-ml][connect-ml-url] A MarkLogic Server-based session store.\n\n[connect-ml-url]: https://www.npmjs.com/package/connect-ml\n[connect-ml-image]: https://img.shields.io/github/stars/bluetorch/connect-ml.svg?label=%E2%98%85\n\n[![★][connect-mssql-image] connect-mssql][connect-mssql-url] A SQL Server-based session store.\n\n[connect-mssql-url]: https://www.npmjs.com/package/connect-mssql\n[connect-mssql-image]: https://img.shields.io/github/stars/patriksimek/connect-mssql.svg?label=%E2%98%85\n\n[![★][connect-monetdb-image] connect-monetdb][connect-monetdb-url] A MonetDB-based session store.\n\n[connect-monetdb-url]: https://www.npmjs.com/package/connect-monetdb\n[connect-monetdb-image]: https://img.shields.io/github/stars/MonetDB/npm-connect-monetdb.svg?label=%E2%98%85\n\n[![★][connect-mongo-image] connect-mongo][connect-mongo-url] A MongoDB-based session store.\n\n[connect-mongo-url]: https://www.npmjs.com/package/connect-mongo\n[connect-mongo-image]: https://img.shields.io/github/stars/kcbanner/connect-mongo.svg?label=%E2%98%85\n\n[![★][connect-mongodb-session-image] connect-mongodb-session][connect-mongodb-session-url] Lightweight MongoDB-based session store built and maintained by MongoDB.\n\n[connect-mongodb-session-url]: https://www.npmjs.com/package/connect-mongodb-session\n[connect-mongodb-session-image]: https://img.shields.io/github/stars/mongodb-js/connect-mongodb-session.svg?label=%E2%98%85\n\n[![★][connect-pg-simple-image] connect-pg-simple][connect-pg-simple-url] A PostgreSQL-based session store.\n\n[connect-pg-simple-url]: https://www.npmjs.com/package/connect-pg-simple\n[connect-pg-simple-image]: https://img.shields.io/github/stars/voxpelli/node-connect-pg-simple.svg?label=%E2%98%85\n\n[![★][connect-redis-image] connect-redis][connect-redis-url] A Redis-based session store.\n\n[connect-redis-url]: https://www.npmjs.com/package/connect-redis\n[connect-redis-image]: https://img.shields.io/github/stars/tj/connect-redis.svg?label=%E2%98%85\n\n[![★][connect-memcached-image] connect-memcached][connect-memcached-url] A memcached-based session store.\n\n[connect-memcached-url]: https://www.npmjs.com/package/connect-memcached\n[connect-memcached-image]: https://img.shields.io/github/stars/balor/connect-memcached.svg?label=%E2%98%85\n\n[![★][connect-memjs-image] connect-memjs][connect-memjs-url] A memcached-based session store using\n[memjs](https://www.npmjs.com/package/memjs) as the memcached client.\n\n[connect-memjs-url]: https://www.npmjs.com/package/connect-memjs\n[connect-memjs-image]: https://img.shields.io/github/stars/liamdon/connect-memjs.svg?label=%E2%98%85\n\n[![★][connect-session-knex-image] connect-session-knex][connect-session-knex-url] A session store using\n[Knex.js](http://knexjs.org/), which is a SQL query builder for PostgreSQL, MySQL, MariaDB, SQLite3, and Oracle.\n\n[connect-session-knex-url]: https://www.npmjs.com/package/connect-session-knex\n[connect-session-knex-image]: https://img.shields.io/github/stars/llambda/connect-session-knex.svg?label=%E2%98%85\n\n[![★][connect-session-sequelize-image] connect-session-sequelize][connect-session-sequelize-url] A session store using\n[Sequelize.js](http://sequelizejs.com/), which is a Node.js / io.js ORM for PostgreSQL, MySQL, SQLite and MSSQL.\n\n[connect-session-sequelize-url]: https://www.npmjs.com/package/connect-session-sequelize\n[connect-session-sequelize-image]: https://img.shields.io/github/stars/mweibel/connect-session-sequelize.svg?label=%E2%98%85\n\n[![★][dynamodb-store-image] dynamodb-store][dynamodb-store-url] A DynamoDB-based session store.\n\n[dynamodb-store-url]: https://www.npmjs.com/package/dynamodb-store\n[dynamodb-store-image]: https://img.shields.io/github/stars/rafaelrpinto/dynamodb-store.svg?label=%E2%98%85\n\n[![★][express-mysql-session-image] express-mysql-session][express-mysql-session-url] A session store using native\n[MySQL](https://www.mysql.com/) via the [node-mysql](https://github.com/felixge/node-mysql) module.\n\n[express-mysql-session-url]: https://www.npmjs.com/package/express-mysql-session\n[express-mysql-session-image]: https://img.shields.io/github/stars/chill117/express-mysql-session.svg?label=%E2%98%85\n\n[![★][express-oracle-session-image] express-oracle-session][express-oracle-session-url] A session store using native\n[oracle](https://www.oracle.com/) via the [node-oracledb](https://www.npmjs.com/package/oracledb) module.\n\n[express-oracle-session-url]: https://www.npmjs.com/package/express-oracle-session\n[express-oracle-session-image]: https://img.shields.io/github/stars/slumber86/express-oracle-session.svg?label=%E2%98%85\n\n[![★][express-sessions-image] express-sessions][express-sessions-url]: A session store supporting both MongoDB and Redis.\n\n[express-sessions-url]: https://www.npmjs.com/package/express-sessions\n[express-sessions-image]: https://img.shields.io/github/stars/konteck/express-sessions.svg?label=%E2%98%85\n\n[![★][connect-sqlite3-image] connect-sqlite3][connect-sqlite3-url] A [SQLite3](https://github.com/mapbox/node-sqlite3) session store modeled after the TJ's `connect-redis` store.\n\n[connect-sqlite3-url]: https://www.npmjs.com/package/connect-sqlite3\n[connect-sqlite3-image]: https://img.shields.io/github/stars/rawberg/connect-sqlite3.svg?label=%E2%98%85\n\n[![★][documentdb-session-image] documentdb-session][documentdb-session-url] A session store for Microsoft Azure's [DocumentDB](https://azure.microsoft.com/en-us/services/documentdb/) NoSQL database service.\n\n[documentdb-session-url]: https://www.npmjs.com/package/documentdb-session\n[documentdb-session-image]: https://img.shields.io/github/stars/dwhieb/documentdb-session.svg?label=%E2%98%85\n\n[![★][express-nedb-session-image] express-nedb-session][express-nedb-session-url] A NeDB-based session store.\n\n[express-nedb-session-url]: https://www.npmjs.com/package/express-nedb-session\n[express-nedb-session-image]: https://img.shields.io/github/stars/louischatriot/express-nedb-session.svg?label=%E2%98%85\n\n[![★][express-session-cache-manager-image] express-session-cache-manager][express-session-cache-manager-url]\nA store that implements [cache-manager](https://www.npmjs.com/package/cache-manager), which supports\na [variety of storage types](https://www.npmjs.com/package/cache-manager#store-engines).\n\n[express-session-cache-manager-url]: https://www.npmjs.com/package/express-session-cache-manager\n[express-session-cache-manager-image]: https://img.shields.io/github/stars/theogravity/express-session-cache-manager.svg?label=%E2%98%85\n\n[![★][express-session-level-image] express-session-level][express-session-level-url] A [LevelDB](https://github.com/Level/levelup) based session store.\n\n[express-session-level-url]: https://www.npmjs.com/package/express-session-level\n[express-session-level-image]: https://img.shields.io/github/stars/tgohn/express-session-level.svg?label=%E2%98%85\n\n[![★][express-etcd-image] express-etcd][express-etcd-url] An [etcd](https://github.com/stianeikeland/node-etcd) based session store.\n\n[express-etcd-url]: https://www.npmjs.com/package/express-etcd\n[express-etcd-image]: https://img.shields.io/github/stars/gildean/express-etcd.svg?label=%E2%98%85\n\n[![★][fortune-session-image] fortune-session][fortune-session-url] A [Fortune.js](https://github.com/fortunejs/fortune)\nbased session store. Supports all backends supported by Fortune (MongoDB, Redis, Postgres, NeDB).\n\n[fortune-session-url]: https://www.npmjs.com/package/fortune-session\n[fortune-session-image]: https://img.shields.io/github/stars/aliceklipper/fortune-session.svg?label=%E2%98%85\n\n[![★][hazelcast-store-image] hazelcast-store][hazelcast-store-url] A Hazelcast-based session store built on the [Hazelcast Node Client](https://www.npmjs.com/package/hazelcast-client).\n\n[hazelcast-store-url]: https://www.npmjs.com/package/hazelcast-store\n[hazelcast-store-image]: https://img.shields.io/github/stars/jackspaniel/hazelcast-store.svg?label=%E2%98%85\n\n[![★][level-session-store-image] level-session-store][level-session-store-url] A LevelDB-based session store.\n\n[level-session-store-url]: https://www.npmjs.com/package/level-session-store\n[level-session-store-image]: https://img.shields.io/github/stars/scriptollc/level-session-store.svg?label=%E2%98%85\n\n[![★][medea-session-store-image] medea-session-store][medea-session-store-url] A Medea-based session store.\n\n[medea-session-store-url]: https://www.npmjs.com/package/medea-session-store\n[medea-session-store-image]: https://img.shields.io/github/stars/BenjaminVadant/medea-session-store.svg?label=%E2%98%85\n\n[![★][memorystore-image] memorystore][memorystore-url] A memory session store made for production.\n\n[memorystore-url]: https://www.npmjs.com/package/memorystore\n[memorystore-image]: https://img.shields.io/github/stars/roccomuso/memorystore.svg?label=%E2%98%85\n\n[![★][mssql-session-store-image] mssql-session-store][mssql-session-store-url] A SQL Server-based session store.\n\n[mssql-session-store-url]: https://www.npmjs.com/package/mssql-session-store\n[mssql-session-store-image]: https://img.shields.io/github/stars/jwathen/mssql-session-store.svg?label=%E2%98%85\n\n[![★][nedb-session-store-image] nedb-session-store][nedb-session-store-url] An alternate NeDB-based (either in-memory or file-persisted) session store.\n\n[nedb-session-store-url]: https://www.npmjs.com/package/nedb-session-store\n[nedb-session-store-image]: https://img.shields.io/github/stars/JamesMGreene/nedb-session-store.svg?label=%E2%98%85\n\n[![★][sequelstore-connect-image] sequelstore-connect][sequelstore-connect-url] A session store using [Sequelize.js](http://sequelizejs.com/).\n\n[sequelstore-connect-url]: https://www.npmjs.com/package/sequelstore-connect\n[sequelstore-connect-image]: https://img.shields.io/github/stars/MattMcFarland/sequelstore-connect.svg?label=%E2%98%85\n\n[![★][session-file-store-image] session-file-store][session-file-store-url] A file system-based session store.\n\n[session-file-store-url]: https://www.npmjs.com/package/session-file-store\n[session-file-store-image]: https://img.shields.io/github/stars/valery-barysok/session-file-store.svg?label=%E2%98%85\n\n[![★][session-rethinkdb-image] session-rethinkdb][session-rethinkdb-url] A [RethinkDB](http://rethinkdb.com/)-based session store.\n\n[session-rethinkdb-url]: https://www.npmjs.com/package/session-rethinkdb\n[session-rethinkdb-image]: https://img.shields.io/github/stars/llambda/session-rethinkdb.svg?label=%E2%98%85\n\n## Example\n\nA simple example using `express-session` to store page views for a user.\n\n```js\nvar express = require('express')\nvar parseurl = require('parseurl')\nvar session = require('express-session')\n\nvar app = express()\n\napp.use(session({\n  secret: 'keyboard cat',\n  resave: false,\n  saveUninitialized: true\n}))\n\napp.use(function (req, res, next) {\n  if (!req.session.views) {\n    req.session.views = {}\n  }\n\n  // get the url pathname\n  var pathname = parseurl(req).pathname\n\n  // count the views\n  req.session.views[pathname] = (req.session.views[pathname] || 0) + 1\n\n  next()\n})\n\napp.get('/foo', function (req, res, next) {\n  res.send('you viewed this page ' + req.session.views['/foo'] + ' times')\n})\n\napp.get('/bar', function (req, res, next) {\n  res.send('you viewed this page ' + req.session.views['/bar'] + ' times')\n})\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/express-session.svg\n[npm-url]: https://npmjs.org/package/express-session\n[travis-image]: https://img.shields.io/travis/expressjs/session/master.svg\n[travis-url]: https://travis-ci.org/expressjs/session\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/session/master.svg\n[coveralls-url]: https://coveralls.io/r/expressjs/session?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/express-session.svg\n[downloads-url]: https://npmjs.org/package/express-session\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg\n[gratipay-url]: https://gratipay.com/dougwilson/\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/expressjs/session.git"
  },
  "scripts": {
    "lint": "eslint --plugin markdown --ext js,md .",
    "test": "mocha --check-leaks --bail --no-exit --reporter spec test/",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --check-leaks --no-exit --reporter dot test/",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --check-leaks --no-exit --reporter spec test/"
  },
  "version": "1.15.6"
}
