{
  "_args": [
    [
      {
        "raw": "gift@^0.5.0",
        "scope": null,
        "escapedName": "gift",
        "name": "gift",
        "rawSpec": "^0.5.0",
        "spec": ">=0.5.0 <0.6.0",
        "type": "range"
      },
      "C:\\Users\\paytonp\\Projects\\NA campusM Tiles\\ibeacon-triggered-survey\\node_modules\\@ombiel\\aek-buildtools"
    ]
  ],
  "_from": "gift@>=0.5.0 <0.6.0",
  "_id": "gift@0.5.0",
  "_inCache": true,
  "_location": "/gift",
  "_npmUser": {
    "name": "notatestuser",
    "email": "notatestuser@gmail.com"
  },
  "_npmVersion": "1.4.21",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gift@^0.5.0",
    "scope": null,
    "escapedName": "gift",
    "name": "gift",
    "rawSpec": "^0.5.0",
    "spec": ">=0.5.0 <0.6.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@ombiel/aek-buildtools"
  ],
  "_resolved": "https://registry.npmjs.org/gift/-/gift-0.5.0.tgz",
  "_shasum": "d3a79f9c5e071fcf723f1955e9887db05f367938",
  "_shrinkwrap": null,
  "_spec": "gift@^0.5.0",
  "_where": "C:\\Users\\paytonp\\Projects\\NA campusM Tiles\\ibeacon-triggered-survey\\node_modules\\@ombiel\\aek-buildtools",
  "author": {
    "name": "sentientwaffle",
    "url": "http://sentientwaffle.github.com/"
  },
  "bugs": {
    "url": "https://github.com/notatestuser/gift/issues"
  },
  "dependencies": {
    "underscore": "1.x.x"
  },
  "description": "a Git wrapper library",
  "devDependencies": {
    "coffee-script": "^1.7.1",
    "fs-extra": "^0.9.1",
    "mocha": "^1.20.1",
    "should": "~4.0.4",
    "sinon": "^1.7.3"
  },
  "directories": {},
  "dist": {
    "shasum": "d3a79f9c5e071fcf723f1955e9887db05f367938",
    "tarball": "https://registry.npmjs.org/gift/-/gift-0.5.0.tgz"
  },
  "engines": {
    "node": "> 0.4.1"
  },
  "gitHead": "93e180f023a3dd0a00384036d805fde385f33837",
  "homepage": "https://github.com/notatestuser/gift",
  "keywords": [
    "git",
    "cli",
    "wrapper"
  ],
  "main": "./lib/index",
  "maintainers": [
    {
      "name": "sentientwaffle",
      "email": "sentientwaffle@gmail.com"
    },
    {
      "name": "notatestuser",
      "email": "notatestuser@gmail.com"
    }
  ],
  "name": "gift",
  "optionalDependencies": {},
  "readme": "# Gift [![Build Status](https://secure.travis-ci.org/notatestuser/gift.svg?branch=master)](http://travis-ci.org/notatestuser/gift) [![Dependency Status](https://david-dm.org/notatestuser/gift.svg)](https://david-dm.org/notatestuser/gift) [![devDependency Status](https://david-dm.org/notatestuser/gift/dev-status.svg)](https://david-dm.org/notatestuser/gift#info=devDependencies)\n\nA simple Node.js wrapper for the Git CLI. The API is based on\n[Grit](https://github.com/mojombo/grit)\n\n# Installation\n\nThis fork is now in the `npm` package repository. Install it like you would any other package:\n\n    $ npm install gift\n\n# API\n\nFor existing repositories:\n\n    git  = require 'gift'\n\n    repo = git \"path/to/repo\"\n    # => #<Repo>\n\nInitialize a new repository:\n\n    git = require 'gift'\n\n    git.init \"path/to/repo\", (err, _repo) ->\n      repo = _repo\n      # => #<Repo>\n\nInitialize a new bare repository:\n\n    git = require 'gift'\n\n    git.init \"path/to/bare/repo\", true, (err, _repo) ->\n      repo = _repo\n      # => #<Repo>\n\nClone a repository:\n\n    git = require 'gift'\n\n    git.clone \"git@host:path/to/remote/repo.git\", \"path/to/local/clone/repo\", (err, _repo) ->\n      repo = _repo\n      # => #<Repo>\n\n## Repo\n### `Repo#path`\n`String` - The path to the repository.\n\n### `Repo#commits([treeish, [limit, [skip, ]]]callback)`\nGet a list of commits.\n\n  * `treeish`  - `String`  (optional).\n  * `limit`    - `Integer` (optional).\n  * `skip`     - `Integer` (optional).\n  * `callback` - `Function` which receives `(err, commits)`, where `commits` is\n                 an `Array` of `Commit`s.\n\nGet the 10 most recent commits to master.\n\n    repo.commits (err, commits) ->\n\nOr to a different tag or branch.\n\n    repo.commits \"v0.0.3\", (err, commits) ->\n\nLimit the maximum number of commits returned (by default limit is 10).\n\n    repo.commits \"master\", 30, (err, commits) ->\n\nSkip some (for pagination):\n\n    repo.commits \"master\", 30, 30, (err, commits) ->\n\nOr get an unlimited number of commits (there could be a lot):\n\n    repo.commits \"master\", -1, (err, commits) ->\n\n### `Repo#current_commit(callback)`\nGet the current commit.\n\nThe callback receives `(err, commit)`.\n\n### `Repo#tree([treeish]) => Tree`\nThe `Tree` object for the treeish (which defaults to \"master\").\n\n    repo.tree().contents (err, children) ->\n      for child in children\n        console.log child.name\n\n### `Repo#diff(commitA, commitB, [paths, ]callback)`\nGet the difference between the trees.\n\nThe callback receives `(err, diffs)`.\n\n### `Repo#identity(callback)`\nGet the commit identity for this repository.\n\nThe callback receives `(err, actor)`, where `actor` is an Actor.\n\n### `Repo#identify(actor, callback)`\nSet your account's default identity for commits to this repository.\n\nThe callback receives `(err)`.\n\n### `Repo#remotes(callback)`\nGet the repository's remotes.\n\nReceives `(err, remotes)`, where each remote is a Ref.\n\n### `Repo#remote_list(callback)`\nGet a list of the repository's remote names.\n\nGet the string names of each of the remotes.\n\n### `Repo#remote_add(name, url, callback)`\nEquivalent to `git remote add <name> <url>`.\n\n### `Repo#remote_remove(name, callback)`\nRemove a remote.\n\n### `Repo#remote_add_url(name, url, callback)`\nEquivalent to `git remote set-url --add <name> <url>`.\n\n### `Repo#remote_set_url(name, url, callback)`\nEquivalent to `git remote set-url <name> <url>`.\n\n### `Repo#remote_delete_url(name, url, callback)`\nEquivalent to `git remote set-url --delete <name> <url>`.\n\n### `Repo#remote_fetch(name, callback)`\n`git fetch <name>`\n\n### `Repo#remote_push(name, [branch,] callback)`\n`git push <name>`\n\nwith branch parameter specified:\n`git push <name> <branch>`\n\n### `Repo#status([options, ]callback)`\nUses `--porcelain` to parse repository status in a way that is agnostic of system language.\n`options` is a string of any other options you'd like to pass to the status command.  For example, the `-u` option will list each file in an untracked directory rather than simply listing the directory itself.\n The callback receives `(err, status)`. See below for a definition of what `status` is.\n\n### `Repo#config(callback)`\n`git config` parsed as a simple, one-level object. The callback receives `(err, config)`.\n\n### `Repo#create_branch(name, callback)`\nCreate a new branch with `name`, and call the callback when complete\nwith an error, if one occurred.\n\n### `Repo#delete_branch(name, callback)`\nDelete the branch `name`, and call the callback with an error, if one occurred.\n\n### `Repo#tags(callback)`\nGet a list of `Tag`s.\n\n### `Repo#create_tag(name, [options, ]callback)`\nCreate a tab with the given name.\n\n### `Repo#delete_tag(name, callback)`\nDelete the tag with the given name.\n\n### `Repo#branches(callback)`\n`callback` receives `(err, heads)`.\n\n### `Repo#create_branch(name, callback)`\nCreate a branch with the given name.\n\n### `Repo#delete_branch(delete, callback)`\nDelete the branch with the given name.\n\n### `Repo#branch([branch, ]callback)`\nGet a branch.\n\n  * `branch`   - The name of the branch to get. Defaults to the\n                 currently checked out branch.\n  * `callback` - Receives `(err, head)`.\n\n\n### `Repo#commit(message, [options, ]callback)`\nCommit some changes.\n\n  * `message`  - `String`\n  * `options`  -\n    - `all`    - `Boolean`\n    - `amend`  - `Boolean`\n    - `author` - `String` that must match \"Au thor Author <author@nowhere.org>\"\n  * `callback` - Receives `(err)`.\n\n### `Repo#add(files, callback)`\n`git add <files>`\n\n### `Repo#remove(files, callback)`\n`git rm <files>`\n\n### `Repo#checkout(treeish, callback)`\n`git checkout <treeish>`\n\n### `Repo#checkoutFile([files, options, ]callback)`\nCheckout some files.\n\n  * `files`   - File(s) to checkout. Pass `'.'` or nothing to checkout all files.\n  * `options`   -\n    - `force`   - `Boolean`\n  * `callback`  - Receives `(err)`.\n\n### `Repo#sync([[remote, ]branch, ]callback)`\nSync the current branch with the remote, keeping all local changes intact.\n\nThe following steps are carried out: `stash`, `pull`, `push`, `stash pop`. If there were no changes to stash, the last `stash pop` is not executed.\n\n  * `remote`   - `String` (defaults to `origin`).\n  * `branch`   - `String` (defaults to `master`).\n  * `callback` - Receives `(err)`.\n\n### `Repo#reset([treeish, options, ]callback)`\nCheckout files.\n\n  * `treeish`   - The git object to reset to. Defaults to HEAD.\n  * `options`   -\n    - `soft`    - `Boolean`\n    - `mixed`   - `Boolean` __default__\n    - `hard`    - `Boolean`\n    - `merge`   - `Boolean`\n    - `keep`    - `Boolean`\n  * `callback`  - Receives `(err)`.\n\n## Commit\n### `Commit#id`\n`String` - The commit's SHA.\n\n### `Commit#parents`\n`Commit[]`\n\n### `Commit#tree()`\n`Tree` - The commit's content tree.\n\n### `Commit#author`\n`Actor`\n### `Commit#authored_date`\n`Date`\n### `Commit#committer`\n`Actor`\n### `Commit#committed_date`\n`Date`\n### `Commit#message`\n`String`\n\n\n## Head\n### `Head#name`\n`String`\n\n### `Head#commit`\n`Commit`\n\n## Tag\n### `Tag#name`\n`String`\n\n### `Tag#commit`\n`Commit`\n\n### `Tag#message(callback)`\nThe callback receives `(err, message)` (`message` is a String).\n\n### `Tag#tagger(callback)`\nThe callback receives `(err, actor)`.\n\n### `Tag#tag_date(callback)`\nThe callback receives `(err, date)`.\n\n## Config\n### `Config#items`\n`Object` - The keys are dotted precisely as the console output from `git config`. E.g., `{'user.name': 'John Doe'}`\n\n## Status\n### `Status#clean`\n`Boolean`\n\n### `Status#files`\n`Object` - The keys are files, the values objects indicating whether or not\nthe file is staged, tracked, etc.\n\nEach file has the following properties:\n\n  * `type` which translates to:\n\n| _type_   | index     | working tree |\n| :---     | :-------: | :-----------:|\n| `A `     | added     | -            |\n| `M `     | modified  | -            |\n| `D `     | deleted   | -            |\n| `AM`     | added     | modified     |\n| `MM`     | modified  | modified     |\n| `AD`     | staged    | deleted      |\n| `MD`     | modified  | deleted      |\n\n  * `staged`  - `Boolean`\n  * `tracked` - `Boolean`\n\n## Actor\n### `Actor#name`\n`String`\n\n### `Actor#email`\n`String`\n\n### `Actor#hash`\n`String` - The MD5 hash of the actor's email. Useful for displaying\n[Gravatar](http://en.gravatar.com/) avatars.\n\n\n## Tree\n### `Tree#id`\n`String` - SHA1\n\n### `Tree#contents(callback)`\n\n  * `callback` - Receives `(err, children)`.\n  * `children` - An array of `Blob`s, `Tree`s, and `Submodule`s.\n\n### `Tree#blobs(callback)`\n\n  * `callback` - Receives `(err, child_blobs)`.\n  * `children` - `[Blob]`\n\n### `Tree#trees(callback)`\n\n  * `callback` - Receives `(err, child_trees)`.\n  * `children` - `[Tree]`\n\n### `Tree#find(directory, callback)`\n\n  * `directory` - `String`\n  * `callback`  - Receives `(err, thing)`.\n\n## Blob\n### `Blob#id`\n`String` - SHA1\n\n### `Blob#mode`\n`String`\n\n### `Blob#data(callback)`\n\n  * `callback` - `(err, data)`\n\nWarning: this method only returns the complete file up to 200k, which is the default\nbuffer size for running child_process.exec(). If the file you're reading is bigger than\nthat, or if you're not sure, you need to use dataStream()\n\n### `Blob#dataStream()`\n\n  * returns - [dataStream, errorStream]\n\nReturns streams for you to use to get the data.\n\nUsage:\n\n    data = \"\"\n    [dataStream, _] = blob.dataStream()\n    dataStream.on 'data', (buf) ->\n      data += buf.toString()\n    .on 'end', ->\n      callback(data)\n\n## Submodule\n### `Submodule#id`\n`String`\n\n### `Submodule#name`\n`String`\n\n### `Submodule#mode`\n`String`\n\n### `Submodule#url(callback)`\nGet the url the submodule points to.\n\n\n# License\nSee LICENSE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/notatestuser/gift.git"
  },
  "scripts": {
    "prepublish": "coffee -o lib -c src",
    "test": "mocha --compilers coffee:'./node_modules/coffee-script/lib/coffee-script/register'"
  },
  "version": "0.5.0"
}
