{
  "_args": [
    [
      {
        "raw": "gulp-notify@^2.2.0",
        "scope": null,
        "escapedName": "gulp-notify",
        "name": "gulp-notify",
        "rawSpec": "^2.2.0",
        "spec": ">=2.2.0 <3.0.0",
        "type": "range"
      },
      "C:\\Users\\paytonp\\Projects\\NA campusM Tiles\\ibeacon-triggered-survey\\node_modules\\@ombiel\\aek-buildtools"
    ]
  ],
  "_from": "gulp-notify@>=2.2.0 <3.0.0",
  "_id": "gulp-notify@2.2.0",
  "_inCache": true,
  "_location": "/gulp-notify",
  "_nodeVersion": "0.10.21",
  "_npmUser": {
    "name": "mikaelb",
    "email": "mikaelbre@gmail.com"
  },
  "_npmVersion": "2.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gulp-notify@^2.2.0",
    "scope": null,
    "escapedName": "gulp-notify",
    "name": "gulp-notify",
    "rawSpec": "^2.2.0",
    "spec": ">=2.2.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@ombiel/aek-buildtools"
  ],
  "_resolved": "https://registry.npmjs.org/gulp-notify/-/gulp-notify-2.2.0.tgz",
  "_shasum": "046c8285c292e97eed4e15a009c26cbbe5cef135",
  "_shrinkwrap": null,
  "_spec": "gulp-notify@^2.2.0",
  "_where": "C:\\Users\\paytonp\\Projects\\NA campusM Tiles\\ibeacon-triggered-survey\\node_modules\\@ombiel\\aek-buildtools",
  "author": {
    "name": "Mikael Brevik",
    "email": "mikaelbre@gmail.com",
    "url": "https://github.com/mikaelbr"
  },
  "bugs": {
    "url": "https://github.com/mikaelbr/gulp-notify/issues"
  },
  "dependencies": {
    "gulp-util": "^3.0.2",
    "lodash.template": "^3.0.0",
    "node-notifier": "^4.1.0",
    "node.extend": "^1.1.3",
    "through2": "^0.6.3"
  },
  "description": "gulp plugin to send messages based on Vinyl Files or Errors to Mac OS X, Linux or Windows using the node-notifier module. Fallbacks to Growl or simply logging",
  "devDependencies": {
    "gulp": "^3.8.10",
    "gulp-plumber": "^0.6.6",
    "mocha": "^2.1.0",
    "should": "^4.6.1"
  },
  "directories": {},
  "dist": {
    "shasum": "046c8285c292e97eed4e15a009c26cbbe5cef135",
    "tarball": "https://registry.npmjs.org/gulp-notify/-/gulp-notify-2.2.0.tgz"
  },
  "engines": {
    "node": ">=0.8.0",
    "npm": ">=1.2.10"
  },
  "gitHead": "5b44fcfa33d9b58740be3f32bdcdc7385a287768",
  "homepage": "https://github.com/mikaelbr/gulp-notify",
  "keywords": [
    "gulpplugin",
    "notify",
    "gulp",
    "notification",
    "reporter",
    "windows notification",
    "mac notification",
    "notify-send",
    "notify-osd",
    "growl"
  ],
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "main": "./index.js",
  "maintainers": [
    {
      "name": "mikaelb",
      "email": "mikaelbre@gmail.com"
    }
  ],
  "name": "gulp-notify",
  "optionalDependencies": {},
  "readme": "# gulp-notify [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][depstat-image]][depstat-url]\n\n> notification plugin for [gulp](https://github.com/gulpjs/gulp)\n\n## Information\n| Package       | gulp-notify  |\n| ------------- |--------------|\n| Description   | Send messages to Mac Notification Center, Linux notifications (using `notify-send`) or Windows >= 8 (using native toaster) or Growl as fallback, using the [node-notifier](https://github.com/mikaelbr/node-notifier) module. Can also [specify custom notifier](#notifywithreporterfunction). |\n| Node Version  | >= 0.8       |\n\n## Table of Contents\n\n<!-- toc -->\n\n* [Information](#information)\n* [Requirements](#requirements)\n* [Usage](#usage)\n* [Notes/tip](#notestip)\n* [API](#api)\n  * [notify(String)](#notifystring)\n  * [notify(Function)](#notifyfunction)\n  * [notify(options)](#notifyoptions)\n    * [options.onLast](#optionsonlast)\n    * [options.emitError](#optionsemiterror)\n    * [options.message](#optionsmessage)\n    * [options.title](#optionstitle)\n    * [options.templateOptions](#optionstemplateoptions)\n    * [options.notifier](#optionsnotifier)\n  * [notify.withReporter(Function)](#notifywithreporterfunction)\n  * [notify.onError()](#notifyonerror)\n  * [notify.logLevel(level)](#notifyloglevellevel)\n* [Disable `gulp-notify`](#disable-gulp-notify)\n* [Examples](#examples)\n  * [As jshint reporter](#as-jshint-reporter)\n* [License](#license)\n\n<!-- toc stop -->\n\n\n\n## Requirements\n* **Mac OS X**: No external installation needed (if Mac OS X 10.8 or higher).\n* **Linux**: `notify-send`/`notify-osd` should be installed (On Ubuntu this is installed per default)\n* **Windows**: Uses native toaster (if Windows 8 or higher).\n* **Fallback: Growl**: Growl (for Mac, Windows or similar) should be installed.\n\nSee [node-notifier](https://github.com/mikaelbr/node-notifier) for details.\n\n## Usage\n\nFirst, install `gulp-notify` as a development dependency:\n\n```shell\nnpm install --save-dev gulp-notify\n```\n\nThen, add it to your `gulpfile.js`:\n\n```javascript\n\nvar notify = require(\"gulp-notify\");\ngulp.src(\"./src/test.ext\")\n  .pipe(notify(\"Hello Gulp!\"));\n```\n\nOr with template\n\n\n```javascript\n\nvar notify = require(\"gulp-notify\");\ngulp.src(\"./src/test.ext\")\n  .pipe(notify(\"Found file: <%= file.relative %>!\"));\n```\n\nSee [examples](examples/gulpfile.js) for more og the API section for various inputs.\n\n## Notes/tip\n\n`gulp-notify` passes on the `vinyl files` even on error. So if you are\nusing [`gulp-plumber`](https://github.com/floatdrop/gulp-plumber) the run\nwill not break if the notifier returns an error.\n\nIf you want to notify on errors [`gulp-plumber`](https://github.com/floatdrop/gulp-plumber)\ncan be used to not break the run and force you to have to restart gulp.\n\nYou can use [notify.onError()](#notifyonerror) as the errorHandler for gulp-plumber like this:\n\n```javascript\ngulp.src(\"../test/fixtures/*\")\n      .pipe(plumber({errorHandler: notify.onError(\"Error: <%= error.message %>\")}))\n      .pipe(through(function () {\n        this.emit(\"error\", new Error(\"Something happend: Error message!\"))\n      }));\n```\n\n## API\n\n### notify(String)\n\nA message to notify per data on stream.\nThe string can be a lodash template as\nit is passed through [gulp-util.template](https://github.com/gulpjs/gulp-util#templatestring-data).\n\n### notify(Function)\nType: `function(VinylFile)`\n\nVinyl File from gulp stream passed in as argument.\n\nThe result of the function can be a string used as the message or an options object (see below).\nIf the returned value is a string, it can be a lodash template as\nit is passed through [gulp-util.template](https://github.com/gulpjs/gulp-util#templatestring-data).\n\nIf `false` is returned from the function the notification won't run.\n\n### notify(options)\n\n*Options are passed onto the reporter, so on Windows, you can define\nGrowl host, on Mac you can pass in contentImage, and so on.\n\nSee [node-notifier](https://github.com/mikaelbr/node-notifier)\nfor all options*\n\nDefault notification values:\n - Gulp logo on regular notification\n - Inverted Gulp logo on error\n - Frog sound on error on Mac.\n\nSee also the [advanced example](examples/gulpfile.js).\n\n#### options.onLast\nType: `Boolean`\nDefault: `false`\n\nIf the notification should only happen on the last file\nof the stream. Per default a notification is triggered\non each file.\n\n#### options.emitError\nType: `Boolean`\nDefault: `false`\n\nIf the returned stream should emit an error or not.\nIf `emitError` is true, you have to handle `.on('error')`\nmanually in case the notifier (gulp-notify) fails. If\nthe default `false` is set, the error will not be emitted\nbut simply printed to the console.\n\nThis means you can run the notifier on a CI system without\nopting it out but simply letting it fail gracefully.\n\n\n#### options.message\nType: `String`\nDefault: File path in stream\n\nThe message you wish to attach to file. The string can be a\nlodash template as it is passed through [gulp-util.template](https://github.com/gulpjs/gulp-util#templatestring-data).\n\nExample: `Created <%= file.relative %>`.\n\n##### as function\nType: `Function(vinylFile)`\n\nSee `notify(Function)`.\n\n#### options.title\nType: `String`\nDefault: \"Gulp Notification\"\n\nThe title of the notification. The string can be a\nlodash template as it is passed through [gulp-util.template](https://github.com/gulpjs/gulp-util#templatestring-data).\n\nExample: `Created <%= file.relative %>`.\n\n##### as function\nType: `Function(vinylFile)`\n\nSee `notify(Function)`.\n\n#### options.templateOptions\nType: `Object`\nDefault: {}\n\nObject passed to the `lodash` template, for additional properties passed to the template.\n\nExamples:\n\n```javascript\ngulp.src(\"../test/fixtures/*\")\n    .pipe(notify({\n      message: \"Generated file: <%= file.relative %> @ <%= options.date %>\",\n      templateOptions: {\n        date: new Date()\n      }\n    }))\n```\n\n#### options.notifier\nType: `Function(options, callback)`\nDefault: node-notifier module\n\nSwap out the notifier by passing in an function.\nThe function expects two arguments: options and callback.\n\nThe callback must be called when the notification is finished. Options\nwill contain both title and message.\n\n*See `notify.withReporter` for syntactic sugar.*\n\n\n### notify.on(event, function (notificationOptions)) - Events\n\n**If the `wait` option is set to `true`**, the notifier will tigger\nevents `click` or `timeout`, whether the user clicks the notification or it\ntimes out. You listen to these events on the main notify object, not the\nproduces stream.\n\n```js\nvar notify = require('gulp-notify');\n\nnotify.on('click', function (options) {\n  console.log('I clicked something!', options);\n});\n\nnotify.on('timeout', function (options) {\n  console.log('The notification timed out', options);\n});\n\ngulp.task(\"click\", function () {\n  return gulp.src(\"some/glob/**\")\n    .pipe(notify({ message: 'Click or wait', wait: true }));\n});\n```\n\n### notify.withReporter(Function)\nType: `Reporter`\n\nWraps `options.notifier` to return a new notify-function only using\nthe passed in reporter.\n\nExample:\n\n```javascript\nvar custom = notify.withReporter(function (options, callback) {\n  console.log(\"Title:\", options.title);\n  console.log(\"Message:\", options.message);\n  callback();\n});\n\ngulp.src(\"../test/fixtures/1.txt\")\n    .pipe(custom(\"This is a message.\"));\n\n```\n\nThis will be the same as\n\n```javascript\n\ngulp.src(\"../test/fixtures/1.txt\")\n    .pipe(notify({\n      message: \"This is a message.\"\n      notifier: function (options, callback) {\n        console.log(\"Title:\", options.title);\n        console.log(\"Message:\", options.message);\n        callback();\n      }\n    }));\n```\n\nBut much, much prettier.\n\n\n### notify.onError()\n\nThe exact same API as using `notify()`, but where a `vinyl File`\nis passed, the error object is passed instead.\n\nExample:\n\n```javascript\ngulp.src(\"../test/fixtures/*\")\n      .pipe(through(function () {\n        this.emit(\"error\", new Error(\"Something happend: Error message!\"))\n      }))\n      .on(\"error\", notify.onError(function (error) {\n        return \"Message to the notifier: \" + error.message;\n      }));\n```\n\nOr simply:\n\n```javascript\ngulp.src(\"../test/fixtures/*\")\n      .pipe(through(function () {\n        this.emit(\"error\", new Error(\"Something happend: Error message!\"))\n      }))\n      .on(\"error\", notify.onError(\"Error: <%= error.message %>\"));\n```\n\n```javascript\ngulp.src(\"../test/fixtures/*\")\n      .pipe(through(function () {\n        this.emit(\"error\", new Error(\"Something happend: Error message!\"))\n      }))\n      .on(\"error\", notify.onError({\n        message: \"Error: <%= error.message %>\",\n        title: \"Error running something\"\n      }));\n```\n\nThe `onError()` end point does support `lodash.template`.\n\n**`onError()` will automatically end the stream for you. Making it easer for watching.**\n\n### notify.logLevel(level)\nType: `Integer`\nDefault: `2`\n\nSet if logger should be used or not. If log level is set to 0,\nno logging will be used. If no new log level is passed, the\ncurrent log level is returned.\n\n* `0`: No logging\n* `1`: Log on error\n* `2`: Log both on error and regular notification.\n\nIf logging is set to `> 0`, the title and\nmessage passed to `gulp-notify` will be logged like so:\n\n```sh\n➜  gulp-notify git:(master) ✗ gulp --gulpfile examples/gulpfile.js one\n[gulp] Using file /Users/example/gulp-notify/examples/gulpfile.js\n[gulp] Working directory changed to /Users/example/repos/gulp-notify/examples\n[gulp] Running 'one'...\n[gulp] Finished 'one' in 4.08 ms\n[gulp] gulp-notify: [Gulp notification] /Users/example/gulp-notify/test/fixtures/1.txt\n```\n\n## Disable `gulp-notify`\n\nIf you are running on a system that handles notifications poorly or you simply\ndo not wish to use `gulp-notify` but your project does? You can disable `gulp-notify`\nby using enviroment variable `DISABLE_NOTIFIER`.\n\n```\nexport DISABLE_NOTIFIER=true;\n```\n\nThis will disable all methods; `notify()`, `notify.onError` and `notify.withReporter`.\n\n## Examples\n\nTo see all examples run from root:\n\n```shell\n$ gulp --gulpfile examples/gulpfile.js --tasks\n[gulp] Using file /Users/example/gulp-notify/examples/gulpfile.js\n[gulp] Working directory changed to /Users/example/gulp-notify/examples\n[gulp] Tasks for /Users/example/gulp-notify/examples/gulpfile.js\n[gulp] ├── multiple\n[gulp] ├── one\n[gulp] ├── message\n[gulp] ├── customReporter\n[gulp] ├── template\n[gulp] ├── templateadv\n[gulp] ├── function\n[gulp] ├── onlast\n[gulp] ├── advanceMac\n[gulp] ├── error\n[gulp] ├── forceGrowl\n[gulp] └── customError\n```\n\nTo run an example:\n```shell\n$ gulp --gulpfile examples/gulpfile.js multiple\n[gulp] Using file /Users/example/gulp-notify/examples/gulpfile.js\n[gulp] Working directory changed to /Users/example/gulp-notify/examples\n[gulp] Running 'multiple'...\n[gulp] Finished 'multiple' in 3.75 ms\n```\n\n### As jshint reporter\n\n`gulp-notify` can easily be used as jshint reporter.\nAs jshint exposes the result on the vinyl file we can\nuse them in a function like so:\n\n```javascript\ngulp.task('lint', function() {\n  gulp.src('/src/**/*.js')\n    .pipe(jshint())\n    // Use gulp-notify as jshint reporter\n    .pipe(notify(function (file) {\n      if (file.jshint.success) {\n        // Don't show something if success\n        return false;\n      }\n\n      var errors = file.jshint.results.map(function (data) {\n        if (data.error) {\n          return \"(\" + data.error.line + ':' + data.error.character + ') ' + data.error.reason;\n        }\n      }).join(\"\\n\");\n      return file.relative + \" (\" + file.jshint.results.length + \" errors)\\n\" + errors;\n    }));\n});\n```\n\nIf you use a function for message in `gulp-notify`, the message won't be shown.\nThis is true for both direct use of function and `{ message: function () {}}`.\n\n[![NPM downloads][npm-downloads]][npm-url]\n\n## License\n\n[MIT License](http://en.wikipedia.org/wiki/MIT_License)\n\n[npm-url]: https://npmjs.org/package/gulp-notify\n[npm-image]: http://img.shields.io/npm/v/gulp-notify.svg?style=flat\n[npm-downloads]: http://img.shields.io/npm/dm/gulp-notify.svg?style=flat\n\n[travis-url]: http://travis-ci.org/mikaelbr/gulp-notify\n[travis-image]: http://img.shields.io/travis/mikaelbr/gulp-notify.svg?style=flat\n\n[depstat-url]: https://gemnasium.com/mikaelbr/gulp-notify\n[depstat-image]: http://img.shields.io/gemnasium/mikaelbr/gulp-notify.svg?style=flat\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mikaelbr/gulp-notify.git"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "version": "2.2.0"
}
