{
  "_args": [
    [
      {
        "raw": "validator@^9.0.0",
        "scope": null,
        "escapedName": "validator",
        "name": "validator",
        "rawSpec": "^9.0.0",
        "spec": ">=9.0.0 <10.0.0",
        "type": "range"
      },
      "C:\\Users\\paytonp\\Projects\\NA campusM Tiles\\ibeacon-triggered-survey\\node_modules\\z-schema"
    ]
  ],
  "_from": "validator@>=9.0.0 <10.0.0",
  "_id": "validator@9.1.2",
  "_inCache": true,
  "_location": "/validator",
  "_nodeVersion": "8.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/validator-9.1.2.tgz_1511487836490_0.37965016858652234"
  },
  "_npmUser": {
    "name": "cohara87",
    "email": "cohara87@gmail.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "validator@^9.0.0",
    "scope": null,
    "escapedName": "validator",
    "name": "validator",
    "rawSpec": "^9.0.0",
    "spec": ">=9.0.0 <10.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/z-schema"
  ],
  "_resolved": "https://registry.npmjs.org/validator/-/validator-9.1.2.tgz",
  "_shasum": "5711b6413f78bd9d56003130c81b47c39e86546c",
  "_shrinkwrap": null,
  "_spec": "validator@^9.0.0",
  "_where": "C:\\Users\\paytonp\\Projects\\NA campusM Tiles\\ibeacon-triggered-survey\\node_modules\\z-schema",
  "author": {
    "name": "Chris O'Hara",
    "email": "cohara87@gmail.com"
  },
  "bugs": {
    "url": "http://github.com/chriso/validator.js/issues"
  },
  "dependencies": {},
  "description": "String validation and sanitization",
  "devDependencies": {
    "babel-cli": "^6.24.0",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-preset-es2015": "^6.24.0",
    "babel-preset-es2015-rollup": "^3.0.0",
    "eslint": "^4.0.0",
    "eslint-config-airbnb-base": "^11.2.0",
    "eslint-plugin-import": "^2.3.0",
    "mocha": "^3.1.2",
    "rollup": "^0.43.0",
    "rollup-plugin-babel": "^2.7.1",
    "uglify-js": "^3.0.19"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-1Tml6crNdsSC61jHssWksQxq6C7MmSFCCmf99Eb+l/V/cwVlw4/Pg3YXBP1WKcHLsyqe3E+iJXUZgoTTQFcqQg==",
    "shasum": "5711b6413f78bd9d56003130c81b47c39e86546c",
    "tarball": "https://registry.npmjs.org/validator/-/validator-9.1.2.tgz"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "files": [
    "index.js",
    "lib",
    "README.md",
    "LICENCE",
    "validator.js",
    "validator.min.js"
  ],
  "gitHead": "85d40ade5e2336d82d8b4d2f78aea685c83d3a85",
  "homepage": "http://github.com/chriso/validator.js",
  "keywords": [
    "validator",
    "validation",
    "validate",
    "sanitization",
    "sanitize",
    "sanitisation",
    "sanitise",
    "assert"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "cohara87",
      "email": "cohara87@gmail.com"
    }
  ],
  "name": "validator",
  "optionalDependencies": {},
  "readme": "# validator.js\n\n[![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Downloads][downloads-image]][npm-url]\n\nA library of string validators and sanitizers.\n\n## Strings only\n\n**This library validates and sanitizes strings only.**\n\nIf you're not sure if your input is a string, coerce it using `input + ''`.\nPassing anything other than a string is an error.\n\n## Installation and Usage\n\n### Server-side usage\n\nInstall the library with `npm install validator`\n\n#### No ES6\n\n```javascript\nvar validator = require('validator');\n\nvalidator.isEmail('foo@bar.com'); //=> true\n```\n\n#### ES6\n\n```javascript\nimport validator from 'validator';\n```\n\nOr, import only a subset of the library:\n\n```javascript\nimport isEmail from 'validator/lib/isEmail';\n```\n\n### Client-side usage\n\nThe library can be loaded either as a standalone script, or through an [AMD][amd]-compatible loader\n\n```html\n<script type=\"text/javascript\" src=\"validator.min.js\"></script>\n<script type=\"text/javascript\">\n  validator.isEmail('foo@bar.com'); //=> true\n</script>\n```\n\nThe library can also be installed through [bower][bower]\n\n```bash\n$ bower install validator-js\n```\n\n## Validators\n\nHere is a list of the validators currently available.\n\nValidator                               | Description\n--------------------------------------- | --------------------------------------\n***contains(str, seed)***               | check if the string contains the seed.\n**equals(str, comparison)**             | check if the string matches the comparison.\n**isAfter(str [, date])**               | check if the string is a date that's after the specified date (defaults to now).\n**isAlpha(str [, locale])**             | check if the string contains only letters (a-zA-Z).<br/><br/>Locale is one of `['ar', 'ar-AE', 'ar-BH', 'ar-DZ', 'ar-EG', 'ar-IQ', 'ar-JO', 'ar-KW', 'ar-LB', 'ar-LY', 'ar-MA', 'ar-QA', 'ar-QM', 'ar-SA', 'ar-SD', 'ar-SY', 'ar-TN', 'ar-YE', 'cs-CZ', 'da-DK', 'de-DE', 'en-AU', 'en-GB', 'en-HK', 'en-IN', 'en-NZ', 'en-US', 'en-ZA', 'en-ZM', 'es-ES', 'fr-FR', 'hu-HU', 'it-IT', 'nb-NO', 'nl-NL', 'nn-NO', 'pl-PL', 'pt-BR', 'pt-PT', 'ru-RU', 'sr-RS', 'sr-RS@latin', 'sv-SE', 'tr-TR', 'uk-UA']`) and defaults to `en-US`.\n**isAlphanumeric(str [, locale])**      | check if the string contains only letters and numbers.<br/><br/>Locale is one of `['ar', 'ar-AE', 'ar-BH', 'ar-DZ', 'ar-EG', 'ar-IQ', 'ar-JO', 'ar-KW', 'ar-LB', 'ar-LY', 'ar-MA', 'ar-QA', 'ar-QM', 'ar-SA', 'ar-SD', 'ar-SY', 'ar-TN', 'ar-YE', 'cs-CZ', 'da-DK', 'de-DE', 'en-AU', 'en-GB', 'en-HK', 'en-IN', 'en-NZ', 'en-US', 'en-ZA', 'en-ZM', 'es-ES', 'fr-FR', 'hu-HU', 'it-IT', 'nb-NO', 'nl-NL', 'nn-NO', 'pl-PL', 'pt-BR', 'pt-PT', 'ru-RU', 'sr-RS', 'sr-RS@latin', 'sv-SE', 'tr-TR', 'uk-UA']`) and defaults to `en-US`.\n**isAscii(str)**                        | check if the string contains ASCII chars only.\n**isBase64(str)**                       | check if a string is base64 encoded.\n**isBefore(str [, date])**              | check if the string is a date that's before the specified date.\n**isBoolean(str)**                      | check if a string is a boolean.\n**isByteLength(str, options)**          | check if the string's length (in UTF-8 bytes) falls in a range.<br/><br/>`options` is an object which defaults to `{min:0, max: undefined}`.\n**isCreditCard(str)**                   | check if the string is a credit card.\n**isCurrency(str, options)**            | check if the string is a valid currency amount.<br/><br/>`options` is an object which defaults to `{symbol: '$', require_symbol: false, allow_space_after_symbol: false, symbol_after_digits: false, allow_negatives: true, parens_for_negatives: false, negative_sign_before_digits: false, negative_sign_after_digits: false, allow_negative_sign_placeholder: false, thousands_separator: ',', decimal_separator: '.', allow_decimal: true, require_decimal: false, digits_after_decimal: [2], allow_space_after_digits: false}`.<br/>**Note:** The array `digits_after_decimal` is filled with the exact number of digits allowd not a range, for example a range 1 to 3 will be given as [1, 2, 3].\n**isDataURI(str)**                      | check if the string is a [data uri format](https://developer.mozilla.org/en-US/docs/Web/HTTP/data_URIs).\n**isDecimal(str, options)**             | check if the string represents a decimal number, such as 0.1, .3, 1.1, 1.00003, 4.0, etc.<br/><br/>`options` is an opject which defaults to `{force_decimal: false, decimal_digits: '1,', locale: 'en-US'}`<br/><br/>`locale` determine the decimal separator and is one of `['ar', 'ar-AE', 'ar-BH', 'ar-DZ', 'ar-EG', 'ar-IQ', 'ar-JO', 'ar-KW', 'ar-LB', 'ar-LY', 'ar-MA', 'ar-QA', 'ar-QM', 'ar-SA', 'ar-SD', 'ar-SY', 'ar-TN', 'ar-YE', 'cs-CZ', 'da-DK', 'de-DE', 'en-AU', 'en-GB', 'en-HK', 'en-IN', 'en-NZ', 'en-US', 'en-ZA', 'en-ZM', 'es-ES', 'fr-FR', 'hu-HU', 'it-IT', 'nb-NO', 'nl-NL', 'nn-NO', 'pl-PL', 'pt-BR', 'pt-PT', 'ru-RU', 'sr-RS', 'sr-RS@latin', 'sv-SE', 'tr-TR', 'uk-UA']`.<br/>**Note:** `decimal_digits` is given as a range like '1,3', a specific value like '3' or min like '1,'.\n**isDivisibleBy(str, number)**          | check if the string is a number that's divisible by another.\n**isEmail(str [, options])**            | check if the string is an email.<br/><br/>`options` is an object which defaults to `{ allow_display_name: false, require_display_name: false, allow_utf8_local_part: true, require_tld: true }`. If `allow_display_name` is set to true, the validator will also match `Display Name <email-address>`. If `require_display_name` is set to true, the validator will reject strings without the format `Display Name <email-address>`. If `allow_utf8_local_part` is set to false, the validator will not allow any non-English UTF8 character in email address' local part. If `require_tld` is set to false, e-mail addresses without having TLD in their domain will also be matched.\n**isEmpty(str)**                        | check if the string has a length of zero.\n**isFQDN(str [, options])**             | check if the string is a fully qualified domain name (e.g. domain.com).<br/><br/>`options` is an object which defaults to `{ require_tld: true, allow_underscores: false, allow_trailing_dot: false }`.\n**isFloat(str [, options])**            | check if the string is a float.<br/><br/>`options` is an object which can contain the keys `min`, `max`, `gt`, and/or `lt` to validate the float is within boundaries (e.g. `{ min: 7.22, max: 9.55 }`) it also has `locale` as an option.<br/><br/>`min` and `max` are equivalent to 'greater or equal' and 'less or equal', respectively while `gt` and `lt` are their strict counterparts.<br/><br/>`locale` determine the decimal separator and is one of `['ar', 'ar-AE', 'ar-BH', 'ar-DZ', 'ar-EG', 'ar-IQ', 'ar-JO', 'ar-KW', 'ar-LB', 'ar-LY', 'ar-MA', 'ar-QA', 'ar-QM', 'ar-SA', 'ar-SD', 'ar-SY', 'ar-TN', 'ar-YE', 'cs-CZ', 'da-DK', 'de-DE', 'en-AU', 'en-GB', 'en-HK', 'en-IN', 'en-NZ', 'en-US', 'en-ZA', 'en-ZM', 'es-ES', 'fr-FR', 'hu-HU', 'it-IT', 'nb-NO', 'nl-NL', 'nn-NO', 'pl-PL', 'pt-BR', 'pt-PT', 'ru-RU', 'sr-RS', 'sr-RS@latin', 'sv-SE', 'tr-TR', 'uk-UA']`.\n**isFullWidth(str)**                    | check if the string contains any full-width chars.\n**isHalfWidth(str)**                    | check if the string contains any half-width chars.\n**isHash(str, algorithm)**              | check if the string is a hash of type algorithm.<br/><br/>Algorithm is one of `['md4', 'md5', 'sha1', 'sha256', 'sha384', 'sha512', 'ripemd128', 'ripemd160', 'tiger128', 'tiger160', 'tiger192', 'crc32', 'crc32b']`\n**isHexColor(str)**                     | check if the string is a hexadecimal color.\n**isHexadecimal(str)**                  | check if the string is a hexadecimal number.\n**isIP(str [, version])**               | check if the string is an IP (version 4 or 6).\n**isISBN(str [, version])**             | check if the string is an ISBN (version 10 or 13).\n**isISSN(str [, options])**             | check if the string is an [ISSN](https://en.wikipedia.org/wiki/International_Standard_Serial_Number).<br/><br/>`options` is an object which defaults to `{ case_sensitive: false, require_hyphen: false }`. If `case_sensitive` is true, ISSNs with a lowercase `'x'` as the check digit are rejected.\n**isISIN(str)**                         | check if the string is an [ISIN][ISIN] (stock/security identifier).\n**isISO8601(str)**                      | check if the string is a valid [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date.\n**isISO31661Alpha2(str)**               | check if the string is a valid [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) officially assigned country code.\n**isISRC(str)**                         | check if the string is a [ISRC](https://en.wikipedia.org/wiki/International_Standard_Recording_Code).\n**isIn(str, values)**                   | check if the string is in a array of allowed values.\n**isInt(str [, options])**              | check if the string is an integer.<br/><br/>`options` is an object which can contain the keys `min` and/or `max` to check the integer is within boundaries (e.g. `{ min: 10, max: 99 }`). `options` can also contain the key `allow_leading_zeroes`, which when set to false will disallow integer values with leading zeroes (e.g. `{ allow_leading_zeroes: false }`). Finally, `options` can contain the keys `gt` and/or `lt` which will enforce integers being greater than or less than, respectively, the value provided (e.g. `{gt: 1, lt: 4}` for a number between 1 and 4).\n**isJSON(str)**                         | check if the string is valid JSON (note: uses JSON.parse).\n**isLatLong(str)**                      | check if the string is a valid latitude-longitude coordinate in the format `lat,long` or `lat, long`.\n**isLength(str, options)**              | check if the string's length falls in a range.<br/><br/>`options` is an object which defaults to `{min:0, max: undefined}`. Note: this function takes into account surrogate pairs.\n**isLowercase(str)**                    | check if the string is lowercase.\n**isMACAddress(str)**                   | check if the string is a MAC address.\n**isMD5(str)**                          | check if the string is a MD5 hash.\n**isMobilePhone(str, locale)**          | check if the string is a mobile phone number,<br/><br/>(locale is one of `['ar-AE', 'ar-DZ','ar-EG', 'ar-JO', 'ar-SA', 'ar-SY', 'cs-CZ', 'de-DE', 'da-DK', 'el-GR', 'en-AU', 'en-CA', 'en-GB', 'en-HK', 'en-IN',  'en-KE', 'en-NG', 'en-NZ', 'en-RW', 'en-UG', 'en-US', 'en-TZ', 'en-ZA', 'en-ZM', 'en-PK', 'es-ES', 'et-EE', 'fa-IR', 'fi-FI', 'fr-FR', 'he-IL', 'hu-HU', 'it-IT', 'ja-JP', 'ko-KR', 'lt-LT', 'ms-MY', 'nb-NO', 'nn-NO', 'pl-PL', 'pt-PT', 'ro-RO', 'ru-RU', 'sk-SK', 'sr-RS', 'tr-TR', 'uk-UA', 'vi-VN', 'zh-CN', 'zh-HK', 'zh-TW']` OR 'any'. If 'any' is used, function will check if any of the locales match).\n**isMongoId(str)**                      | check if the string is a valid hex-encoded representation of a [MongoDB ObjectId][mongoid].\n**isMultibyte(str)**                    | check if the string contains one or more multibyte chars.\n**isNumeric(str)**                      | check if the string contains only numbers.\n**isPort(str)**                         | check if the string is a valid port number.\n**isPostalCode(str, locale)**           | check if the string is a postal code,<br/><br/>(locale is one of `[ 'AT', 'AU', 'BE', 'CA', 'CH', 'CZ', 'DE', 'DK', 'DZ', 'ES', 'FI', 'FR', 'GB', 'GR', 'IL', 'IN', 'IS', 'IT', 'JP', 'KE', 'LI', 'MX', 'NL', 'NO', 'PL', 'PT', 'RO', 'RU', 'SA', 'SE', 'TW', 'US', 'ZA', 'ZM' ]` OR 'any'. If 'any' is used, function will check if any of the locals match).\n**isSurrogatePair(str)**                | check if the string contains any surrogate pairs chars.\n**isURL(str [, options])**              | check if the string is an URL.<br/><br/>`options` is an object which defaults to `{ protocols: ['http','https','ftp'], require_tld: true, require_protocol: false, require_host: true, require_valid_protocol: true, allow_underscores: false, host_whitelist: false, host_blacklist: false, allow_trailing_dot: false, allow_protocol_relative_urls: false }`.\n**isUUID(str [, version])**             | check if the string is a UUID (version 3, 4 or 5).\n**isUppercase(str)**                    | check if the string is uppercase.\n**isVariableWidth(str)**                | check if the string contains a mixture of full and half-width chars.\n**isWhitelisted(str, chars)**           | checks characters if they appear in the whitelist.\n**matches(str, pattern [, modifiers])** | check if string matches the pattern.<br/><br/>Either `matches('foo', /foo/i)` or `matches('foo', 'foo', 'i')`.\n\n## Sanitizers\n\nHere is a list of the sanitizers currently available.\n\nSanitizer                              | Description\n-------------------------------------- | -------------------------------\n**blacklist(input, chars)**            | remove characters that appear in the blacklist. The characters are used in a RegExp and so you will need to escape some chars, e.g. `blacklist(input, '\\\\[\\\\]')`.\n**escape(input)**                      | replace `<`, `>`, `&`, `'`, `\"` and `/` with HTML entities.\n**unescape(input)**                    | replaces HTML encoded entities with `<`, `>`, `&`, `'`, `\"` and `/`.\n**ltrim(input [, chars])**             | trim characters from the left-side of the input.\n**normalizeEmail(email [, options])**  | canonicalizes an email address. (This doesn't validate that the input is an email, if you want to validate the email use isEmail beforehand)<br/><br/>`options` is an object with the following keys and default values:<br/><ul><li>*all_lowercase: true* - Transforms the local part (before the @ symbol) of all email addresses to lowercase. Please note that this may violate RFC 5321, which gives providers the possibility to treat the local part of email addresses in a case sensitive way (although in practice most - yet not all - providers don't). The domain part of the email address is always lowercased, as it's case insensitive per RFC 1035.</li><li>*gmail_lowercase: true* - GMail addresses are known to be case-insensitive, so this switch allows lowercasing them even when *all_lowercase* is set to false. Please note that when *all_lowercase* is true, GMail addresses are lowercased regardless of the value of this setting.</li><li>*gmail_remove_dots: true*: Removes dots from the local part of the email address, as GMail ignores them (e.g. \"john.doe\" and \"johndoe\" are considered equal).</li><li>*gmail_remove_subaddress: true*: Normalizes addresses by removing \"sub-addresses\", which is the part following a \"+\" sign (e.g. \"foo+bar@gmail.com\" becomes \"foo@gmail.com\").</li><li>*gmail_convert_googlemaildotcom: true*: Converts addresses with domain @googlemail.com to @gmail.com, as they're equivalent.</li><li>*outlookdotcom_lowercase: true* - Outlook.com addresses (including Windows Live and Hotmail) are known to be case-insensitive, so this switch allows lowercasing them even when *all_lowercase* is set to false. Please note that when *all_lowercase* is true, Outlook.com addresses are lowercased regardless of the value of this setting.</li><li>*outlookdotcom_remove_subaddress: true*: Normalizes addresses by removing \"sub-addresses\", which is the part following a \"+\" sign (e.g. \"foo+bar@outlook.com\" becomes \"foo@outlook.com\").</li><li>*yahoo_lowercase: true* - Yahoo Mail addresses are known to be case-insensitive, so this switch allows lowercasing them even when *all_lowercase* is set to false. Please note that when *all_lowercase* is true, Yahoo Mail addresses are lowercased regardless of the value of this setting.</li><li>*yahoo_remove_subaddress: true*: Normalizes addresses by removing \"sub-addresses\", which is the part following a \"-\" sign (e.g. \"foo-bar@yahoo.com\" becomes \"foo@yahoo.com\").</li><li>*icloud_lowercase: true* - iCloud addresses (including MobileMe) are known to be case-insensitive, so this switch allows lowercasing them even when *all_lowercase* is set to false. Please note that when *all_lowercase* is true, iCloud addresses are lowercased regardless of the value of this setting.</li><li>*icloud_remove_subaddress: true*: Normalizes addresses by removing \"sub-addresses\", which is the part following a \"+\" sign (e.g. \"foo+bar@icloud.com\" becomes \"foo@icloud.com\").</li></ul>\n**rtrim(input [, chars])**             | trim characters from the right-side of the input.\n**stripLow(input [, keep_new_lines])** | remove characters with a numerical value < 32 and 127, mostly control characters. If `keep_new_lines` is `true`, newline characters are preserved (`\\n` and `\\r`, hex `0xA` and `0xD`). Unicode-safe in JavaScript.\n**toBoolean(input [, strict])**        | convert the input string to a boolean. Everything except for `'0'`, `'false'` and `''` returns `true`. In strict mode only `'1'` and `'true'` return `true`.\n**toDate(input)**                      | convert the input string to a date, or `null` if the input is not a date.\n**toFloat(input)**                     | convert the input string to a float, or `NaN` if the input is not a float.\n**toInt(input [, radix])**             | convert the input string to an integer, or `NaN` if the input is not an integer.\n**trim(input [, chars])**              | trim characters (whitespace by default) from both sides of the input.\n**whitelist(input, chars)**            | remove characters that do not appear in the whitelist. The characters are used in a RegExp and so you will need to escape some chars, e.g. `whitelist(input, '\\\\[\\\\]')`.\n\n### XSS Sanitization\n\nXSS sanitization was removed from the library in [2d5d6999](https://github.com/chriso/validator.js/commit/2d5d6999541add350fb396ef02dc42ca3215049e).\n\nFor an alternative, have a look at Yahoo's [xss-filters library](https://github.com/yahoo/xss-filters) or at [DOMPurify](https://github.com/cure53/DOMPurify).\n\n## Contributing\n\nIn general, we follow the \"fork-and-pull\" Git workflow.\n\n1. Fork the repo on GitHub\n2. Clone the project to your own machine\n3. Work on your fork\n    1. Make your changes and additions\n    2. Change or add tests if needed\n    3. Run tests and make sure they pass\n    4. Add changes to README.md if needed\n4. Commit changes to your own branch\n5. **Make sure** you merge the latest from \"upstream\" and resolve conflicts if there is any\n6. Push your work back up to your fork\n7. Submit a Pull request so that we can review your changes\n\n## Tests\n\nTests are using mocha, to run the tests use:\n\n```sh\n$ npm test\n```\n\n## Reading\n\nRemember, validating can be troublesome sometimes. See [A list of articles about programming assumptions commonly made that aren't true](https://github.com/jameslk/awesome-falsehoods).\n\n## License (MIT)\n\n```\nCopyright (c) 2017 Chris O'Hara <cohara87@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n[downloads-image]: http://img.shields.io/npm/dm/validator.svg\n\n[npm-url]: https://npmjs.org/package/validator\n[npm-image]: http://img.shields.io/npm/v/validator.svg\n\n[travis-url]: https://travis-ci.org/chriso/validator.js\n[travis-image]: http://img.shields.io/travis/chriso/validator.js.svg\n\n[amd]: http://requirejs.org/docs/whyamd.html\n[bower]: http://bower.io/\n\n[mongoid]: http://docs.mongodb.org/manual/reference/object-id/\n[ISIN]: https://en.wikipedia.org/wiki/International_Securities_Identification_Number\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/chriso/validator.js.git"
  },
  "scripts": {
    "build": "npm run build:browser && npm run build:node",
    "build:browser": "babel-node build-browser && npm run minify",
    "build:node": "babel src -d . --presets es2015 --plugins add-module-exports",
    "clean": "npm run clean:node && npm run clean:browser",
    "clean:browser": "rm -rf validator*.js",
    "clean:node": "rm -rf index.js lib",
    "lint": "eslint src test",
    "lint:fix": "eslint --fix src test",
    "minify": "uglifyjs validator.js -o validator.min.js  --compress --mangle --comments /Copyright/",
    "pretest": "npm run lint && npm run build",
    "test": "mocha --reporter spec"
  },
  "version": "9.1.2"
}
