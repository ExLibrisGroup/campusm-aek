{
  "_args": [
    [
      {
        "raw": "webpack-dev-middleware@^1.2.0",
        "scope": null,
        "escapedName": "webpack-dev-middleware",
        "name": "webpack-dev-middleware",
        "rawSpec": "^1.2.0",
        "spec": ">=1.2.0 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\paytonp\\Projects\\NA campusM Tiles\\ibeacon-triggered-survey\\node_modules\\@ombiel\\aek-buildtools"
    ]
  ],
  "_from": "webpack-dev-middleware@>=1.2.0 <2.0.0",
  "_id": "webpack-dev-middleware@1.12.2",
  "_inCache": true,
  "_location": "/webpack-dev-middleware",
  "_nodeVersion": "9.2.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/webpack-dev-middleware-1.12.2.tgz_1511791596311_0.6842846956569701"
  },
  "_npmUser": {
    "name": "shellscape",
    "email": "andrew@shellscape.org"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {
    "errno": "0.1.4",
    "readable-stream": "2.3.3"
  },
  "_requested": {
    "raw": "webpack-dev-middleware@^1.2.0",
    "scope": null,
    "escapedName": "webpack-dev-middleware",
    "name": "webpack-dev-middleware",
    "rawSpec": "^1.2.0",
    "spec": ">=1.2.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@ombiel/aek-buildtools"
  ],
  "_resolved": "https://registry.npmjs.org/webpack-dev-middleware/-/webpack-dev-middleware-1.12.2.tgz",
  "_shasum": "f8fc1120ce3b4fc5680ceecb43d777966b21105e",
  "_shrinkwrap": null,
  "_spec": "webpack-dev-middleware@^1.2.0",
  "_where": "C:\\Users\\paytonp\\Projects\\NA campusM Tiles\\ibeacon-triggered-survey\\node_modules\\@ombiel\\aek-buildtools",
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "bugs": {
    "url": "https://github.com/webpack/webpack-dev-middleware/issues"
  },
  "dependencies": {
    "memory-fs": "~0.4.1",
    "mime": "^1.5.0",
    "path-is-absolute": "^1.0.0",
    "range-parser": "^1.0.3",
    "time-stamp": "^2.0.0"
  },
  "description": "Offers a dev middleware for webpack, which arguments a live bundle to a directory",
  "devDependencies": {
    "codecov.io": "^0.1.6",
    "eslint": "^4.0.0",
    "express": "^4.14.0",
    "file-loader": "^0.11.2",
    "istanbul": "^0.4.5",
    "mocha": "^3.0.2",
    "mocha-sinon": "^2.0.0",
    "should": "^11.1.0",
    "sinon": "^2.3.8",
    "supertest": "^3.0.0",
    "webpack": "^3.0.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-FCrqPy1yy/sN6U/SaEZcHKRXGlqU0DUaEBL45jkUYoB8foVb6wCnbIJ1HKIx+qUFTW+3JpVcCJCxZ8VATL4e+A==",
    "shasum": "f8fc1120ce3b4fc5680ceecb43d777966b21105e",
    "tarball": "https://registry.npmjs.org/webpack-dev-middleware/-/webpack-dev-middleware-1.12.2.tgz"
  },
  "engines": {
    "node": ">=0.6"
  },
  "files": [
    "middleware.js",
    "lib/"
  ],
  "gitHead": "8db879404f523f11f2902b1365a3ffaf6166f6a9",
  "homepage": "http://github.com/webpack/webpack-dev-middleware",
  "license": "MIT",
  "main": "middleware.js",
  "maintainers": [
    {
      "name": "shellscape",
      "email": "andrew@shellscape.org"
    },
    {
      "name": "spacek33z",
      "email": "kees@webduck.nl"
    },
    {
      "name": "jhnns",
      "email": "mail@johannesewald.de"
    },
    {
      "name": "sokra",
      "email": "tobias.koppers@googlemail.com"
    }
  ],
  "name": "webpack-dev-middleware",
  "optionalDependencies": {},
  "peerDependencies": {
    "webpack": "^1.0.0 || ^2.0.0 || ^3.0.0"
  },
  "readme": "[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![coverage][cover]][cover-url]\n[![chat][chat]][chat-url]\n\n<div align=\"center\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\"\n      src=\"https://webpack.js.org/assets/icon-square-big.svg\">\n  </a>\n  <h1>webpack Dev Middleware</h1>\n</div>\n\nIt's a simple wrapper middleware for webpack. It serves the files emitted from webpack over a connect server. This should be used for **development only**.\n\nIt has a few advantages over bundling it as files:\n\n* No files are written to disk, it handle the files in memory\n* If files changed in watch mode, the middleware no longer serves the old bundle, but delays requests until the compiling has finished. You don't have to wait before refreshing the page after a file modification.\n* I may add some specific optimization in future releases.\n\n<h2 align=\"center\">Install</h2>\n\n```\nnpm install webpack-dev-middleware --save-dev\n```\n\n<h2 align=\"center\">Usage</h2>\n\n``` javascript\nvar webpackMiddleware = require(\"webpack-dev-middleware\");\napp.use(webpackMiddleware(...));\n```\n\nExample usage:\n\n``` javascript\napp.use(webpackMiddleware(webpack({\n\t// webpack options\n\t// webpackMiddleware takes a Compiler object as first parameter\n\t// which is returned by webpack(...) without callback.\n\tentry: \"...\",\n\toutput: {\n\t\tpath: \"/\"\n\t\t// no real path is required, just pass \"/\"\n\t\t// but it will work with other paths too.\n\t}\n}), {\n\t// publicPath is required, whereas all other options are optional\n\n\tnoInfo: false,\n\t// display no info to console (only warnings and errors)\n\n\tquiet: false,\n\t// display nothing to the console\n\n\tlazy: true,\n\t// switch into lazy mode\n\t// that means no watching, but recompilation on every request\n\n\twatchOptions: {\n\t\taggregateTimeout: 300,\n\t\tpoll: true\n\t},\n\t// watch options (only lazy: false)\n\n\tpublicPath: \"/assets/\",\n\t// public path to bind the middleware to\n\t// use the same as in webpack\n\n\tindex: \"index.html\",\n\t// The index path for web server, defaults to \"index.html\".\n\t// If falsy (but not undefined), the server will not respond to requests to the root URL.\n\n\theaders: { \"X-Custom-Header\": \"yes\" },\n\t// custom headers\n\n\tmimeTypes: { \"text/html\": [ \"phtml\" ] },\n\t// Add custom mime/extension mappings\n\t// https://github.com/broofa/node-mime#mimedefine\n\t// https://github.com/webpack/webpack-dev-middleware/pull/150\n\n\tstats: {\n\t\tcolors: true\n\t},\n\t// options for formating the statistics\n\n\treporter: null,\n\t// Provide a custom reporter to change the way how logs are shown.\n\n\tserverSideRender: false,\n\t// Turn off the server-side rendering mode. See Server-Side Rendering part for more info.\n}));\n```\n\n## Advanced API\n\nThis part shows how you might interact with the middleware during runtime:\n\n* `close(callback)` - stop watching for file changes\n\t```js\n\tvar webpackDevMiddlewareInstance = webpackMiddleware(/* see example usage */);\n\tapp.use(webpackDevMiddlewareInstance);\n\t// After 10 seconds stop watching for file changes:\n\tsetTimeout(function(){\n\t  webpackDevMiddlewareInstance.close();\n\t}, 10000);\n\t```\n\n* `invalidate()` - recompile the bundle - e.g. after you changed the configuration\n\t```js\n\tvar compiler = webpack(/* see example usage */);\n\tvar webpackDevMiddlewareInstance = webpackMiddleware(compiler);\n\tapp.use(webpackDevMiddlewareInstance);\n\tsetTimeout(function(){\n\t  // After a short delay the configuration is changed\n\t  // in this example we will just add a banner plugin:\n\t  compiler.apply(new webpack.BannerPlugin('A new banner'));\n\t  // Recompile the bundle with the banner plugin:\n\t  webpackDevMiddlewareInstance.invalidate();\n\t}, 1000);\n\t```\n\n* `waitUntilValid(callback)` - executes the `callback` if the bundle is valid or after it is valid again:\n\t```js\n\tvar webpackDevMiddlewareInstance = webpackMiddleware(/* see example usage */);\n\tapp.use(webpackDevMiddlewareInstance);\n\twebpackDevMiddlewareInstance.waitUntilValid(function(){\n\t  console.log('Package is in a valid state');\n\t});\n\t```\n\n## Server-Side Rendering\n\n**Note: this feature is experimental and may be removed or changed completely in the future.**\n\nIn order to develop a server-side rendering application, we need access to the [`stats`](https://github.com/webpack/docs/wiki/node.js-api#stats), which is generated with the latest build.\n\nIn the server-side rendering mode, __webpack-dev-middleware__ sets the `stat` to `res.locals.webpackStats` before invoking the next middleware, allowing a developer to render the page body and manage the response to clients.\n\nNotice that requests for bundle files would still be responded by __webpack-dev-middleware__ and all requests will be pending until the building process is finished in the server-side rendering mode.\n\n```javascript\n// This function makes server rendering of asset references consistent with different webpack chunk/entry configurations\nfunction normalizeAssets(assets) {\n  return Array.isArray(assets) ? assets : [assets]\n}\n\napp.use(webpackMiddleware(compiler, { serverSideRender: true })\n\n// The following middleware would not be invoked until the latest build is finished.\napp.use((req, res) => {\n  \n  const assetsByChunkName = res.locals.webpackStats.toJson().assetsByChunkName\n  \n  // then use `assetsByChunkName` for server-sider rendering\n  // For example, if you have only one main chunk:\n\n\tres.send(`\n<html>\n  <head>\n    <title>My App</title>\n\t\t${\n\t\t\tnormalizeAssets(assetsByChunkName.main)\n\t\t\t.filter(path => path.endsWith('.css'))\n\t\t\t.map(path => `<link rel=\"stylesheet\" href=\"${path}\" />`)\n\t\t\t.join('\\n')\n\t\t}\n  </head>\n  <body>\n    <div id=\"root\"></div>\n\t\t${\n\t\t\tnormalizeAssets(assetsByChunkName.main)\n\t\t\t.filter(path => path.endsWith('.js'))\n\t\t\t.map(path => `<script src=\"${path}\"></script>`)\n\t\t\t.join('\\n')\n\t\t}\n  </body>\n</html>\t\t\n\t`)\n\n})\n```\n\n<h2 align=\"center\">Contributing</h2>\n\nDon't hesitate to create a pull request. Every contribution is appreciated. In development you can start the tests by calling `npm test`.\n\n<h2 align=\"center\">Maintainers</h2>\n\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\">\n        <img width=\"150 height=\"150\"\n        src=\"https://avatars.githubusercontent.com/SpaceK33z?v=3\">\n        <br />\n        <a href=\"https://github.com/SpaceK33z\">Kees Kluskens</a>\n      </td>\n    <tr>\n  <tbody>\n</table>\n\n\n<h2 align=\"center\">LICENSE</h2>\n\n#### [MIT](./LICENSE)\n\n[npm]: https://img.shields.io/npm/v/webpack-dev-middleware.svg\n[npm-url]: https://npmjs.com/package/webpack-dev-middleware\n\n[node]: https://img.shields.io/node/v/webpack-dev-middleware.svg\n[node-url]: https://nodejs.org\n\n[deps]: https://david-dm.org/webpack/webpack-dev-middleware.svg\n[deps-url]: https://david-dm.org/webpack/webpack-dev-middleware\n\n[tests]: http://img.shields.io/travis/webpack/webpack-dev-middleware.svg\n[tests-url]: https://travis-ci.org/webpack/webpack-dev-middleware\n\n[cover]: https://codecov.io/gh/webpack/webpack-dev-middleware/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack/webpack-dev-middleware\n\n[chat]: https://badges.gitter.im/webpack/webpack.svg\n[chat-url]: https://gitter.im/webpack/webpack\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webpack/webpack-dev-middleware.git"
  },
  "scripts": {
    "beautify": "npm run lint -- --fix",
    "cover": "istanbul cover node_modules/mocha/bin/_mocha",
    "lint": "eslint *.js lib test",
    "posttest": "npm run -s lint",
    "test": "mocha --full-trace --check-leaks",
    "travis": "npm run cover -- --report lcovonly && npm run lint"
  },
  "version": "1.12.2"
}
