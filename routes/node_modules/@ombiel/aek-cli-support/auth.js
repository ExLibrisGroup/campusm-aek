const request = require("request");
const inquirer = require("inquirer");
const _ = require("lodash");
const URL = require("url");
const npm = require("./npm");
const config = require("./config");
const utils = require("./utils");
const log = require("./logger");
const pkgOmbiel = require("./fstore")("./package.json", "ombiel");


function getStoredCreds() {
  return npm.get("username").then(function (username) {
    if (username) {
      return npm.get("omb_token")
      .then(function (token) {
        return {
          username: username,
          token: token
        };
      });
    }
    return Promise.reject();
  });
}

function authenticate(creds, fields) {

  const requestOptions = { form: _.clone(creds) };

  if (fields) {
    requestOptions.form.fields = fields;
  }

  return new Promise(function (resolve, reject) {

    const dc = utils.getDC(creds.username);
    let data;
    requestOptions.form.username = dc.username;

    request.post(`${dc.appManagerBase}/aek/auth/user-details`, requestOptions, function (err, res, body) {
      try {
        data = JSON.parse(body);
      }
      catch (e) { /*nothing*/ }

      if (data && data.token) {

        npm.command("set", ["@ombiel:registry", `${config.registry}/`])
        .then(function () {
          return npm.set("username", creds.username);
        })
        .then(function () {
          return npm.set("_password", Buffer.from(data.token).toString('base64'));
        })
        .then(function () {
          return npm.set("omb_token", data.token);
        })
        .then(function () {
          return npm.set("email", data.email);
        })
        .then(function () {
          return npm.set("always-auth", "true");
        })
        .then(function () {
          resolve(_.extend({}, data, { username: creds.username }));
        })
        .catch(function (err2) {
          reject(err2);
        });
      }

      else {
        if (!err) {
          err = Error((data && data.error) || "login failed");
        }
        reject(err);
      }
    });
  });
}

function loginPrompt(fields) {
  return new Promise(function (resolve, reject) {
    npm.get("username")
    .then(function (username) {
      const userQuestion = {
        name: "username",
        message: "username",
      };

      if (username) {
        userQuestion.default = username;
      }

      inquirer.prompt([
        userQuestion,
        {
          name: "password",
          message: "password",
          type: "password",
        },
      ], function (creds) {
        resolve(authenticate(creds, fields));
      });
    })
    .catch(function (e) {
      reject(e);
    });
  });
}

function renew(fields) {
  return getStoredCreds()
  .then(function (creds) {

    return authenticate(creds, fields);
  })
  .catch(function () {
    return loginPrompt(fields);
  });
}

function login(creds, fields) {
  if (creds && creds.username && creds.password) {
    return authenticate(creds, fields);
  }

  return renew(fields);

}



function logout() {
  return npm.delete("_password")
  .then(function () {
    return npm.delete("omb_token");
  })
  .then(function () {
    return npm.delete("username");
  })
  .then(function () {
    return npm.delete("email");
  })
  .then(function () {
    return npm.delete("always-auth");
  })
  .then(function () {
    const host = URL.parse(config.registry).host.replace(/:/gi, "_");
    npm.command("cache", ["clean", host]);
  });
}





let _userDetails = null;
function getUserDetails(creds) {
  return new Promise(function (resolve, reject) {
    if (_userDetails) {
      resolve(_userDetails);
    }
    else {
      login(creds, "apps")
      .then(function (userDetails) {
        _userDetails = userDetails;
        resolve(userDetails);
      })
      .catch(function (e) {
        reject(e);
      });
    }
  });
}

function getOptionHostnames(opts, data, defaultHost) {
  opts = _.clone(opts);
  return new Promise(function (resolve) {
    getUserDetails(data)
    .then(function (userDetails) {
      const apps = userDetails.apps;
      if (apps === "all") {
        try {
          const pkgHosts = pkgOmbiel.get("access.write.hosts");
          if (pkgHosts) {
            opts.choices = pkgHosts;
          }
          else {
            opts.default = defaultHost || "mycudev.ombiel.co.uk";
          }
        }
        catch (e) {
          opts.default = defaultHost || "mycudev.ombiel.co.uk";
        }
      }
      else {
        opts.choices = _.map(apps, "hostname");
      }
      resolve(opts);
    })
    .catch(function (e) {
      log.error(e);
    });
  });
}


module.exports = { login, renew, authenticate, logout, getUserDetails, getOptionHostnames, getStoredCreds };
