const spawn = require("cross-spawn");
const _ = require("lodash");
const npm = require("npm");
const which = require("npm-which")(__dirname);
const npmBin = which.sync("npm");
const Utils = require("./utils");
const config = require("./config");

const registryBase = `${config.registry.replace(/^https?:\/\//,"//")}/:`;

function command(commandName,options = [],stdio = "inherit",spawnOpts = {}) {
  return new Promise(function(resolve,reject) {

    let args = _.isArray(options) ? options : Utils.obj2Args(options);
    args = [commandName].concat(args);
    spawnOpts = _.extend({stdio: stdio},spawnOpts);
    const child = spawn(npmBin,args,spawnOpts);

    let out = "";
    let err = "";

    if (stdio === "pipe") {

      child.stdout.on("data",function(data) {
        out += data.toString();
      });
      child.stderr.on("data",function(data) {
        err += data.toString();
      });
    }
    child.on("close",function(exitCode) {
      if (stdio === "inherit") {
        if (exitCode === 0) {
          resolve(out);
        }
        else {
          reject(exitCode);
        }
      }
      else if (err) {
        reject(err.trim());
      }
      else {
        resolve(out.trim());
      }
    });
  });
}

function api(commandName,args,...additional) {
  return new Promise(function(resolve,reject) {
    npm.load([],function() {
      npm.commands[commandName](args,...additional,function(err,...responseArgs) {
        if (err) {
          reject(err);
        }
        else {
          resolve(...responseArgs);
        }
      });
    });
  });
}

function view(packageName) {
  const args = packageName ? [packageName] : [];
  return api("view",args,true)
  .then(function(data) {
    return _.values((data == null) ? {} : data)[0];
  })
  .catch(function() {
    return false;
  });
}

function npmGet(key) {
  return new Promise(function(resolve,reject) {
    command("get",[registryBase + key],"pipe")
    .then(function(val) {
      if (val === "undefined") {
        val = undefined;
      }
      resolve(val);
    })
    .catch(function(e) {
      reject(e);
    });
  });
}

function npmSet(key,value) {
  return command("set",[registryBase + key,value]);
}

function npmDelete(key) {
  return command("config",["delete",registryBase + key]);
}

module.exports = {command,api,view,get: npmGet,set: npmSet, delete: npmDelete};
