const Path = require("path");

const fs = require("fs-extra");
const glob = require("glob");

const {template,forEach,snakeCase} = require("lodash");


function plate(tmplt,props) {

  const compiled = template(tmplt,{
    // evaluate: /\{\{(.+?)\}\}/g,
    escape: /\{\{\{(.+?)\}\}\}/g,
    interpolate: /\{\{(.+?)\}\}/g
  });

  return compiled(props);

}

function copyFile(srcFilePath,srcDirPath,destDirPath,props) {
  let destFilePath = srcFilePath;
  forEach(props,(value,key)=>{
    destFilePath = destFilePath.replace(new RegExp(`__${snakeCase(key)}__`,"g"),value);
  });
  return fs.readFile(Path.resolve(srcDirPath,srcFilePath))
  .then((content)=>{
    return plate(content.toString(),props);
  })
  .then((content)=>{

    const fullDestPath = Path.resolve(destDirPath,destFilePath);

    return fs.ensureFile(fullDestPath)
    .then(()=>{
      return fs.writeFile(fullDestPath,content)
      .then(()=>{
        return destFilePath;
      });
    });
  });
}

module.exports = function templater(srcPath,destPath,props = {}) {
  srcPath = Path.resolve(srcPath);
  destPath = Path.resolve(destPath);


  return new Promise((resolve,reject)=>{
    glob("**/*.*",{cwd: srcPath},(err,files)=>{
      if (err) { reject(err); }
      else { resolve(files); }
    });
  })
  .then((files)=>{
    return Promise.all(files.map((path)=>{
      return copyFile(path,srcPath,destPath,props);
    }));
  });
};
