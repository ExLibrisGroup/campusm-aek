const _ = require("lodash");
const prompt = require("cli-prompt");
const config = require("./config");
const Path = require("path");
const fs = require("fs-extra");


function obj2Args(obj) {
  const out = [];
  _.forEach(obj,(val,key)=>{
    out.push(`--${key}`);
    out.push(val);
  });

  return out;
}

function getDC(username) {
  const userSplit = username.split("::");
  const dc = {};

  if (userSplit.length > 1) {
    dc.code = userSplit[0];
    dc.username = userSplit[1];
  }
  else {
    dc.code = "eu";
    dc.username = username;
  }

  dc.appManagerBase = config.appManagerBases[dc.code];

  return dc;
}

function runPromise(func,...args) {
  if (_.isFunction(func)) {
    return new Promise(function(resolve) {
      let async = false;
      const result = func.apply({
        async: function() {
          async = true;
          return resolve;
        }
      },args);
      if (!async) {
        resolve(result);
      }
    });
  }

  return Promise.resolve(func);

}

function firstResolved(fns = []) {
  let prevPromise = Promise.reject();
  const sequenced = fns.map((fn)=>{
    prevPromise = prevPromise.catch(()=>{
      return fn();
    });
    return prevPromise;
  });
  return Promise.race(sequenced);
}

function firstExistingPath(paths = []) {
  return firstResolved(paths.map((path)=>{
    return function() {
      return fs.pathExists(Path.resolve(path))
      .then((exists)=>{
        if (!exists) { return Promise.reject(); }
        return path;
      });
    };
  }));
}

function getLocalPackage() {
  return fs.readJson(Path.resolve("./package.json"));
}




module.exports = {obj2Args,getDC,runPromise,prompt,firstExistingPath,getLocalPackage};
