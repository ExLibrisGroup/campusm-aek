const spawn = require("cross-spawn");
const fs = require("fs-extra");
const Path = require("path");
const _ = require("lodash");
const which = require("npm-which")(__dirname);

const Utils = require("./utils");

const yarnBin = which.sync("yarn");


const command = function(commandName,options = [],stdio = "inherit", spawnOpts = {}) {

  return new Promise(function(resolve,reject) {

    let args = _.isArray(options) ? options : Utils.obj2Args(options);
    args = [commandName].concat(args);

    spawnOpts = _.extend({stdio: stdio},spawnOpts);

    const child = spawn(yarnBin,args,spawnOpts);

    let out;
    let err;

    if (stdio === "pipe") {
      out = "";
      err = "";
      child.stdout.on("data",function(data) {
        out += data.toString();
      });
      child.stderr.on("data",function(data) {
        err += data.toString();
      });
    }
    return child.on("close",function(exitCode) {
      if (stdio === "inherit") {
        if (exitCode === 0) {
          return resolve(out);
        }

        return reject(exitCode);

      }
      if (err) {
        return reject(err.trim());
      }

      return resolve(out.trim());

    });
  });
};

const api = function(commandName,options = []) {
  const args = _.isArray(options) ? options : Utils.obj2Args(options);
  args.push("--json");
  return command(commandName,args,"pipe")
  .then((out)=>{
    return out.split("\n").map(JSON.parse);
  })
  .catch((err)=>{
    if (_.isString(err)) {
      let errMessage = err;
      try {
        errMessage = _.find(err.split("\n").map(JSON.parse),{type: "error"}).data;
      }
      catch (e) {} //eslint-disable-line no-empty
      throw Error(errMessage);
    }
    throw err;
  });
};

api.inspectAll = function(commandName,options = []) {
  return api(commandName,options)
  .then((out)=>{
    return _.filter(out,{type: "inspect"}).map((item)=>{
      return item.data;
    });
  });
};

api.inspect = function(commandName,options = []) {
  return api.inspectAll(commandName,options)
  .then((out)=>{
    return out && out[0];
  });
};


const info = function(packageName) {
  const args = (packageName && [packageName]) || [];
  return api.inspect("info",args);
};

const version = function(newVersion) {
  if (!newVersion) {
    return fs.readFile(Path.resolve("./package.json"))
    .then((content)=>{
      return JSON.parse(content).version;
    });
  }
  return api("version",["--new-version",newVersion])
  .then((data)=>{
    let v;
    data.forEach((item)=>{
      if (item.data) {
        const match = item.data.match(/new version: (.+)/i);
        if (match && match[1]) {
          v = match[1];
        }
      }
    });
    return v;
  });
};

module.exports = {command,api,info,version};
