"use strict";

var thru = require("through2").obj;
var less = require("less");
var chalk = require("chalk");
var less2stylus = require("less2stylus");


// monkeyPatch les2stylus to ensure use of ":" in rules

var renderValue = less2stylus.renderValue;

less2stylus.treeVisitor.visitRule = function(node, options) {
  var name;
  options.visitDeeper = false;
  name = node.name;
  if (name[0] === '@') {
    return this.p("" + (name.slice(1)) + " = " + (renderValue(node.value)));
  } else {
    return this.p("" + name + ": " + (renderValue(node.value)) + node.important);
  }
};

// convert less to stylus
module.exports = function() {
  return thru(function(file,enc,cb) {
    var stream = this;
    var parser = new less.Parser({filename:file.path});
    parser.parse(file.contents.toString(),function(err,node) {
      if(err) {
        console.log(chalk.red("less2stylus (error):"),file.relative);
        console.log(err);
      }
      else {
        // nasty hack to hijack console.log from less2Stylus
        var origLog = console.log;
        var styl = "";
        console.log = function() {
          styl += Array.prototype.join.call(arguments," ") + "\n";
        };

        less2stylus.renderPrelude();
        less2stylus.renderTree(node);

        // undo nasty hack and return console.log to original state
        console.log = origLog;

        file.contents = new Buffer(styl);

        // change file extension
        var pathSplit = file.path.split(".");
        pathSplit[pathSplit.length-1] = "styl";
        file.path = pathSplit.join(".");

        stream.push(file);
        console.log(chalk.green("less2stylus:"),file.relative);
        console.log(chalk.grey(file.path));
      }

      cb();
    });
  });
};
