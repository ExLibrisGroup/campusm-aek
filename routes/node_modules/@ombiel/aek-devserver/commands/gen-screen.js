const Path = require("path");

const {kebabCase,map,intersection,get,merge,find,set} = require("lodash");
const glob = require("glob");
const fs = require("fs-extra");
const chalk = require("chalk");
const YAWN = require('yawn-yaml/cjs');

const log = require("@ombiel/aek-cli-support/logger");
const templater = require("@ombiel/aek-cli-support/templater");


module.exports = {
  name: "gen:screen",
  help: "Create a new screen in your AEK project",
  nolist: true,
  options: [
    {
      name: "desc",
      default: "My New Screen",
      required: true,
      promptIfMissing: true,
      message: "Please provide a title for your screen",
    },
    {
      name: "screenName",
      default: (data)=>kebabCase(get(data,"desc","my-new-screen")),
      required: true,
      promptIfMissing: true,
      validate: (input)=>{
        return input.match(/^[a-z0-9-]+$/) ? true : "Screen names may only contain lowercase alphanumerics and hyphens";
      },
      message: "Please provide a name for your screen",
    },
    {
      name: "template",
      default: "standard",
      required: true,
      promptIfMissing: true,
      choices: ()=>{
        const entryPoints = map(glob.sync("src/client/*.js"),(f)=>Path.basename(f,Path.extname(f)));
        const screens = map(glob.sync("src/server/*.ect"),(f)=>Path.basename(f,Path.extname(f)));
        const cloneable = intersection(entryPoints,screens);
        return ["basic","simplestore"].concat(cloneable.map(n=>`clone:${n}`));
      },
      message: "Please choose a template for your new screen",
    }

  ],

  callback: (options)=>{

    const {desc,screenName} = options;
    const template = get(options,"template","standard");
    const templateSplit = template.split(":");
    const cloneName = templateSplit[1];

    const runserverYamlPath = Path.resolve("./runserver.yaml");

    const modRunserver = fs.readFile(runserverYamlPath)
    .catch(()=>{
      return [
        'homepage:',
        '  menu:',
        '    replace:',
        '      - desc: "##Example"',
        '        screenName: example',
      ].join("\n");
    })
    .then((origYaml)=>{
      const yawn = new YAWN(origYaml.toString());
      const json = yawn.json || {};
      const target = get(json,"homepage.menu.replace",get(json,"homepage.menu.append"));
      let newTile = {
        desc,
        screenName,
      };
      if (cloneName && target) {
        newTile = merge({},find(target,{screenName: cloneName}),newTile);
      }
      if (target) {

        target.push(newTile);

        target.forEach((tile,i)=>{
          if (tile.desc === "##Example" && tile.screenName === "example") {
            delete target[i];
          }
        });
      }
      else {
        set(json,"homepage.menu.replace",[newTile]);
      }
      yawn.json = json;
      return fs.writeFile(runserverYamlPath,yawn.yaml)
      .then(()=>{
        log.info(`${chalk.cyan("Modified")} ${chalk.magenta("runserver.yaml")}`);
      });
    });

    if (cloneName) {

      const localSrcAssetsPath = `src/client/${cloneName}`;
      const localTargetAssetsPath = `src/client/${screenName}`;

      const srcAssetsPath = Path.resolve(localSrcAssetsPath);
      const targetAssetsPath = Path.resolve(localTargetAssetsPath);

      const copyAssets = fs.pathExists(srcAssetsPath)
      .then((exists)=>{
        if (exists) {
          return fs.ensureDir(targetAssetsPath)
          .then(()=>{
            return fs.copy(srcAssetsPath,targetAssetsPath)
            .then(()=>{
              log.info(`${chalk.cyan("Copied")} ${chalk.blue(localSrcAssetsPath)} to ${chalk.green(localTargetAssetsPath)}`);
            });
          });
        }
        return true;
      });


      const localSrcJsPath = `src/client/${cloneName}.js`;
      const localTargetJsPath = `src/client/${screenName}.js`;

      const srcJsPath = Path.resolve(localSrcJsPath);
      const targetJsPath = Path.resolve(localTargetJsPath);

      const copyJs = fs.readFile(srcJsPath)
      .then((src)=>{
        const newSrc = src.toString().split(`./${cloneName}/`).join(`./${screenName}/`);
        return fs.writeFile(targetJsPath,newSrc)
        .then(()=>{
          log.info(`${chalk.cyan("Copied")} ${chalk.blue(localSrcJsPath)} to ${chalk.green(localTargetJsPath)}`);
        });
      });

      const localSrcEctPath = `src/server/${cloneName}.ect`;
      const localTargetEctPath = `src/server/${screenName}.ect`;

      const srcEctPath = Path.resolve(localSrcEctPath);
      const targetEctPath = Path.resolve(localTargetEctPath);

      const copyEct = fs.readFile(srcEctPath)
      .then((src)=>{
        const newSrc = src.toString().replace(/scripts\w*:\w*\[[\s\S]*\]/,(scripts)=>{
          return scripts.replace(`"${cloneName}"`,`"${screenName}"`);
        });
        return fs.writeFile(targetEctPath,newSrc)
        .then(()=>{
          log.info(`${chalk.cyan("Copied")} ${chalk.blue(localSrcEctPath)} to ${chalk.green(localTargetEctPath)}`);
        });
      });

      return Promise.all([
        modRunserver,
        copyAssets,
        copyJs,
        copyEct,
      ]);

    }


    const templatePath = Path.resolve(__dirname,`../templates/screens/${template}`);
    const copyTemplate = templater(templatePath,"./src",options)
    .then((files)=>{
      files.forEach((file)=>{
        log.info(`${chalk.blue("Created")} ${chalk.green(file)}`);
      });
    });

    return Promise.all([
      modRunserver,
      copyTemplate,
    ]);

  }
};
