const Path = require("path");
const fs = require("fs-extra");
const _ = require("lodash");
const gift = require("gift");

const log = require("@ombiel/aek-cli-support/logger");
const {FriendlyError,printNiceError} = require("@ombiel/aek-cli-support/nice-error");
const yarn = require("@ombiel/aek-cli-support/yarn");
const npm = require("@ombiel/aek-cli-support/npm");
const {getUserDetails} = require("@ombiel/aek-cli-support/auth");

const {getLocalPackage} = require("@ombiel/aek-cli-support/utils");
const build = require("../modules/build");




function getValidVersion(opts = {}) {

  return getLocalPackage()
  .then(({version})=>{

    return npm.view().then((remotePkg)=>{
      const remoteVersions = _.get(remotePkg,"versions");
      if (remoteVersions && _.includes(remoteVersions,version)) {
        log.warn(`Version ${version} already exists in the registry. Please change the version number before deployment`);
        const latestVersion = _.get(remotePkg,["dist-tags","latest"]);
        if (latestVersion) {
          log.info(`Latest version in registry is ${latestVersion}`);
        }
        return yarn.command("version",["--no-git-tag-version"]).then(()=>{ return getValidVersion(opts); });
      }
      return version;
    });
  });
}

function getCleanGitRepo() {

  return fs.pathExists(Path.resolve("./.git"))
  .then((exists)=>{
    if (!exists) {
      log.info("no git repo detected");
      return false;
    }

    log.info("git repo detected");
    const repo = gift("./");

    return new Promise((resolve,reject)=>{
      repo.status((err,status)=>{
        if (err) {
          reject(err);
          return;
        }
        if (status && !status.clean) {
          reject(FriendlyError("git repo is not clean, please commit any changes before deploying"));
          return;
        }
        log.info("git repo is clean");
        resolve(repo);
      });
    });

  });

}

module.exports = {
  name: "prerelease",
  help: "Standard AEK prerelease script, checks for version conflict and then builds project",

  options: [],

  callback: (/*options*/)=>{

    return getUserDetails().then(()=>{
      return getCleanGitRepo().then((repo)=>{
        return getValidVersion().then((version)=>{

          return build()
          .then(()=>{

            if (!repo) {
              return Promise.resolve();
            }

            return new Promise((resolve)=>{
              log.info("Comitting changes to git repo...");
              repo.add("./",(addErr)=>{

                if (addErr) {
                  log.warn("Unable to stage changes in git repo");
                  // log.warn(addErr);
                  resolve(false);
                  return;
                }

                // repo.status((statusErr,postStatus)=>{
                //   if (statusErr) {
                //     log.warn("Unable to stage changes in git repo");
                //     log.warn(statusErr);
                //     resolve(false);
                //     return;
                //   }
                //
                //   if (postStatus && postStatus.clean) {

                repo.commit(version,(commitErr)=>{

                  if (commitErr) {
                    log.warn("Unable to commit changes in git repo");
                    resolve(false);
                    return;
                  }

                  repo.create_tag(`v${version}`,(tagErr)=>{
                    if (tagErr) {
                      log.warn("Unable to add version tag in git repo");
                      resolve(false);
                      return;
                    }
                    resolve(true);
                  });

                });

                // return;
                //   }
                //
                //   log.warn("Unable to commit changes in git repo");
                //   log.warn(postStatus);
                //   resolve(false);
                //
                // });
              });

            });

          });
        });
      });
    })
    .catch((err)=>{
      printNiceError(err);
      process.exit(1);
    });
  }
};
