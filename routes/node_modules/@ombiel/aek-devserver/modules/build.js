const Path = require("path");
const fs = require("fs-extra");
const glob = require("glob");

const webpack = require("webpack");
const getWebpackConfig = require("webpack-cli/bin/convert-argv");

const {buildScreens: _buildScreens} = require("./screen-builder");


// legacy - copy screens from "./screens";
function copyScreens(screenDestination) {
  return new Promise((resolve,reject)=>{
    glob("/*.twig",{root: Path.resolve("./screens")},(err,files)=>{

      if (err) {
        reject(err);
        return;
      }

      if (!files) {
        resolve();
        return;
      }

      resolve(Promise.all(files.map((file)=>{
        const baseName = Path.basename(file);
        return fs.copy(file,Path.resolve(screenDestination,baseName));
      })));

    });
  });

}

function buildScreens(screenSource,screenDestination) {
  const opts = {
    srcBase: screenSource,
    dest: screenDestination,
    env: "prod",
  };
  return _buildScreens(opts);
}

function buildAssets(source,destination) {

  process.env.AEK_WEBPACK_SRC_BASE = source;

  return Promise.resolve()
  .then(()=>{
    return getWebpackConfig({_: []});
  })
  .then((config)=>{
    config.output.path = destination;
    return new Promise((resolve,reject)=>{
      webpack(config,(err,stats)=>{
        if (stats) {
          console.log(stats.toString(config.stats)); //eslint-disable-line no-console
        }
        if (err) {
          reject(err);
        }
        else {
          resolve();
        }
      });
    });
  });
}

const buildDefaults = {
  source: "./src",
  destination: "./.build",
};

module.exports = function({source,destination} = buildDefaults) {

  const screenSource = Path.resolve(source,"server");
  const publicSource = Path.resolve(source,"client");
  const screenDestination = Path.resolve(destination,"screens");
  const publicDestination = Path.resolve(destination,"public");

  process.env.NODE_ENV = "production";

  return Promise.all([
    copyScreens(screenDestination),
    buildScreens(screenSource,screenDestination),
    buildAssets(publicSource,publicDestination),
  ]);

};
