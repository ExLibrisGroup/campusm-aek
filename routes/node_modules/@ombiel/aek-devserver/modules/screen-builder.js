/* global escape */
var _ = require("lodash");
var glob = require("glob");
var path = require("path");
var ect = require("ect");
var fs = require("fs-extra");
var Ansi2Html = require('ansi-to-html');
var ansi2Html = new Ansi2Html({fg: "#000000",bg: "#ffffff",newline: true});
var entities = require("entities");


var defaultLocals = {
  twigify: function(v) {
    if (_.isNumber(v)) {
      return v;
    }

    return `"${v.replace(/"/gi,'""')}"`;

  },
  bodyAttributes: "", // eslint-disable-line camelcase
  bodyDataAttributes: {}, // eslint-disable-line camelcase
  scripts: [],
  stylesheets: []

};

function transpile(options) {

  var env = options.env === "prod" ? "prod" : "dev";

  return new Promise((resolve)=>{

    glob("/*.ect",{root: options.srcBase},(err,files)=>{

      const screens = {};
      files.forEach(function(file) {
        var filename = path.basename(file);

        var locals = _.cloneDeep(defaultLocals);
        locals.env = env;
        locals._ = _;
        locals.configure = function(settings) {
          _.extend(locals,settings);
          // we must have connected version in prod so override it
          if (env === "prod") {
            locals.connected = true;
          }
        };
        locals.get_scripts = function() { // eslint-disable-line camelcase
          return locals.scripts.map(function(script) {
            return script[env] || script;
          });
        };
        locals.get_stylesheets = function() { // eslint-disable-line camelcase
          return locals.stylesheets.map(function(stylesheet) {
            return stylesheet[env] || stylesheet;
          });
        };
        locals.get_body_attributes = function() { // eslint-disable-line camelcase

          let bodyAttributes = locals.bodyAttributes;

          _.forEach((v,name)=>{
            const val = locals.bodyDataAttributes[name];
            if (_.isString(val) || _.isNumber(val)) {
              bodyAttributes += ` data-${name}="${entities.encodeXML(val)}" `; // eslint-disable-line camelcase
            }
            else {
              bodyAttributes += ` data-o-b-j-${name}="${entities.encodeXML(JSON.stringify(val))}" `; // eslint-disable-line camelcase
            }
          });

          return bodyAttributes;
        };

        locals.resolve = function(p) {
          return require.resolve(p);
        };

        if (options.locals) {
          locals = _.extend({},locals,options.locals);
        }

        var renderer = ect({ root: options.srcBase,open: "<<",close: ">>" });
        var screenName = path.basename(file,".ect");

        var content;
        try {
          content = renderer.render(filename, locals);
        }
        catch (e) {
          content = ansi2Html.toHtml(e.toString());
        }

        screens[screenName] = {
          name: screenName,
          content: content,
          offline: !locals.connected
        };
      });

      resolve(screens);
    });
  });
}


function buildScreens(opts) {

  return transpile(opts).then((screens)=>{

    if (!_.keys(screens).length) {
      return null;
    }

    return fs.ensureDir(path.resolve(opts.dest)).then(()=>{
      return Promise.all(_.keys(screens).map((screenName)=>{
        return fs.writeFile(path.resolve(opts.dest,`${screenName}.twig`),screens[screenName].content);
      }));

    });

  });
}

module.exports = {transpile,buildScreens};
