const crypto = require("crypto");
const fs = require("fs-extra");
const _ = require("lodash");

function getScreenHashes(screens) {
  return fs.readFile("./package.json")
  .then((pkgContent)=>{
    if (!pkgContent) {
      throw Error("No content in package.json");
    }
    try {
      pkgContent = JSON.parse(pkgContent);
    }
    catch (err) {
      throw Error("Failed to parse package.json");
    }

    let pkgName = pkgContent.name;

    if (!pkgName) {
      throw Error("Package has no name");
    }

    pkgName = pkgName.replace(/^@ombiel\//,"");

    const pkgData = {name: pkgName,version: pkgContent.version};

    _.values(screens).forEach((screen)=>{
      screen.path = `${pkgName}/${screen.name}`;
      const hash = crypto.createHash("md5");
      hash.update(screen.path);
      screen.hash = `aek${hash.digest("hex").substring(0,17)}`;
      screens[screen.hash] = screen;
    });


    return {pkgData,screens};

  })
  .catch((err)=>{
    if (!err) {
      err = Error("Error retreiving screen hashes");
    }
    throw err;
  });
}


function getDevScreens(screenDir,otherScreens = {}) {
  return fs.readdir(screenDir)
  .then((files)=>{
    const screens = {};
    if (files) {
      files.forEach((filename)=>{
        const screen = {name: _.initial(filename.split(".")).join(".")};
        screens[screen.name] = screen;
      });
    }
  })
  .catch(()=>{
    return {};
  })
  .then((screens)=>{
    return getScreenHashes(_.extend({},screens,otherScreens));
  });
}

module.exports = {getScreenHashes,getDevScreens};
