import React from "react";
import ReactDOM from "react-dom";
import {injectGlobal} from "emotion";
// require("../../utils/fastclick");

window.React = React;
window.ReactDOM = ReactDOM;

const {Babel,Prism} = window;
const $ = window.jQuery;

/* eslint-disable no-unused-expressions */
injectGlobal`
  .docs-button-wrapper button {
    margin-bottom: 3px;
  }
`;
/* eslint-enable no-unused-expressions */


const bundled = { //eslint-disable-line no-unused-vars
  "@ombiel/aek-lib": require("@ombiel/aek-lib"),
  "@ombiel/aek-lib/simple-store": require("@ombiel/aek-lib/simple-store"),
  lodash: require("lodash"),
  "react-icons/lib/go/octoface": {default:require("react-icons/lib/go/octoface")},
};


// window.require = function(module) {
//   return bundled[module];
// };

function hoistImports(code) {
  const imports = code.match(/^\s*import [^;]+/mg);
  imports.forEach((imp)=>{
    const match = imp.trim().match(/^import ([a-z0-9]+)?,?(\{[a-z0-9,\s\n]+\})? from ["'](.*)["']/i);
    const defaultImport = match[1];
    const otherImports = match[2];
    const path = match[3];
    const lines = [];
    if (defaultImport) {
      lines.push(`const ${defaultImport.replace(/ as /g,":")} = bundled["${path}"].default;`);
    }
    if (otherImports) {
      lines.push(`const ${otherImports.replace(/ as /g,":")} = bundled["${path}"];`);
    }
    code = code.replace(imp,lines.join("\r\n"));
  });

  return code;
}

function babelTransform(code) {
  code = hoistImports(code);
  // console.log("code",code)
  return Babel.transform(code,{presets: ["es2017","react"],plugins: ["transform-class-properties"]}).code;
}


$(function() {

  // or dividers
  // todo: move this into generic docserver script
  $("p:contains('--or--')").replaceWith('<div class="ui horizontal divider">Or</div>');


  // evaluate babel script
  // todo: move this into generic docserver script
  $("script[type='text/aek']").each(function() {

    var $script = $(this);
    var code = $script.html();

    eval(babelTransform(code)); //eslint-disable-line no-eval

  });


  // aek script examples
  // todo: move this into generic docserver script
  $("script[type='text/aek-example']").each(function() {
    var $script = $(this);
    var id = $script.attr("data-ex");
    var code = $script.html();
    var target = document.createElement("div");
    var $example = $('<div class="example"/>').attr("data-ex",id);
    if (this.hasAttribute("data-contained")) {
      $example.addClass("contained");
    }
    if (this.hasAttribute("data-button-wrapper")) {
      $example.addClass("docs-button-wrapper");
    }

    if (!$example.find(".showcode-btn").length) {


      $example.append(`
        <a href="" class="showcode-btn">
          <i class="code icon"></i>
        </a>
      `);

      // trim blank lines
      code = code.replace(/^( *)?\n/,"");
      code = code.replace(/\n( *)?$/,"");

      // normalise indentation
      var preSpace = code.match(/\n( *)/);

      if (preSpace && preSpace[1]) {
        var r = new RegExp(`\\n${preSpace[1]}`,"g");
        code = code.replace(r,"\n").trim();
      }

      var $exampleCode = $('<code/>').text(code);
      var $examplePre = $('<pre class="language-javascript"/>').append($exampleCode);

      $example.append(target);

      $example.insertAfter($script);
      $example.after($examplePre);
      $script.remove();

      var componentName = $script.attr("data-component");

      if (!componentName) {
        code = `
          function Comp() {
            ${code}
          }
        `;
        componentName = "Comp";
      }
      /* eslint-disable no-eval */
      eval(babelTransform(`
        (function() {
          ${code}
          function render() {
            ReactDOM.render(React.createElement(${componentName}),target);
          }
          render();
        })();
      `));
    }
  });

  if (window.Prism) {
    Prism.highlightAll();
  }

});
