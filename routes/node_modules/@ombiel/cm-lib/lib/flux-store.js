import {extend,isArray,isPlainObject,omit,mapValues} from "lodash";

var {createStore,combineReducers} = require("redux");

var log = require("./utils/logger");


var storagize = (obj)=> {
  if (isArray(obj)) {
    return obj.map(storagize);
  }
  if (isPlainObject(obj)) {
    return omit(mapValues(obj,storagize),function(value,key) {
      return key.indexOf("$$$") === 0;
    });
  }
  return obj;
};

var fluxStore = (opts = {})=>{
  var defaultOpts = {
    reducers: {},
    initialState: {},
    storageReducer: storagize
  };

  opts = extend(defaultOpts,opts);

  var {localStorageKey,initialState,storageReducer,reducers} = opts;

  if (localStorageKey) {

    try {
      initialState = JSON.parse(localStorage[localStorageKey]);
    }
    catch (e) { log.warn("fluxStore","Unable to get initial state from storage"); }

  }

  var store = createStore(function(state = initialState,action) {

    log.info(action.type,action);

    var newState = combineReducers(reducers)(state,action);

    log.info("state",newState);

    if (localStorageKey) {
      try {
        localStorage[localStorageKey] = JSON.stringify(storageReducer(newState));
      }
      catch (e) { log.warn("Unable to persist state to storage",e); }
    }

    return newState;

  });

  return store;
};

module.exports = fluxStore;
