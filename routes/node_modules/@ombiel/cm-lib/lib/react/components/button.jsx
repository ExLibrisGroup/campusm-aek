import "./base.aekcss";
import "./button.aekcss";
import "./icon.aekcss";

import {includes,isString,isFunction} from "lodash";

import React from "react";
import PropTypes from "../utils/prop-types-extra";
import mergeProps from "../utils/merge-props";
import getChildren from "../utils/children";
import pickHtmlProps from "../utils/pick-html-props";
import {Icon} from "./icon";

const sizes = ["mini","tiny","small","big","medium","large","huge","massive"];

export function Button(receivedProps) {

  var initialProps = {
    className: "ui button"
  };

  // if loading we should disable by default
  if (receivedProps.loading) { initialProps.disabled = true; }

  var props = mergeProps(initialProps,receivedProps);

  var classSet = {};


  // add relevant classes for "state"
  ["active","disabled","loading","basic","inverted","fluid","circular","compact"].forEach((state)=>{
    if (props[state]) {
      classSet[state] = true;
    }
  });

  // sizes
  if (includes(sizes,props.size)) {
    classSet[props.size] = true;
  }

  // variations
  if (props.variation) {
    classSet[props.variation] = true;
  }

  // social
  if (!props.icon && includes(["facebook","twitter","google plus","linkedin","instagram","youtube"],props.variation)) {
    props.icon = props.variation;
  }

  // loading state should not adopt disabled style
  if (props.loading) { classSet.disabled = false; }



  if (props.link) {
    props.href = props.link;
    delete props.link;
  }

  var children = getChildren(props);

  // Icons
  if (props.icon) {
    classSet.icon = !children.length || props.iconBox;
    let iconClass = isString(props.icon) ? `${props.icon} icon` : "icon";
    if (props.iconRight) { iconClass = `right ${iconClass}`; }
    if (props.iconBox) {
      if (props.iconRight) {
        classSet.right = true;
      }
      classSet.labeled = true;
    }
    let iconElement;
    if (!isString(props.icon)) {
      iconElement = props.icon;
      if (isFunction(iconElement)) {
        // currently SVG icon must be a component and we are hacking inline styles
        // in next version this should be included in style sheet and we can support SVG elements as well
        const iconStyle = props.iconBox ? {
          display: "block",
          position: "absolute",
          width: "100%",
          top: "50%",
          textAlign: "center",
          marginTop: "-.5em",
        } : {};

        iconElement = <Icon icon={props.icon} style={iconStyle} />;
      }
    }

    var icon = <i aria-hidden="true" key="icon" className={iconClass}>{iconElement}</i>;
    if (props.iconRight) {
      children.push(icon);
    }
    else {
      children.unshift(icon);
    }
    // icon is an html5 attribute so we must remove it to prevent it from going to the DOM node
    delete props.icon;
  }

  if (props.truncateText) {
    props = mergeProps({
      style: {
        textOverflow: "ellipsis",
        overflow: "hidden",
        whiteSpace: "nowrap",
      }
    },props);
  }

  if (props.flat) {
    props = mergeProps({
      className: "basic compact",
      style: {
        boxShadow: "none",
        border: "none",
      }
    },props);
  }

  var component = props.href ? "a" : "button";
  props.children = children;
  props = pickHtmlProps(mergeProps(props,{classSet: classSet}));


  return (React.createElement(component,props));
}

Button.propTypes = {
  size: PropTypes.oneOf(sizes),
  variation: PropTypes.variation,
  icon: PropTypes.icon,
  loading: PropTypes.bool,
  link: PropTypes.string,
  href: PropTypes.string,
  iconBox: PropTypes.bool,
  iconRight: PropTypes.bool,
  truncateText: PropTypes.bool,
  flat: PropTypes.bool,
  children: PropTypes.node,
};


export function FlatButton(props) {
  return <Button flat {...props} />;
}

export function IconButton(props) {
  const newProps = mergeProps({
    flat: true,
    style: {
      padding: 0,
      fontSize: "2.57em",
      lineHeight: "1em",
    },
  },props);

  return <Button {...newProps} />;
}
