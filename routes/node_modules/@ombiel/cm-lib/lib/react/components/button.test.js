import React from 'react';
import {shallow} from "enzyme";
import {Button, FlatButton, IconButton} from "./button";

describe("Button with no props",()=>{

  const wrapper = shallow(
    <Button>
      DisplayText
    </Button>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have one button with css classes ui and button",()=>{
    const buttonComponent = wrapper.find('button');
    expect(buttonComponent).toHaveLength(1);
    expect(buttonComponent.hasClass('ui')).toEqual(true);
    expect(buttonComponent.hasClass('button')).toEqual(true);
    expect(buttonComponent.text()).toEqual('DisplayText');
  });

  it("should not have any other css classes", ()=>{
    expect(wrapper.find('button').prop('className')).toEqual("ui button");
  });

});

describe("Button with state props",()=>{
  const wrapper = shallow(
    <Button
      active
      disabled
      loading
      basic
      inverted
      fluid
      circular
      compact
    />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a css class of active", ()=>{
    expect(wrapper.find('button').hasClass('active')).toEqual(true);
  });

  it("should have a html attribute of disabled", ()=>{
    expect(wrapper.html()).toMatch('disabled');
  });

  it("should have a css class of loading", ()=>{
    expect(wrapper.find('button').hasClass('loading')).toEqual(true);
  });

  it("should not have a css class of disabled if state is loading",()=>{
    expect(wrapper.find('button').hasClass('disabled')).toEqual(false);
  });

  it("should have a css class of disabled if state is not loading",()=>{
    wrapper.setProps({loading: false});
    expect(wrapper.find('button').hasClass('disabled')).toEqual(true);
  });

  it("should have a css class of basic", ()=>{
    expect(wrapper.find('button').hasClass('basic')).toEqual(true);
  });

  it("should have a css class of inverted", ()=>{
    expect(wrapper.find('button').hasClass('inverted')).toEqual(true);
  });

  it("should have a css class of fluid", ()=>{
    expect(wrapper.find('button').hasClass('fluid')).toEqual(true);
  });

  it("should have a css class of circular", ()=>{
    expect(wrapper.find('button').hasClass('circular')).toEqual(true);
  });

  it("should have a css class of compact", ()=>{
    expect(wrapper.find('button').hasClass('compact')).toEqual(true);
  });

});

describe("Button with size prop",()=>{
  const wrapper = shallow(
    <Button
      size="mini"
    />
  );

  it("should have a css class of mini if size is mini",()=>{
    expect(wrapper.find('button').hasClass('mini')).toEqual(true);
  });

  it("should have a css class of tiny if size is tiny",()=>{
    wrapper.setProps({size: "tiny"});
    expect(wrapper.find('button').hasClass('tiny')).toEqual(true);
  });

  it("should have a css class of small if size is small",()=>{
    wrapper.setProps({size: "small"});
    expect(wrapper.find('button').hasClass('small')).toEqual(true);
  });

  it("should have a css class of big if size is big",()=>{
    wrapper.setProps({size: "big"});
    expect(wrapper.find('button').hasClass('big')).toEqual(true);
  });

  it("should have a css class of large if size is large",()=>{
    wrapper.setProps({size: "large"});
    expect(wrapper.find('button').hasClass('large')).toEqual(true);
  });

  it("should have a css class of huge if size is huge",()=>{
    wrapper.setProps({size: "huge"});
    expect(wrapper.find('button').hasClass('huge')).toEqual(true);
  });

  it("should have a css class of massive if size is massive",()=>{
    wrapper.setProps({size: "massive"});
    expect(wrapper.find('button').hasClass('massive')).toEqual(true);
  });

});

describe("Button with variation prop",()=>{
  const wrapper = shallow(
    <Button
      variation="facebook"
    />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should be a facebook button if the variation is facebook",()=>{
    const buttonComponent = wrapper.find('button');
    const iconComponent = wrapper.find('i');
    expect(buttonComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(buttonComponent.hasClass('facebook')).toEqual(true);
    expect(iconComponent.hasClass('facebook')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
  });


  it("should be a twitter button if the variation is twitter",()=>{
    wrapper.setProps({variation: "twitter"});
    const buttonComponent = wrapper.find('button');
    const iconComponent = wrapper.find('i');
    expect(buttonComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(buttonComponent.hasClass('twitter')).toEqual(true);
    expect(iconComponent.hasClass('twitter')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
  });

  it("should be a google plus button if the variation is google plus",()=>{
    wrapper.setProps({variation: "google plus"});
    const buttonComponent = wrapper.find('button');
    const iconComponent = wrapper.find('i');
    expect(buttonComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(buttonComponent.hasClass('google plus')).toEqual(true);
    expect(iconComponent.hasClass('google plus')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
  });

  it("should be a linkedin button if the variation is linkedin",()=>{
    wrapper.setProps({variation: "linkedin"});
    const buttonComponent = wrapper.find('button');
    const iconComponent = wrapper.find('i');
    expect(buttonComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(buttonComponent.hasClass('linkedin')).toEqual(true);
    expect(iconComponent.hasClass('linkedin')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
  });

  it("should be a instagram button if the variation is instagram",()=>{
    wrapper.setProps({variation: "instagram"});
    const buttonComponent = wrapper.find('button');
    const iconComponent = wrapper.find('i');
    expect(buttonComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(buttonComponent.hasClass('instagram')).toEqual(true);
    expect(iconComponent.hasClass('instagram')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
  });

  it("should be a youtube button if the variation is youtube",()=>{
    wrapper.setProps({variation: "youtube"});
    const buttonComponent = wrapper.find('button');
    const iconComponent = wrapper.find('i');
    expect(buttonComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(buttonComponent.hasClass('youtube')).toEqual(true);
    expect(iconComponent.hasClass('youtube')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
  });

});

describe("Button with link or href prop", ()=>{
  const wrapperLink = shallow(
    <Button
      link="linkUrl"
    >
      DisplayText
    </Button>
  );

  it("should match snapshot",()=>{
    expect(wrapperLink).toMatchSnapshot();
  });

  it("should contain an anchor not a button with the href prop",()=>{
    expect(wrapperLink.find('button')).toHaveLength(0);
    const anchor = wrapperLink.find('a');
    expect(anchor).toHaveLength(1);
    expect(anchor.prop('href')).toEqual('linkUrl');
    expect(anchor.text()).toEqual('DisplayText');
  });

  const wrapperHref = shallow(
    <Button
      link="linkUrl"
    />
  );

  it("should match snapshot",()=>{
    expect(wrapperHref).toMatchSnapshot();
  });

  it("should contain an anchor not a button with the link prop",()=>{
    expect(wrapperHref.find('button')).toHaveLength(0);
    const anchor = wrapperLink.find('a');
    expect(anchor).toHaveLength(1);
    expect(anchor.prop('href')).toEqual('linkUrl');
    expect(anchor.text()).toEqual('DisplayText');
  });

});

describe("Button with icon prop",()=>{
  const wrapper = shallow(
    <Button
      icon="alarm"
    />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain the icon element",()=>{
    const iconComponent = wrapper.find('i');
    expect(iconComponent).toHaveLength(1);
    expect(iconComponent.hasClass('alarm')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
  });

  it("should override the variation prop",()=>{
    wrapper.setProps({variation: "youtube"});
    const iconComponent = wrapper.find('i');
    expect(iconComponent).toHaveLength(1);
    expect(iconComponent.hasClass('alarm')).toEqual(true);
  });

});

describe("Button with icon and iconRight",()=>{

  const wrapper = shallow(
    <Button
      icon="alarm"
      iconRight
    />
  );

  it("should add the css class right to the icon ",()=>{
    const iconComponent = wrapper.find('i');
    expect(iconComponent.hasClass('alarm')).toEqual(true);
    expect(iconComponent.hasClass('right')).toEqual(true);
  });

});

describe("Button with icon and iconBox",()=>{

  const wrapper = shallow(
    <Button
      icon="alarm"
      iconBox
    />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should add css class labeled to the button if iconBox is set",()=>{
    expect(wrapper.find('button').hasClass('labeled')).toEqual(true);
    wrapper.setProps({iconRight: true});
    expect(wrapper.find('button').hasClass('labeled')).toEqual(true);
  });

});

describe("Button with truncateText prop",()=>{
  const wrapper = shallow(
    <Button
      truncateText
    />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have the correct style",()=>{
    expect(wrapper.prop('style')).toHaveProperty('textOverflow', 'ellipsis');
    expect(wrapper.prop('style')).toHaveProperty('overflow', 'hidden');
    expect(wrapper.prop('style')).toHaveProperty('whiteSpace', 'nowrap');
  });
});

describe("Button with flat prop",()=>{
  const wrapper = shallow(
    <Button
      flat
    />
  );

  it("should have css classes of basic and compact",()=>{
    const buttonComponent = wrapper.find('button');
    expect(buttonComponent.hasClass('basic')).toEqual(true);
    expect(buttonComponent.hasClass('compact')).toEqual(true);
  });

  it("should have the correct style",()=>{
    const buttonComponent = wrapper.find('button');
    expect(buttonComponent.prop('style')).toHaveProperty('boxShadow', 'none');
    expect(buttonComponent.prop('style')).toHaveProperty('border', 'none');
  });
});

describe("Button with children",()=>{
  const wrapper = shallow(
    <Button
      icon="alarm"
    >
      <p>
        First child
      </p>
      <p>
        Second child
      </p>
    </Button>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain the children",()=>{
    const buttonComponent = wrapper.find('button');
    const childParagraphs = buttonComponent.children().find('p');
    expect(childParagraphs).toHaveLength(2);
    expect(childParagraphs.at(0).text()).toEqual('First child');
    expect(childParagraphs.at(1).text()).toEqual('Second child');
  });

  it("should add the icon before the children",()=>{
    const buttonComponent = wrapper.find('button');
    const children = buttonComponent.children();
    expect(children).toHaveLength(3);
    expect(children.first().is('i')).toEqual(true);
  });

  it("should add the icon after the children if iconRight prop is set",()=>{
    wrapper.setProps({iconRight: true});
    const buttonComponent = wrapper.find('button');
    const children = buttonComponent.children();
    expect(children.last().is('i')).toEqual(true);
  });
});

describe("FlatButton",()=>{
  const wrapper = shallow(
    <FlatButton />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  const buttonComponent = wrapper.dive().find('button');
  it("should have css classes of basic and compact",()=>{
    expect(buttonComponent.hasClass('basic')).toEqual(true);
    expect(buttonComponent.hasClass('compact')).toEqual(true);
  });

  it("should have the correct style",()=>{
    expect(buttonComponent.prop('style')).toHaveProperty('boxShadow', 'none');
    expect(buttonComponent.prop('style')).toHaveProperty('border', 'none');
  });

});


describe("IconButton",()=>{
  const wrapper = shallow(
    <IconButton />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  const buttonComponent = wrapper.dive().find('button');
  it("should have css classes of basic and compact",()=>{
    expect(buttonComponent.hasClass('basic')).toEqual(true);
    expect(buttonComponent.hasClass('compact')).toEqual(true);
  });

  it("should have the correct style",()=>{
    expect(buttonComponent.prop('style')).toHaveProperty('boxShadow', 'none');
    expect(buttonComponent.prop('style')).toHaveProperty('border', 'none');
    expect(buttonComponent.prop('style')).toHaveProperty('padding', 0);
    expect(buttonComponent.prop('style')).toHaveProperty('fontSize', '2.57em');
    expect(buttonComponent.prop('style')).toHaveProperty('lineHeight', '1em');
  });

});
