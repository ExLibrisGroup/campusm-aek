import React from 'react';
import {shallow, mount} from "enzyme";
import {Checkbox, Slider, Toggle} from "./checkbox";
import {Segment} from "./segment";

describe("Checkbox with label and id prop",()=>{

  const wrapper = shallow(
    <Checkbox id="thisId" label="Label">
    </Checkbox>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should be a div with css classes ui and checkbox",()=>{
    expect(wrapper.find('div')).toHaveLength(1);
    expect(wrapper.find('div').hasClass('ui')).toEqual(true);
    expect(wrapper.find('div').hasClass('checkbox')).toEqual(true);
  });

  it("should contain one input of type checkbox with id thisId",()=>{
    expect(wrapper.find('input')).toHaveLength(1);
    expect(wrapper.find('input').prop('type')).toEqual('checkbox');
    expect(wrapper.find('input').prop('id')).toEqual('thisId');
  });

  it("should contain one label with for thisId and text Label",()=>{
    expect(wrapper.find('label')).toHaveLength(1);
    expect(wrapper.find('label').html()).toMatch('for="thisId"');
    expect(wrapper.find('label').text()).toMatch('Label');
  });


});

describe("Unique id",()=>{

  const wrapper = mount(
    <div>
      <Checkbox label="Label 1">
      </Checkbox>
      <Checkbox label="Label 2">
      </Checkbox>
    </div>
  );

  it("should increment the ids",()=>{
    expect(wrapper.find('#checkbox_1')).toHaveLength(1);
    expect(wrapper.find('#checkbox_2')).toHaveLength(1);
  });
});

describe("Checkbox with checked and name props",()=>{

  const wrapper = shallow(
    <Checkbox
      id="anotherId"
      checked
      name="name1"
    />
  );

  it("should have an input with a checked prop of true",()=>{
    expect(wrapper.find('input').prop('checked')).toEqual(true);
    expect(wrapper.find('input').prop('name')).toEqual("name1");
  });
});

describe("Checkbox with children",()=>{
  const wrapper = shallow(
    <Checkbox
      id="anotherId2"
    >
      <Segment />
      <Segment />
    </Checkbox>
  );

  it("should not render the children",()=>{
    expect(wrapper.find(Checkbox).children()).toHaveLength(0);
  });

});

describe("Slider",()=>{

  const wrapper = shallow(
    <Slider />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain a Checkbox with a checkboxType prop of slider",()=>{
    expect(wrapper.find(Checkbox)).toHaveLength(1);
    expect(wrapper.find(Checkbox).prop('checkboxType')).toEqual('slider');
  });
});

describe("Toggle",()=>{

  const wrapper = shallow(
    <Toggle />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain a Checkbox with a checkboxType prop of toggle",()=>{
    expect(wrapper.find(Checkbox)).toHaveLength(1);
    expect(wrapper.find(Checkbox).prop('checkboxType')).toEqual('toggle');
  });
});
