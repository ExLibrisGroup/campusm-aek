import React from "react";
import PropTypes from "prop-types";
import moment from "moment";
import ReactDOM from "react-dom";

import mergeProps from "../utils/merge-props";
import Input from "./input";
import {Label} from "./label";


let _supportsDateInput;
function supportsDateInput() {
  if (_supportsDateInput == null) {
    const input = document.createElement("input");
    input.setAttribute("type","date");
    _supportsDateInput = input.type === "date";
  }
  return _supportsDateInput;
}



export default class DateInput extends React.Component {

  constructor() {
    super();
    this.state = {};
  }

  componentWillMount() {
    const state = this.validateDate(this.props.value);
    state.userInputValue = state.inputDate;
    this.setState(state);
  }

  onChange = (ev)=>{
    const userInputValue = ev.target.value || "";
    const {dateIsValid,displayDate,value} = this.validateDate(userInputValue);

    this.setState({userInputValue,dateIsValid,displayDate});

    if (this.props.onChange) {
      this.props.onChange(ev,this.props.name,value);
    }
  }

  onFocus = (ev)=>{
    this.setState({focussed: true});
    if (this.props.onFocus) {
      this.props.onFocus(ev);
    }
  }

  onBlur = (ev)=>{
    this.setState({focussed: false});
    if (this.props.onBlur) {
      this.props.onBlur(ev);
    }
  }

  onRef = (el)=>{
    if (el) {
      this.inputElement = ReactDOM.findDOMNode(el); //eslint-disable-line react/no-find-dom-node
    }
    this.inputElement = null;
  }

  validateDate = (date)=>{
    let m;
    let dateIsValid;
    let displayDate;
    let value = "";
    let inputDate;

    if (date) {
      if (typeof date === "string") {
        date = date.trim();
        // lets change uk date format to eu format for parsing
        const matches = date.match(/^(\d\d?)[/-](\d\d?)(([^\d])(.*))?/);
        if (matches) {
          date = `${matches[2]}/${matches[1]}`;
          if (matches[4]) {
            date += (matches[4] === "-") ? "/" : matches[4];
          }
          if (matches[5]) {
            date += matches[5];
          }
        }
      }

      m = moment(date);
      dateIsValid = m.isValid();
    }

    if (dateIsValid) {
      displayDate = m.format(this.props.dateDisplayFormat);
      inputDate = m.format(this.props.dateInputFormat);
      value = m.format(this.props.dateValueFormat);
    }


    return {dateIsValid,displayDate,value,inputDate};
  }

  focus = ()=>{
    if (this.inputElement) {
      this.inputElement.focus();
    }
  }

  supportsDateInput = ()=>{
    if (this.props.allowNativeSupport) {
      return supportsDateInput();
    }
    return false;
  }

  render() {

    let newProps = {};
    let placeholder;
    let displayDate;

    if (!this.supportsDateInput()) {
      newProps = mergeProps(this.props,{value: this.state.userInputValue,type: "text"});
      if (newProps.maxLength === undefined) {
        newProps.maxLength = this.props.dateInputFormat.length;
      }
      if (this.state.displayDate) {
        var displayDateProps = mergeProps({className: "positive label aek-valid-date-display"},{classSet: {focussed: this.state.focussed}});
        displayDate = <Label {...displayDateProps} onClick={this.focus} onFocus={this.focus}>{this.state.displayDate}</Label>;
      }
      else if (this.state.userInputValue && document.activeElement !== this.inputElement) {
        displayDate = <Label className="negative pointing above">{this.props.invalidMessage}</Label>;
      }
    }

    else {
      newProps = {type: "date",classSet: {"aek-show-placeholder": !this.props.value}};

      newProps = mergeProps(this.props,newProps);

      if (!this.props.value && this.props.placeholder) {
        placeholder = <div className="aek-date-input-placeholder"><span>{this.props.placeholder}</span></div>;
      }
    }

    return (
      <div className="aek-native-date-input">
        <Input {...newProps} ref={this.onRef} onChange={this.onChange} onFocus={this.onFocus} onBlur={this.onBlur} />
        { placeholder }
        { displayDate }
      </div>
    );
  }
}

DateInput.defaultPlaceholder = "dd/mm/yyyy";

DateInput.propTypes = {
  value: PropTypes.string,
  onChange: PropTypes.func,
  name: PropTypes.string,
  onFocus: PropTypes.func,
  onBlur: PropTypes.func,
  dateDisplayFormat: PropTypes.string,
  dateInputFormat: PropTypes.string,
  dateValueFormat: PropTypes.string,
  allowNativeSupport: PropTypes.bool,
  invalidMessage: PropTypes.node,
  placeholder: PropTypes.string,
};

DateInput.defaultProps = {
  dateDisplayFormat: "ddd DD MMM YYYY",
  dateInputFormat: "DD/MM/YYYY",
  dateValueFormat: "YYYY-MM-DD",
  invalidMessage: "This is not a valid date",
  allowNativeSupport: true,
};
