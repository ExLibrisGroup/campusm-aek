import React from 'react';
import {shallow} from "enzyme";
import DateInput from "./date-input";
import Input from "./input";
import {Label} from "./label";

describe("DateInput with no props",()=>{

  const wrapper = shallow(
    <DateInput />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a container div with css class aek-native-date-input",()=>{
    expect(wrapper.hasClass('aek-native-date-input')).toEqual(true);
  });

  it("should contain an <Input /> component",()=>{
    expect(wrapper.find(Input)).toHaveLength(1);
  });

  it("should contain an <Input /> component with a prop of allowNativeSupport",()=>{
    expect(wrapper.find(Input).prop('allowNativeSupport')).toEqual(true);
  });

  it("should contain an <Input /> component with a prop containerComponent of div ",()=>{
    expect(wrapper.find(Input).prop('containerComponent')).toEqual('div');
  });

  it("should contain an <Input /> component with a prop dateDisplayFormat of 'ddd DD MMM YYYY'",()=>{
    expect(wrapper.find(Input).prop('dateDisplayFormat')).toEqual('ddd DD MMM YYYY');
  });

  it("should contain an <Input /> component with a prop dateInputFormat of DD/MM/YYYY",()=>{
    expect(wrapper.find(Input).prop('dateInputFormat')).toEqual('DD/MM/YYYY');
  });

  it("should contain an <Input /> component with a prop dateValueFormat of YYYY-MM-DD",()=>{
    expect(wrapper.find(Input).prop('dateValueFormat')).toEqual('YYYY-MM-DD');
  });

  it("should contain an <Input /> component with a prop invalidMessage of This is not a valid date",()=>{
    expect(wrapper.find(Input).prop('invalidMessage')).toEqual('This is not a valid date');
  });

  it("should contain an <Input /> component with a prop type of date",()=>{
    expect(wrapper.find(Input).prop('type')).toEqual('date');
  });

});

describe("DateInput with format props",()=>{

  const wrapper = shallow(
    <DateInput
      dateDisplayFormat="MM/DD/YYYY"
      dateInputFormat="MM/DD/YYYY"
      dateValueFormat="MM/DD/YYYY"
    />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain an <Input /> component with a prop dateDisplayFormat of MM/DD/YYYY",()=>{
    expect(wrapper.find(Input).prop('dateDisplayFormat')).toEqual('MM/DD/YYYY');
  });

  it("should contain an <Input /> component with a prop dateInputFormat of MM/DD/YYYY",()=>{
    expect(wrapper.find(Input).prop('dateInputFormat')).toEqual('MM/DD/YYYY');
  });

  it("should contain an <Input /> component with a prop dateValueFormat of MM/DD/YYYY",()=>{
    expect(wrapper.find(Input).prop('dateValueFormat')).toEqual('MM/DD/YYYY');
  });
});

describe("DateInput with value prop - native support is not allowed",()=>{

  it("should ignore an invalid date",()=>{
    const wrapper = shallow(
      <DateInput
        allowNativeSupport={false}
        value="2018-02-31"
      />
    );
    expect(wrapper.find(Input).prop('value')).toBeUndefined();
    expect(wrapper.find(Input).prop('type')).toEqual('text');
    expect(wrapper.find(Label)).toHaveLength(0);
  });

  it("should allow a valid date and display it",()=>{
    const wrapper = shallow(
      <DateInput
        allowNativeSupport={false}
        value="2018-07-31"
      />
    );
    expect(wrapper.find(Input).prop('value')).toEqual("31/07/2018");
    expect(wrapper.find(Input).prop('type')).toEqual('text');
    expect(wrapper.find(Label).prop('children')).toEqual('Tue 31 Jul 2018');
  });

  it("should display the date in the dateDisplayFormat",()=>{
    const wrapper = shallow(
      <DateInput
        dateDisplayFormat="DD/MM/YYYY"
        allowNativeSupport={false}
        value="2018-07-31"
      />
    );
    expect(wrapper.find(Input).prop('value')).toEqual("31/07/2018");
    expect(wrapper.find(Input).prop('type')).toEqual('text');
    expect(wrapper.find(Label).prop('children')).toEqual('31/07/2018');
  });

  it("should store the value the date in the dateValueFormat",()=>{
    const wrapper = shallow(
      <DateInput
        dateValueFormat="MM/DD/YYYY"
        allowNativeSupport={false}
        value="2018-07-31"
      />
    );
    expect(wrapper.state("value")).toEqual("07/31/2018");
  });

});

describe("DateInput with value prop - native support is allowed",()=>{

  it("should allow a valid date",()=>{
    const wrapper = shallow(
      <DateInput
        value="2018-07-31"
      />
    );
    expect(wrapper.find(Label)).toHaveLength(0);
    expect(wrapper.find(Input).prop('value')).toEqual("2018-07-31");
  });

  it("should convert the date to the dateInputFormat",()=>{
    const wrapper = shallow(
      <DateInput
        dateValueFormat="MM/DD/YYYY"
        value="2018-07-31"
      />
    );
    expect(wrapper.state("value")).toEqual("07/31/2018");
  });

});

describe("DateInput with user input - native support is not allowed",()=>{
  const wrapper = shallow(
    <DateInput
      allowNativeSupport={false}
    />
  );

  it("should not accept or show an invalid date",()=>{
    wrapper.find(Input).simulate('change', {target: {value: "2018-02-31"}});
    expect(wrapper.find(Input).prop('type')).toEqual('text');
    expect(wrapper.find(Label)).toHaveLength(1);
    expect(wrapper.find(Label).prop('children')).toEqual('This is not a valid date');
  });

  it("should override the error message with the invalidMessage prop",()=>{
    wrapper.find(Input).simulate('change', {target: {value: "2018-02-31"}});
    wrapper.setProps({invalidMessage: 'Date error'});
    expect(wrapper.find(Label).prop('children')).toEqual('Date error');
  });

  it("should allow a valid date and display it",()=>{
    wrapper.find(Input).simulate('change', {target: {value: "2018-07-31"}});
    expect(wrapper.find(Input).prop('value')).toEqual("2018-07-31");
    expect(wrapper.find(Input).prop('type')).toEqual('text');
    expect(wrapper.find(Label)).toHaveLength(1);
    expect(wrapper.find(Label).prop('children')).toEqual('Tue 31 Jul 2018');
  });

  // it("should display the date in the dateDisplayFormat",()=>{
  //   const wrapper2 = shallow(
  //     <DateInput
  //       dateDisplayFormat="DD/MM/YYYY"
  //       allowNativeSupport={false}
  //     />
  //   );
  //   wrapper2.find(Input).simulate('change', {target: {value: "2018-07-31"}});
  //   expect(wrapper2.find(Input).prop('value')).toEqual("31/07/2018");
  //   expect(wrapper2.find(Input).prop('type')).toEqual('text');
  //   expect(wrapper2.find(Label).prop('children')).toEqual('31/07/2018');
  // });
  //
  // it("should store the value the date in the dateValueFormat",()=>{
  //   const wrapper3 = shallow(
  //     <DateInput
  //       dateValueFormat="MM/DD/YYYY"
  //       allowNativeSupport={false}
  //     />
  //   );
  //   wrapper3.find(Input).simulate('change', {target: {value: "2018-07-31"}});
  //   expect(wrapper3.state("value")).toEqual("07/31/2018");
  // });

});
describe("DateInput with user input - native support is allowed",()=>{
  const wrapper = shallow(
    <DateInput />
  );
  // it("should not accept an invalid date",()=>{
  //   wrapper.find(Input).simulate('change', {target: {value: "2018-02-31"}});
  //   expect(wrapper.find(Input).prop('type')).toEqual('date');
  //   expect(wrapper.state("userInputValue")).toEqual('');
  // });

  it("should accept a valid date",()=>{
    wrapper.find(Input).simulate('change', {target: {value: "2018-07-31"}});
    expect(wrapper.state("userInputValue")).toEqual('2018-07-31');
  });

  // it("should store the value the date in the dateValueFormat",()=>{
  //   const wrapper2 = shallow(
  //     <DateInput
  //       dateDisplayFormat="DD/MM/YYYY"
  //     />
  //   );
  //   wrapper2.find(Input).simulate('change', {target: {value: "2018-07-31"}});
  //   expect(wrapper2.state("userInputValue")).toEqual('31/07/2018');
  // });
});

describe("DateInput placeholder",()=>{
  it("should show the placeholder if the value prop is not set",()=>{
    const wrapper = shallow(
      <DateInput
        placeholder="DateInput placeholder"
      />
    );
    expect(wrapper.find('div.aek-date-input-placeholder')).toHaveLength(1);
    expect(wrapper.find('div.aek-date-input-placeholder span')).toHaveLength(1);
    expect(wrapper.find('div.aek-date-input-placeholder span').text()).toEqual("DateInput placeholder");
  });

  it("should not show the placeholder if the value prop is set",()=>{
    const wrapper = shallow(
      <DateInput
        value="2018-07-31"
        placeholder="DateInput placeholder"
      />
    );
    expect(wrapper.find('div.aek-date-input-placeholder')).toHaveLength(0);
  });
});
