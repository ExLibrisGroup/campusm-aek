import React from 'react';
import {shallow, mount} from "enzyme";
import {Divider,SectionDivider,HeaderDivider,FittedDivider,HiddenDivider,VerticalDivider} from "./divider";

describe("Divider without props",()=>{
  const wrapper = shallow(
    <Divider />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have one divider with css classes ui, clearing, divider",()=>{
    const messageComponent = wrapper.find('div');
    expect(messageComponent).toHaveLength(1);
    expect(messageComponent.hasClass('ui')).toEqual(true);
    expect(messageComponent.hasClass('clearing')).toEqual(true);
    expect(messageComponent.hasClass('divider')).toEqual(true);
  });

});

describe("Divider with text",()=>{
  const wrapper = shallow(
    <Divider>Divider</Divider>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have one divider with css classes ui, clearing, divider",()=>{
    const messageComponent = wrapper.find('div');
    expect(messageComponent).toHaveLength(1);
    expect(messageComponent.hasClass('ui')).toEqual(true);
    expect(messageComponent.hasClass('clearing')).toEqual(true);
    expect(messageComponent.hasClass('divider')).toEqual(true);
    expect(messageComponent.text()).toEqual('Divider');
  });

});

describe("Divider with icon",()=>{
  const wrapper = shallow(
    <Divider icon="rocket" />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have one divider with css classes ui, clearing, divider and Icon Rocket",()=>{
    const messageComponent = wrapper.find('div');
    const iconComponent = wrapper.find('i');
    expect(messageComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(messageComponent.hasClass('ui')).toEqual(true);
    expect(messageComponent.hasClass('clearing')).toEqual(true);
    expect(messageComponent.hasClass('horizontal')).toEqual(true);
    expect(messageComponent.hasClass('divider')).toEqual(true);
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
  });

});

describe("Section Divider",()=>{
  const wrapper = mount(
    <SectionDivider />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have one divider with css classes ui, section, clearing, divider",()=>{
    const messageComponent = wrapper.find('div');
    expect(messageComponent).toHaveLength(1);
    expect(messageComponent.hasClass('ui')).toEqual(true);
    expect(messageComponent.hasClass('clearing')).toEqual(true);
    expect(messageComponent.hasClass('divider')).toEqual(true);
    expect(messageComponent.hasClass('section')).toEqual(true);
  });

});

describe("Heading Divider",()=>{
  const wrapper = mount(
    <HeaderDivider icon="rocket">Header Divider</HeaderDivider>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have one divider with css classes ui, header, clearing, divider and Icon Rocket",()=>{
    const messageComponent = wrapper.find('h4');
    const iconComponent = wrapper.find('i');
    expect(messageComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(messageComponent.hasClass('ui')).toEqual(true);
    expect(messageComponent.hasClass('clearing')).toEqual(true);
    expect(messageComponent.hasClass('horizontal')).toEqual(true);
    expect(messageComponent.hasClass('header')).toEqual(true);
    expect(messageComponent.hasClass('divider')).toEqual(true);
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
  });

});

describe("Fitted Divider",()=>{
  const wrapper = mount(
    <FittedDivider />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have one divider with css classes ui, fitted, clearing, divider",()=>{
    const messageComponent = wrapper.find('div');
    expect(messageComponent).toHaveLength(1);
    expect(messageComponent.hasClass('ui')).toEqual(true);
    expect(messageComponent.hasClass('clearing')).toEqual(true);
    expect(messageComponent.hasClass('divider')).toEqual(true);
    expect(messageComponent.hasClass('fitted')).toEqual(true);
  });

});

describe("Hidden Divider",()=>{
  const wrapper = mount(
    <HiddenDivider />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have one divider with css classes ui, hidden, clearing, divider",()=>{
    const messageComponent = wrapper.find('div');
    expect(messageComponent).toHaveLength(1);
    expect(messageComponent.hasClass('ui')).toEqual(true);
    expect(messageComponent.hasClass('clearing')).toEqual(true);
    expect(messageComponent.hasClass('divider')).toEqual(true);
    expect(messageComponent.hasClass('hidden')).toEqual(true);
  });

});

describe("Vertical Divider",()=>{
  const wrapper = mount(
    <VerticalDivider />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have one divider with css classes ui, vertical, clearing, divider",()=>{
    const messageComponent = wrapper.find('div');
    expect(messageComponent).toHaveLength(1);
    expect(messageComponent.hasClass('ui')).toEqual(true);
    expect(messageComponent.hasClass('clearing')).toEqual(true);
    expect(messageComponent.hasClass('divider')).toEqual(true);
    expect(messageComponent.hasClass('vertical')).toEqual(true);
  });

});
