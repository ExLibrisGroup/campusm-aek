import "./base.aekcss";
import "./form.aekcss";
import "./icon.aekcss";

import {isFunction,isString,pick,includes,uniqueId} from "lodash";

import React from "react";


import Input from "./input";
import SelectInput from "./select-input";
import mergeProps from "../utils/merge-props";
import getChildren from "../utils/children";
import {Checkbox,Toggle,Slider} from "./checkbox";
import {CornerLabel as Corner} from "./label";



const inputMappings = {
  // select:Select,
  checkbox: Checkbox,
  toggle: Toggle,
  slider: Slider
};

export default class Field extends React.Component {

  constructor() {
    super();
    this.state = {inputID: uniqueId("formField_")};
  }

  onChange = (ev,name,value)=>{

    if (this.props.onChange) {
      if (!name) {
        name = ev.target && ev.target.name;
      }
      if (value === undefined) {
        value = ev.target && ev.target.value;
      }
      this.props.onChange(ev,name,value);
    }

  }

  onFocus = ()=>{
    this.setState({focus: true});
  }

  onBlur = ()=>{
    this.setState({focus: false});
  }

  render() {

    let label = null;
    const state = this.state;
    const id = this.props.id || state.inputID;
    let type = this.props.type || "text";
    const icon = this.props.icon || type.defaultIcon;
    const options = (isFunction(this.props.options) && this.props.options.call(this.props.optionsContext || this.props)) || this.props.options;
    const disabled = this.props.disabled || (options && options.length === 0);
    const classSet = {disabled,field: true};
    let validationMessage;
    let inputProps = {classSet: {}};
    let help = this.props.help;
    let inputChildren = getChildren(this);


    if (help == null && this.props.maxChars) {
      if (this.props.value) {
        help = `${this.props.value.length} of ${this.props.maxChars} chars`;
      }
      else {
        help = `max ${this.props.maxChars} characters`;
      }
    }

    if (help) {
      help = <div className="helptext">{help}</div>;
    }

    if (this.props.label && !this.props.hideLabel) {
      var labelProps = mergeProps({
        htmlFor: id
      },this.props.labelProps);
      label = <label {...labelProps}>{this.props.label}</label>; //eslint-disable-line jsx-a11y/label-has-for
    }

    // if(this.props.labeledInput) {
    //   inputContainerClass += " left labeled";
    // }

    // if(this.props.size) {
    //   inputContainerClass += " "+this.props.size;
    // }

    // if(icon) {
    //   inputContainerClass += " right icon";
    //   icon = <i className={icon+" icon"}></i>;
    // }

    if (this.props.required && !inputChildren.length && !this.props.excludeRequiredMarker) {
      inputChildren = [<Corner icon="asterisk" key="requiredAsterisk" />,<input key="input" />];
    }

    if (this.props.validation && !this.props.validation.valid && !state.focus) {
      classSet.error = true;
      var validationText = isString(this.props.validation) ? this.props.validation : this.props.validation.text;
      if (validationText) {
        validationMessage = (
          <div className="ui red negative pointing above ui label">{validationText}</div>
        );
      }
    }

    let placeholder = this.props.placeholder;

    if (placeholder == null) {
      placeholder = this.props.type === "select" ? "-- Please Select --" : (this.props.type && this.props.type.defaultPlaceholder);
    }

    let defaultValue = this.props.defaultValue;

    inputProps = mergeProps({
      id: id,
      placeholder: placeholder,
      value: this.props.value,
      defaultValue: defaultValue,
      onChange: this.onChange,
      name: this.props.name,
      onFocus: this.onFocus,
      onBlur: this.onBlur,
      disabled: disabled,
      maxLength: this.props.maxLength || this.props.maxChars,
      options: options,
      label: this.props.label,
      icon: icon,
      type: type
    },inputProps,this.props.inputProps);

    if (!inputProps.component) {
      if (type === "select") {
        type = SelectInput;
      }
    }

    var isCheckbox = includes(["checkbox","slider","toggle"],type);

    classSet.inline = isCheckbox;

    // if(inputType.excludeRequiredMarker) {
    //   inputProps.requiredMarker = required;
    //   required = null;
    // }

    var inputComponent = isString(type) ? inputMappings[type] || Input : type;
    var input = React.createElement(inputComponent,inputProps,inputChildren);


    const newProps = mergeProps({classSet,key: this.props.name},pick(this.props,"classSet","className","style"));

    return (
      <div {...newProps}>
        {!isCheckbox && label}
        {input}
        {help}
        {validationMessage}
      </div>
    );
  }
}
