import React from 'react';
import {shallow, mount} from "enzyme";
import Field from "./field";
import Input from "./input";
import {Checkbox,Toggle,Slider} from "./checkbox";
import {CornerLabel} from "./label";

describe("Field with no props",()=>{

  const wrapper = shallow(
    <Field />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a container with css class of field",()=>{
    expect(wrapper.hasClass('field')).toEqual(true);
  });

  it("should contain a text Input",()=>{
    expect(wrapper.find(Input)).toHaveLength(1);
    expect(wrapper.find(Input).prop('type')).toEqual('text');
  });

});

describe("Field with placeholder, value, name, disabled, required, size and icon props",()=>{

  const wrapper = shallow(
    <Field
      placeholder="Placeholder 1"
      value="value1"
      name="name1"
      disabled
      required
      size="small"
      icon="alarm"
    />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have an Input with placeholder of Placeholder 1",()=>{
    expect(wrapper.find(Input).prop('placeholder')).toEqual('Placeholder 1');
  });

  it("should have an Input a value of value1",()=>{
    expect(wrapper.find(Input).prop('value')).toEqual('value1');
  });

  it("should have an Input a name of name1",()=>{
    expect(wrapper.find(Input).prop('name')).toEqual('name1');
  });

  it("should have a container with as css class of disabled and a disabled Input",()=>{
    expect(wrapper.hasClass('disabled')).toEqual(true);
    expect(wrapper.find(Input).prop('disabled')).toEqual(true);
  });

  it("should have an Input with an icon prop of alarm",()=>{
    expect(wrapper.find(Input).prop('icon')).toEqual('alarm');
  });

  it("should contain a CornerLabel with an icon prop of asterisk",()=>{
    expect(wrapper.find(CornerLabel)).toHaveLength(1);
    expect(wrapper.find(CornerLabel).prop('icon')).toEqual('asterisk');
  });

});

describe("Field with inputProps",()=>{

  const inputProps = {size: "small", className: "css-class"};
  const wrapper = shallow(
    <Field
      inputProps={inputProps}
    />
  );

  it("should have an Input with a size prop of small",()=>{
    expect(wrapper.find(Input).prop('size')).toEqual('small');
  });

  it("should have an Input with a css class of css-class",()=>{
    expect(wrapper.find(Input).hasClass('css-class')).toEqual(true);
  });
});

describe("Field with a defaultValue props",()=>{

  const wrapper = shallow(
    <Field
      defaultValue="Value1"
    />
  );

  it("should have an Input with a defaultValue prop of Value1",()=>{
    expect(wrapper.find(Input).prop('defaultValue')).toEqual('Value1');
  });
});

describe("Field with a label with labelProps",()=>{

  const labelProps = {style: {display: "block"}, className: "css-class"};
  const wrapper = shallow(
    <Field
      label="Label 1"
      labelProps={labelProps}
    />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a label with a style of display: block",()=>{
    expect(wrapper.find('label').prop('style')).toEqual({display: "block"});
  });

  it("should have an label with a css class of css-class",()=>{
    expect(wrapper.find('label').hasClass('css-class')).toEqual(true);
  });

});

describe("Field with a label and a hideLabel prop",()=>{
  const wrapper = shallow(
    <Field
      label="Label 1"
      hideLabel
    />
  );

  it("should not have a label",()=>{
    expect(wrapper.find('label')).toHaveLength(0);
  });

});
describe("Field with help text",()=>{

  const wrapper = shallow(
    <Field
      help="Some help!"
    />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a div with a css class of helptext containing the help",()=>{
    expect(wrapper.find('div.helptext')).toHaveLength(1);
    expect(wrapper.find('div.helptext').text()).toEqual('Some help!');
  });
});

describe("Field with type of checkbox",()=>{

  const wrapper = shallow(
    <Field
      type="checkbox"
    />
  );

  it("should contain a Checkbox",()=>{
    expect(wrapper.find(Checkbox)).toHaveLength(1);
  });

});

describe("Field with type of slider",()=>{

  const wrapper = shallow(
    <Field
      type="slider"
    />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain a Slider",()=>{
    expect(wrapper.find(Slider)).toHaveLength(1);
  });

});

describe("Field with type of toggle",()=>{

  const wrapper = shallow(
    <Field
      type="toggle"
    />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain a Toggle",()=>{
    expect(wrapper.find(Toggle)).toHaveLength(1);
  });

});

describe("Field with type of email",()=>{

  const wrapper = shallow(
    <Field
      type="email"
    />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain an Input with a type of email",()=>{
    expect(wrapper.find(Input)).toHaveLength(1);
    expect(wrapper.find(Input).prop('type')).toEqual('email');
  });


});

describe("Field with type of textarea",()=>{

  const wrapper = mount(
    <Field
      type="textarea"
      maxChars="200"
    />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain an Input with a type of textarea and a max",()=>{
    expect(wrapper.find(Input)).toHaveLength(1);
    expect(wrapper.find(Input).prop('type')).toEqual('textarea');
  });

  it("should have a textarea with maxlength 200",()=>{
    expect(wrapper.find('textarea')).toHaveLength(1);
    expect(wrapper.find('textarea').prop('maxLength')).toEqual('200');
  });

  it("should have help text of max 200 characters",()=>{
    expect(wrapper.find('div.helptext')).toHaveLength(1);
    expect(wrapper.find('div.helptext').text()).toEqual('max 200 characters');
  });
});

describe("Field with a type of select",()=>{
  const options = ['first','second'];
  const wrapper = mount(
    <Field
      type="select"
      options={options}
    />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a select with 3 options (2 plus the Please select)",()=>{
    expect(wrapper.find('select')).toHaveLength(1);
    const optionList = wrapper.find('select').children().find('option');
    expect(optionList).toHaveLength(3);
    expect(optionList.at(1).text()).toEqual('first');
    expect(optionList.at(1).prop('value')).toEqual('first');
    expect(optionList.at(2).text()).toEqual('second');
    expect(optionList.at(2).prop('value')).toEqual('second');
  });

});

describe("Field with validation messages",()=>{

  const wrapper = shallow(
    <Field
      validation="Error Message"
    />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should show the validation message",()=>{
    expect(wrapper.find('.red.label.negative')).toHaveLength(1);
    expect(wrapper.find('.red.label.negative').text()).toEqual('Error Message');
  });
});
