import React from "react";
import PropTypes from "prop-types";
import {isArray} from "lodash";

import mergeProps from "../utils/merge-props";

function FlexBase(props) {
  var {component,alignSelf,flexBasis,flexShrink,flexGrow,flex,...otherProps} = props;

  flexGrow = flexGrow == null ? flex : flexGrow;
  if (flexBasis == null) {
    flexBasis = flexGrow ? 0 : "auto";
  }

  const style = {
    alignSelf,
    flexShrink: flexShrink == null ? flex : flexShrink,
    flexGrow,
    flexBasis,
  };

  const newProps = mergeProps({style},otherProps);
  return React.createElement(component,newProps);
}

FlexBase.propTypes = {
  component: PropTypes.any,
  alignSelf: PropTypes.oneOf([
    "auto",
    "flex-start",
    "flex-end",
    "center",
    "baseline",
    "stretch",
  ]),
  flexShrink: PropTypes.number,
  flexGrow: PropTypes.number,
  flex: PropTypes.number,
  flexBasis: PropTypes.oneOfType([PropTypes.number,PropTypes.string]),
};

FlexBase.defaultProps = {
  component: "div",
  alignSelf: "auto",
  flex: 1,
};

export function FlexContainer(props) {
  const {alignItems,justifyContent,flexWrap,flexDirection,...otherProps} = props;
  const style = {
    display: "flex",
    flexDirection,
    alignItems,
    justifyContent,
    flexWrap,
    width: "100%",
    height: "100%",
  };

  const newProps = mergeProps({style},otherProps);

  return <FlexBase {...newProps} />;
}

FlexContainer.propTypes = {
  component: PropTypes.any,
  flexDirection: PropTypes.oneOf([
    "row",
    "column",
    "row-reverse",
    "column-reverse",
  ]),
  alignItems: PropTypes.oneOf([
    "flex-start",
    "flex-end",
    "center",
    "baseline",
    "stretch",
  ]),
  justifyContent: PropTypes.oneOf([
    "flex-start",
    "flex-end",
    "center",
    "space-between",
    "space-around",
  ]),
  flexWrap: PropTypes.oneOf([
    "nowrap",
    "wrap",
    "wrap-reverse",
  ]),
};

FlexContainer.defaultProps = {
  component: "div",
  flexDirection: "row",
  alignItems: "stretch",
};

export function HContainer(props) {
  return <FlexContainer {...props} />;
}

export function VContainer(props) {
  return <FlexContainer flexDirection="column" {...props} />;
}

export function CContainer(props) {
  return <FlexContainer alignItems="center" justifyContent="center" {...props} />;
}

export function FlexItem(props) {
  const style = {
    position: "relative",
  };

  const newProps = mergeProps({style},props);
  return <FlexBase {...newProps} />;
}
