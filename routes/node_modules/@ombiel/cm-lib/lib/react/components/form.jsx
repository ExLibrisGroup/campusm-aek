import "./base.aekcss";
import "./form.aekcss";
import "./icon.aekcss";

import {extend,isArray,find,startCase} from "lodash";

import React from "react";
import PropTypes from "../utils/prop-types-extra";
import Field from "./field";
import mergeProps from "../utils/merge-props";
import Panel from "./panel";
import Pager from "./pager";
import Page from "./page";

import {Padding} from "./segment";


export function FormBody(props) {

  let elementCount = 0;

  let body = [];
  const fields = props.fields || [];
  fields.forEach(function(field) {
    if (isArray(field)) {
      body = body.concat(field.map((element)=>{
        if (element.key) { return element; }
        elementCount += 1;
        return React.cloneElement(element,{key: (`el${elementCount}`)});
      }));
    }
    else {
      body.push(<Field  {...field} />);
    }
  });

  return <div>{body}</div>;

}

FormBody.propTypes = {
  fields: PropTypes.array,
};


export default class Form extends React.Component {

  onChange = (ev,name,value)=>{
    if (this.props.onChange) {
      // for some unknown reason this is getting fired twice, the second time, it gives an undefined value
      // can't see a legitimate reason for having an undefined value so ignore them
      if (value !== undefined) {
        this.props.onChange(ev,name,value,this);
      }
    }
  }

  onSubmit = (ev)=>{
    ev.preventDefault();
    if (this.props.onSubmit) {
      this.props.onSubmit(ev);
    }
  }

  focus = (fieldName)=>{
    if (this.formElement) {
      this.formElement.querySelector(`[name='${fieldName}']`).focus();
    }
  }

  render() {
    const form = this;
    const data = extend({},(this.props.data || {}));

    const {messages} = this.props.validation || {valid: true,messages: {}};

    const fields = this.props.fields.map(function(field) {
      if (isArray(field)) { return field; }
      field = extend({},field);
      if (field.hideLabel === undefined) {
        field.hideLabel = field.label === false;
      }
      field.label = field.label || startCase(field.name);
      if (field.value === undefined) {
        field.value = data[field.name] || "";
      }
      field.validation = field.validation || messages[field.name];
      field.onChange = field.onChange || form.onChange;

      if (!field.key) { field.key = field.name; }

      return field;
    });

    let content;
    let transitionDirection;

    if (this.props.useSubpageFields) {

      var ctx = this.props.ctx;

      if (ctx) {
        transitionDirection = ctx.transitionDirection;
        if (this.props.ctx.query.formField) {
          const currentField = find(fields,{name: this.props.ctx.query.formField});
          if (currentField && currentField.type && currentField.type.Handler) {
            content = React.createElement(currentField.type.Handler,{form: this,field: currentField,key: currentField.name});
          }
        }
      }
    }

    if (!content) {

      const bodyProps = mergeProps(this.props,{form,fields,key: "formBody"});

      const body = React.createElement(this.props.bodyComponent,bodyProps);

      content = [
        this.props.formTop,
        body,
        this.props.formBottom
      ];

      if (this.props.useSubpageFields) {
        content = <Page key="mainForm"><Padding>{content}</Padding></Page>;
      }
    }

    if (this.props.useSubpageFields) {

      return (
        <Panel key="form" component="form" className="ui form" onSubmit={this.onSubmit}>
          <Pager key="form" transitionDirection={transitionDirection}>
            {content}
          </Pager>
        </Panel>
      );
    }

    return <form ref={(el)=>{ this.formElement = el; }} className="ui form" onSubmit={this.onSubmit}>{content}</form>;

  }

}

Form.propTypes = {
  onChange: PropTypes.func,
  onSubmit: PropTypes.func,
  data: PropTypes.object,
  validation: PropTypes.object,
  fields: PropTypes.array,
  useSubpageFields: PropTypes.bool,
  ctx: PropTypes.object,
  bodyComponent: PropTypes.component,
  formTop: PropTypes.node,
  formBottom: PropTypes.node,
};

Form.defaultProps = {
  bodyComponent: FormBody
};
