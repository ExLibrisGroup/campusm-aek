import React from 'react';
import {shallow, mount} from "enzyme";
import Form from "./form";
import Field from "./field";
import Panel from "./panel";
import Pager from "./pager";
import Page from "./page";
import {Segment} from "./segment";

describe("Form with minimal props",()=>{

  const fields = [
    {name: "fieldName"}
  ];

  const shallowWrapperForSnapshot = shallow(
    <Form
      fields={fields}
    />
  );

  const wrapper = mount(
    <Form
      fields={fields}
    />
  );

  it("should match snapshot",()=>{
    expect(shallowWrapperForSnapshot).toMatchSnapshot();
  });

  it("should contain the field",()=>{
    expect(wrapper.find(Field)).toHaveLength(1);
    expect(wrapper.find(Field).prop('name')).toEqual("fieldName");
  });

});

describe("Form with data prop",()=>{

  const fields = [
    {name: "name"}
  ];
  const data = {
    name: "Fred"
  };

  const shallowWrapperForSnapshot = shallow(
    <Form
      fields={fields}
      data={data}
    />
  );

  const wrapper = mount(
    <Form
      fields={fields}
      data={data}
    />
  );

  it("should match snapshot",()=>{
    expect(shallowWrapperForSnapshot).toMatchSnapshot();
  });

  it("should contain the field and data",()=>{
    expect(wrapper.find(Field)).toHaveLength(1);
    expect(wrapper.find(Field).prop('value')).toEqual("Fred");
  });

});

describe("Form with many fields including an array of fields",()=>{
  const fields = [
    {
      name: "name1"
    },
    {
      name: "name2",
      label: "Name label 2",
      value: "Name value 2"
    },
    {
      name: "name3",
      label: "Name label 3",
      hideLabel: true
    },
    [
      <Field type="number" name="name4" />,
      <Field type="number" name="name5" />
    ],
    {
      name: "name6"
    },
  ];

  const data = {
    name1: "namedata1",
    name2: "namedata2",
    name3: "namedata3",
    name6: "namedata6"
  };

  const shallowWrapperForSnapshot = shallow(
    <Form
      fields={fields}
      data={data}
    />
  );

  it("should match snapshot",()=>{
    expect(shallowWrapperForSnapshot).toMatchSnapshot();
  });

  const wrapper = mount(
    <Form
      fields={fields}
      data={data}
    />
  );

  it("should have the fields in the correct order",()=>{
    const fieldComponents = wrapper.find(Field);
    expect(fieldComponents).toHaveLength(6);
    expect(fieldComponents.at(0).prop('name')).toEqual('name1');
    expect(fieldComponents.at(0).prop('label')).toEqual('Name 1');
    expect(fieldComponents.at(1).prop('name')).toEqual('name2');
    expect(fieldComponents.at(1).prop('label')).toEqual('Name label 2');
    expect(fieldComponents.at(2).prop('name')).toEqual('name3');
    expect(fieldComponents.at(2).prop('label')).toEqual('Name label 3');
    expect(fieldComponents.at(3).prop('name')).toEqual('name4');
    expect(fieldComponents.at(4).prop('name')).toEqual('name5');
    expect(fieldComponents.at(5).prop('name')).toEqual('name6');
    expect(fieldComponents.at(5).prop('label')).toEqual('Name 6');
  });

  it("should populate the fields with the data",()=>{
    const fieldComponents = wrapper.find(Field);
    expect(fieldComponents.at(0).prop('value')).toEqual('namedata1');
    expect(fieldComponents.at(1).prop('value')).toEqual('Name value 2');
    expect(fieldComponents.at(2).prop('value')).toEqual('namedata3');
    expect(fieldComponents.at(5).prop('value')).toEqual('namedata6');

  });

  it("should set the field's value from the value prop",()=>{
    const fieldComponents = wrapper.find(Field);
    expect(fieldComponents.at(1).prop('value')).toEqual('Name value 2');
  });

  it("should hide the label for fields with the hideLabel prop",()=>{
    const fieldComponents = wrapper.find(Field);
    expect(fieldComponents.at(1).find('label')).toHaveLength(1);
    expect(fieldComponents.at(2).find('label')).toHaveLength(0);
  });

  it("should not contain a Panel",()=>{
    expect(wrapper.find(Panel)).toHaveLength(0);
  });

});

describe("Form with validation prop",()=>{
  const fields = [
    {
      name: "name1"
    },
    {
      name: "name2",
      label: "Name label 2",
      value: "Name value 2"
    }
  ];

  const data = {
    name1: "namedata1",
    name2: "namedata2"
  };

  const validation = {
    valid: false,
    messages: {
      name1: "Message 1",
      name2: "Message 2"
    }
  };
  const wrapper = mount(
    <Form
      fields={fields}
      data={data}
      validation={validation}
    />
  );

  it("should show the correct messages",()=>{
    expect(wrapper.find(Field).at(0).find('.red.label.negative')).toHaveLength(1);
    expect(wrapper.find(Field).at(0).find('.red.label.negative').text()).toEqual('Message 1');
    expect(wrapper.find(Field).at(1).find('.red.label.negative')).toHaveLength(1);
    expect(wrapper.find(Field).at(1).find('.red.label.negative').text()).toEqual('Message 2');
  });
});

describe("Form with useSubpageFields prop",()=>{
  const fields = [
    {
      name: "name1"
    },
    {
      name: "name2",
    }
  ];
  const data = {
    name1: "namedata1",
    name2: "namedata2"
  };

  const wrapper = shallow(
    <Form
      useSubpageFields
      fields={fields}
      data={data}
    />
  );

  it("should contain a Panel with css classes ui and form",()=>{
    expect(wrapper.find(Panel)).toHaveLength(1);
    expect(wrapper.find(Panel).hasClass('ui')).toEqual(true);
    expect(wrapper.find(Panel).hasClass('form')).toEqual(true);
  });

  it("should contain a Page",()=>{
    expect(wrapper.find(Pager)).toHaveLength(1);
  });

  it("should contain a Page",()=>{
    expect(wrapper.find(Page)).toHaveLength(1);
  });

});

describe("Form with bodyComponent prop",()=>{
  const fields = [
    {
      name: "name1"
    },
    {
      name: "name2",
    }
  ];
  const wrapperFormBody = shallow(
    <Form
      fields={fields}
    />
  );

  it("should contain a FormBody component",()=>{
    expect(wrapperFormBody.children().first().type().name).toEqual('FormBody');
  });

  const wrapper = shallow(
    <Form
      bodyComponent={Segment}
      fields={fields}
    />
  );
  it("should contain a Segment component instead of a FormBody component",()=>{
    expect(wrapper.children().first().type()).toEqual(Segment);
  });
});

describe("Form with formTop and formBottom props",()=>{
  const fields = [
    {
      name: "name1"
    },
    {
      name: "name2",
    }
  ];
  const top = <Segment key="k1" id="top" />;
  const bottom = <Segment key="k2" id="bottom" />;

  const wrapper = shallow(
    <Form
      formTop={top}
      formBottom={bottom}
      fields={fields}
    />
  );

  it("should contain two segments",()=>{
    expect(wrapper.find(Segment)).toHaveLength(2);
  });

  it("should have the formTop Segment before the fields",()=>{
    expect(wrapper.children().first().prop('id')).toEqual('top');
    expect(wrapper.children().last().prop('id')).toEqual('bottom');
  });
});
