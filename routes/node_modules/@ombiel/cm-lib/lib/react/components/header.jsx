import "./base.aekcss";
import "./header.aekcss";
import "./icon.aekcss";


import {includes,isString} from "lodash";
import React from "react";
import PropTypes from "prop-types";

import mergeProps from "../utils/merge-props";
import getChildren from "../utils/children";
import pickHtmlProps from "../utils/pick-html-props";

export function Header(props) {

  let className = "ui header";
  const classSet = {};
  const level = includes(["1","2","3","4","5"],`${props.level}`) ? `${props.level}` : "1";
  let content = getChildren(props);

  if (content.length === 0) {
    content.push(props.text || "-");
  }
  if (content.length === 1 && isString(content[0])) {
    content[0] = <span key="text">{content[0]}</span>;
  }

  if (props.subtext) {
    content.push(<div key="subhead" className="sub header">{props.subtext}</div>);
  }

  if (props.image || props.icon || props.subtext) {

    content = [<div key="content" className="content">{content}</div>];
    if (props.image || props.icon) {
      let img;
      if (props.image) {
        img = <img key="img" role="presentation" src={props.image} aria-hidden="true" />;
      }
      else if (isString(props.icon)) {
        img = <i key="icon" className={`${props.icon} icon`} aria-hidden="true" />;
      }
      else {
        img = <i key="icon" className="icon" aria-hidden="true" style={{paddingLeft: "1rem"}}>{props.icon}</i>;
      }

      if (props.textAlign === "right") {
        content.push(img);
      }
      else if (props.iconAlign === "right") {
        content.push(img);
      }
      else {
        content.unshift(img);
      }
    }
  }

  ["dividing","block","inverted"].forEach((prop)=>{
    if (props[prop]) {
      classSet[prop] = true;
    }
  });

  if (props.textAlign) {
    className = `ui ${props.textAlign} aligned header`;
  }

  if (props.theme) {
    classSet[props.theme] = true;
  }


  props = pickHtmlProps(mergeProps({className},{classSet},props));

  return React.createElement(`h${level}`,props,content);

}

Header.propTypes = {
  level: PropTypes.number,
  text: PropTypes.string,
  theme: PropTypes.string,
  textAlign: PropTypes.string,
  subtext: PropTypes.string,
  image: PropTypes.string,
  icon: PropTypes.any,
  iconAlign: PropTypes.string,
};

Header.defaultProps = {
  level: 1,
};


export function BannerHeader(props) {

  const newProps = mergeProps({className: "banner"},props);

  return <Header {...newProps} />;

}
