import React from 'react';
import {shallow,mount} from "enzyme";
import {Header,BannerHeader} from "./header";

describe("Basic Header",()=>{
  const wrapper = shallow(
    <Header>
      Header
    </Header>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a h1 with a class of ui and header",()=>{
    const HeaderComponent = wrapper.find('h1');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
  });

  it("should have a child span with the text of DisplayText",()=>{
    const HeaderComponent = wrapper.find('h1');
    const textComponent = HeaderComponent.find('span');
    expect(textComponent.text()).toEqual('Header');
  });
});

describe("Header level prop",()=>{
  const wrapper = shallow(
    <Header level={1} />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a h1 with a class of ui and header",()=>{
    const HeaderComponent = wrapper.find('h1');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
  });

  it("should have a h2 with a class of ui and header",()=>{
    wrapper.setProps({level: 2});
    const HeaderComponent = wrapper.find('h2');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
  });

  it("should have a h3 with a class of ui and header",()=>{
    wrapper.setProps({level: 3});
    const HeaderComponent = wrapper.find('h3');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
  });

  it("should have a h4 with a class of ui and header",()=>{
    wrapper.setProps({level: 4});
    const HeaderComponent = wrapper.find('h4');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
  });

  it("should have a h5 with a class of ui and header",()=>{
    wrapper.setProps({level: 5});
    const HeaderComponent = wrapper.find('h5');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
  });

});

describe("Header subtext with levels",()=>{
  const wrapper = shallow(
    <Header level={1} subtext="Sub Heading">Header</Header>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  // H1
  it("should have a h1 with a class of ui and header",()=>{
    const HeaderComponent = wrapper.find('h1');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
  });

  it("should have a div with a class of content and text of Header",()=>{
    const HeaderComponent = wrapper.find('h1');
    const contentComponent = HeaderComponent.find('div.content');
    const textComponent = contentComponent.find('span');
    expect(contentComponent).toHaveLength(1);
    expect(contentComponent.hasClass('content')).toEqual(true);
    expect(textComponent.text()).toEqual('Header');
  });

  it("should have a div with a class of sub and header and text of Sub Heading",()=>{
    const HeaderComponent = wrapper.find('h1');
    const contentComponent = HeaderComponent.find('div.content');
    const subheaderComponent = contentComponent.find('div.sub');
    expect(subheaderComponent).toHaveLength(1);
    expect(subheaderComponent.hasClass('sub')).toEqual(true);
    expect(subheaderComponent.hasClass('header')).toEqual(true);
    expect(subheaderComponent.text()).toEqual('Sub Heading');
  });
  // H2
  it("should have a h1 with a class of ui and header",()=>{
    wrapper.setProps({level: 2});
    const HeaderComponent = wrapper.find('h2');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
  });

  it("should have a div with a class of content and text of Header",()=>{
    wrapper.setProps({level: 2});
    const HeaderComponent = wrapper.find('h2');
    const contentComponent = HeaderComponent.find('div.content');
    const textComponent = contentComponent.find('span');
    expect(contentComponent).toHaveLength(1);
    expect(contentComponent.hasClass('content')).toEqual(true);
    expect(textComponent.text()).toEqual('Header');
  });

  it("should have a div with a class of sub and header and text of Sub Heading",()=>{
    wrapper.setProps({level: 2});
    const HeaderComponent = wrapper.find('h2');
    const contentComponent = HeaderComponent.find('div.content');
    const subheaderComponent = contentComponent.find('div.sub');
    expect(subheaderComponent).toHaveLength(1);
    expect(subheaderComponent.hasClass('sub')).toEqual(true);
    expect(subheaderComponent.hasClass('header')).toEqual(true);
    expect(subheaderComponent.text()).toEqual('Sub Heading');
  });
  // H3
  it("should have a h1 with a class of ui and header",()=>{
    wrapper.setProps({level: 3});
    const HeaderComponent = wrapper.find('h3');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
  });

  it("should have a div with a class of content and text of Header",()=>{
    wrapper.setProps({level: 3});
    const HeaderComponent = wrapper.find('h3');
    const contentComponent = HeaderComponent.find('div.content');
    const textComponent = contentComponent.find('span');
    expect(contentComponent).toHaveLength(1);
    expect(contentComponent.hasClass('content')).toEqual(true);
    expect(textComponent.text()).toEqual('Header');
  });

  it("should have a div with a class of sub and header and text of Sub Heading",()=>{
    wrapper.setProps({level: 3});
    const HeaderComponent = wrapper.find('h3');
    const contentComponent = HeaderComponent.find('div.content');
    const subheaderComponent = contentComponent.find('div.sub');
    expect(subheaderComponent).toHaveLength(1);
    expect(subheaderComponent.hasClass('sub')).toEqual(true);
    expect(subheaderComponent.hasClass('header')).toEqual(true);
    expect(subheaderComponent.text()).toEqual('Sub Heading');
  });
  // H4
  it("should have a h1 with a class of ui and header",()=>{
    wrapper.setProps({level: 4});
    const HeaderComponent = wrapper.find('h4');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
  });

  it("should have a div with a class of content and text of Header",()=>{
    wrapper.setProps({level: 4});
    const HeaderComponent = wrapper.find('h4');
    const contentComponent = HeaderComponent.find('div.content');
    const textComponent = contentComponent.find('span');
    expect(contentComponent).toHaveLength(1);
    expect(contentComponent.hasClass('content')).toEqual(true);
    expect(textComponent.text()).toEqual('Header');
  });

  it("should have a div with a class of sub and header and text of Sub Heading",()=>{
    wrapper.setProps({level: 4});
    const HeaderComponent = wrapper.find('h4');
    const contentComponent = HeaderComponent.find('div.content');
    const subheaderComponent = contentComponent.find('div.sub');
    expect(subheaderComponent).toHaveLength(1);
    expect(subheaderComponent.hasClass('sub')).toEqual(true);
    expect(subheaderComponent.hasClass('header')).toEqual(true);
    expect(subheaderComponent.text()).toEqual('Sub Heading');
  });
  // H5
  it("should have a h1 with a class of ui and header",()=>{
    wrapper.setProps({level: 5});
    const HeaderComponent = wrapper.find('h5');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
  });

  it("should have a div with a class of content and text of Header",()=>{
    wrapper.setProps({level: 5});
    const HeaderComponent = wrapper.find('h5');
    const contentComponent = HeaderComponent.find('div.content');
    const textComponent = contentComponent.find('span');
    expect(contentComponent).toHaveLength(1);
    expect(contentComponent.hasClass('content')).toEqual(true);
    expect(textComponent.text()).toEqual('Header');
  });

  it("should have a div with a class of sub and header and text of Sub Heading",()=>{
    wrapper.setProps({level: 5});
    const HeaderComponent = wrapper.find('h5');
    const contentComponent = HeaderComponent.find('div.content');
    const subheaderComponent = contentComponent.find('div.sub');
    expect(subheaderComponent).toHaveLength(1);
    expect(subheaderComponent.hasClass('sub')).toEqual(true);
    expect(subheaderComponent.hasClass('header')).toEqual(true);
    expect(subheaderComponent.text()).toEqual('Sub Heading');
  });

});

describe("Header with images",()=>{
  const wrapper = shallow(
    <Header image="https://ph.ob1.nu/100/100" level={1}>Image</Header>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a h1 with a class of ui and header and a image with https://ph.ob1.nu/100/100 as the src",()=>{
    const HeaderComponent = wrapper.find('h1');
    const imageComponent = wrapper.find('img');
    const textComponent = wrapper.find('div');
    expect(HeaderComponent).toHaveLength(1);
    expect(imageComponent).toHaveLength(1);
    expect(textComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(imageComponent.prop('src')).toEqual('https://ph.ob1.nu/100/100');
    expect(textComponent.hasClass('content')).toEqual(true);
    expect(textComponent.text()).toEqual('Image');
  });

  it("should have a h2 with a class of ui and header and a image with https://ph.ob1.nu/100/100 as the src",()=>{
    wrapper.setProps({level: 2});
    const HeaderComponent = wrapper.find('h2');
    const imageComponent = wrapper.find('img');
    const textComponent = wrapper.find('div');
    expect(HeaderComponent).toHaveLength(1);
    expect(imageComponent).toHaveLength(1);
    expect(textComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(imageComponent.prop('src')).toEqual('https://ph.ob1.nu/100/100');
    expect(textComponent.hasClass('content')).toEqual(true);
    expect(textComponent.text()).toEqual('Image');
  });

  it("should have a h3 with a class of ui and header and a image with https://ph.ob1.nu/100/100 as the src",()=>{
    wrapper.setProps({level: 3});
    const HeaderComponent = wrapper.find('h3');
    const imageComponent = wrapper.find('img');
    const textComponent = wrapper.find('div');
    expect(HeaderComponent).toHaveLength(1);
    expect(imageComponent).toHaveLength(1);
    expect(textComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(imageComponent.prop('src')).toEqual('https://ph.ob1.nu/100/100');
    expect(textComponent.hasClass('content')).toEqual(true);
    expect(textComponent.text()).toEqual('Image');
  });

  it("should have a h4 with a class of ui and header and a image with https://ph.ob1.nu/100/100 as the src",()=>{
    wrapper.setProps({level: 4});
    const HeaderComponent = wrapper.find('h4');
    const imageComponent = wrapper.find('img');
    const textComponent = wrapper.find('div');
    expect(HeaderComponent).toHaveLength(1);
    expect(imageComponent).toHaveLength(1);
    expect(textComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(imageComponent.prop('src')).toEqual('https://ph.ob1.nu/100/100');
    expect(textComponent.hasClass('content')).toEqual(true);
    expect(textComponent.text()).toEqual('Image');
  });

  it("should have a h5 with a class of ui and header and a image with https://ph.ob1.nu/100/100 as the src",()=>{
    wrapper.setProps({level: 5});
    const HeaderComponent = wrapper.find('h5');
    const imageComponent = wrapper.find('img');
    const textComponent = wrapper.find('div');
    expect(HeaderComponent).toHaveLength(1);
    expect(imageComponent).toHaveLength(1);
    expect(textComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(imageComponent.prop('src')).toEqual('https://ph.ob1.nu/100/100');
    expect(textComponent.hasClass('content')).toEqual(true);
    expect(textComponent.text()).toEqual('Image');
  });

});

describe("Header with Icon",()=>{
  const wrapper = shallow(
    <Header icon="rocket" level={1}>Icon</Header>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a h1 with a class of ui and header and a icon of rocket",()=>{
    const HeaderComponent = wrapper.find('h1');
    const iconComponent = wrapper.find('i');
    const textComponent = wrapper.find('div');
    expect(HeaderComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(textComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(textComponent.hasClass('content')).toEqual(true);
    expect(textComponent.text()).toEqual('Icon');
  });

  it("should have a h2 with a class of ui and header and a icon of rocket",()=>{
    wrapper.setProps({level: 2});
    const HeaderComponent = wrapper.find('h2');
    const iconComponent = wrapper.find('i');
    const textComponent = wrapper.find('div');
    expect(HeaderComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(textComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(textComponent.hasClass('content')).toEqual(true);
    expect(textComponent.text()).toEqual('Icon');
  });

  it("should have a h3 with a class of ui and header and a icon of rocket",()=>{
    wrapper.setProps({level: 3});
    const HeaderComponent = wrapper.find('h3');
    const iconComponent = wrapper.find('i');
    const textComponent = wrapper.find('div');
    expect(HeaderComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(textComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(textComponent.hasClass('content')).toEqual(true);
    expect(textComponent.text()).toEqual('Icon');
  });

  it("should have a h4 with a class of ui and header and a icon of rocket",()=>{
    wrapper.setProps({level: 4});
    const HeaderComponent = wrapper.find('h4');
    const iconComponent = wrapper.find('i');
    const textComponent = wrapper.find('div');
    expect(HeaderComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(textComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(textComponent.hasClass('content')).toEqual(true);
    expect(textComponent.text()).toEqual('Icon');
  });

  it("should have a h5 with a class of ui and header and a icon of rocket",()=>{
    wrapper.setProps({level: 5});
    const HeaderComponent = wrapper.find('h5');
    const iconComponent = wrapper.find('i');
    const textComponent = wrapper.find('div');
    expect(HeaderComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(textComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(textComponent.hasClass('content')).toEqual(true);
    expect(textComponent.text()).toEqual('Icon');
  });
});

describe("Dividing Headers",()=>{
  const wrapper = shallow(
    <Header icon="rocket" dividing level={1}>Image</Header>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have H1 and dividing class",()=>{
    const HeaderComponent = wrapper.find('h1');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('dividing')).toEqual(true);
  });

  it("should have H2 and dividing class",()=>{
    wrapper.setProps({level: 2});
    const HeaderComponent = wrapper.find('h2');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('dividing')).toEqual(true);
  });

  it("should have H3 and dividing class",()=>{
    wrapper.setProps({level: 3});
    const HeaderComponent = wrapper.find('h3');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('dividing')).toEqual(true);
  });

  it("should have H4 and dividing class",()=>{
    wrapper.setProps({level: 4});
    const HeaderComponent = wrapper.find('h4');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('dividing')).toEqual(true);
  });

  it("should have H5 and dividing class",()=>{
    wrapper.setProps({level: 5});
    const HeaderComponent = wrapper.find('h5');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('dividing')).toEqual(true);
  });
});

describe("Block Headers",()=>{
  const wrapper = shallow(
    <Header icon="rocket" block level={1}>Block</Header>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have H1 and block class",()=>{
    const HeaderComponent = wrapper.find('h1');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('block')).toEqual(true);
  });

  it("should have H2 and block class",()=>{
    wrapper.setProps({level: 2});
    const HeaderComponent = wrapper.find('h2');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('block')).toEqual(true);
  });

  it("should have H3 and block class",()=>{
    wrapper.setProps({level: 3});
    const HeaderComponent = wrapper.find('h3');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('block')).toEqual(true);
  });

  it("should have H4 and block class",()=>{
    wrapper.setProps({level: 4});
    const HeaderComponent = wrapper.find('h4');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('block')).toEqual(true);
  });

  it("should have H5 and block class",()=>{
    wrapper.setProps({level: 5});
    const HeaderComponent = wrapper.find('h5');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('block')).toEqual(true);
  });

});

describe("Headers with left text align",()=>{
  const wrapper = shallow(
    <Header textAlign="left" icon="rocket" level={1}>Text Align</Header>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a H1 with text align of Left",()=>{
    const HeaderComponent = wrapper.find('h1');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('left')).toEqual(true);
    expect(HeaderComponent.hasClass('aligned')).toEqual(true);
  });

  it("should have a H2 with text align of Left",()=>{
    wrapper.setProps({level: 2});
    const HeaderComponent = wrapper.find('h2');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('left')).toEqual(true);
    expect(HeaderComponent.hasClass('aligned')).toEqual(true);
  });

  it("should have a H3 with text align of Left",()=>{
    wrapper.setProps({level: 3});
    const HeaderComponent = wrapper.find('h3');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('left')).toEqual(true);
    expect(HeaderComponent.hasClass('aligned')).toEqual(true);
  });

  it("should have a H4 with text align of Left",()=>{
    wrapper.setProps({level: 4});
    const HeaderComponent = wrapper.find('h4');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('left')).toEqual(true);
    expect(HeaderComponent.hasClass('aligned')).toEqual(true);
  });

  it("should have a H5 with text align of Left",()=>{
    wrapper.setProps({level: 5});
    const HeaderComponent = wrapper.find('h5');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('left')).toEqual(true);
    expect(HeaderComponent.hasClass('aligned')).toEqual(true);
  });

});

describe("Headers with right text align",()=>{
  const wrapper = shallow(
    <Header textAlign="right" icon="rocket" level={1}>Text Align</Header>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a H1 with text align of right",()=>{
    const HeaderComponent = wrapper.find('h1');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('right')).toEqual(true);
    expect(HeaderComponent.hasClass('aligned')).toEqual(true);
  });

  it("should have a H2 with text align of right",()=>{
    wrapper.setProps({level: 2});
    const HeaderComponent = wrapper.find('h2');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('right')).toEqual(true);
    expect(HeaderComponent.hasClass('aligned')).toEqual(true);
  });

  it("should have a H3 with text align of right",()=>{
    wrapper.setProps({level: 3});
    const HeaderComponent = wrapper.find('h3');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('right')).toEqual(true);
    expect(HeaderComponent.hasClass('aligned')).toEqual(true);
  });

  it("should have a H4 with text align of right",()=>{
    wrapper.setProps({level: 4});
    const HeaderComponent = wrapper.find('h4');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('right')).toEqual(true);
    expect(HeaderComponent.hasClass('aligned')).toEqual(true);
  });

  it("should have a H5 with text align of right",()=>{
    wrapper.setProps({level: 5});
    const HeaderComponent = wrapper.find('h5');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('right')).toEqual(true);
    expect(HeaderComponent.hasClass('aligned')).toEqual(true);
  });

});

describe("Headers with center text align",()=>{
  const wrapper = shallow(
    <Header textAlign="center" icon="rocket" level={1}>Text Align</Header>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a H1 with text align of center",()=>{
    const HeaderComponent = wrapper.find('h1');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('center')).toEqual(true);
    expect(HeaderComponent.hasClass('aligned')).toEqual(true);
  });

  it("should have a H2 with text align of center",()=>{
    wrapper.setProps({level: 2});
    const HeaderComponent = wrapper.find('h2');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('center')).toEqual(true);
    expect(HeaderComponent.hasClass('aligned')).toEqual(true);
  });

  it("should have a H3 with text align of center",()=>{
    wrapper.setProps({level: 3});
    const HeaderComponent = wrapper.find('h3');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('center')).toEqual(true);
    expect(HeaderComponent.hasClass('aligned')).toEqual(true);
  });

  it("should have a H4 with text align of center",()=>{
    wrapper.setProps({level: 4});
    const HeaderComponent = wrapper.find('h4');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('center')).toEqual(true);
    expect(HeaderComponent.hasClass('aligned')).toEqual(true);
  });

  it("should have a H5 with text align of center",()=>{
    wrapper.setProps({level: 5});
    const HeaderComponent = wrapper.find('h5');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('center')).toEqual(true);
    expect(HeaderComponent.hasClass('aligned')).toEqual(true);
  });

});

describe("Headers with alt theme",()=>{
  const wrapper = shallow(
    <Header icon="rocket" theme="alt" subtext="Sub Heading" level={1}>Alt Theme</Header>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a H1 with theme of alt",()=>{
    const HeaderComponent = wrapper.find('h1');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('alt')).toEqual(true);
  });

  it("should have a H2 with theme of alt",()=>{
    wrapper.setProps({level: 2});
    const HeaderComponent = wrapper.find('h2');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('alt')).toEqual(true);
  });

  it("should have a H3 with theme of alt",()=>{
    wrapper.setProps({level: 3});
    const HeaderComponent = wrapper.find('h3');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('alt')).toEqual(true);
  });

  it("should have a H4 with theme of alt",()=>{
    wrapper.setProps({level: 4});
    const HeaderComponent = wrapper.find('h4');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('alt')).toEqual(true);
  });

  it("should have a H5 with theme of alt",()=>{
    wrapper.setProps({level: 5});
    const HeaderComponent = wrapper.find('h5');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('alt')).toEqual(true);
  });

});

describe("Headers Inverted",()=>{
  const wrapper = shallow(
    <Header icon="rocket" inverted theme="alt" subtext="Sub Heading" level={1}>Inverted</Header>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a H1 with class of inverted",()=>{
    const HeaderComponent = wrapper.find('h1');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('inverted')).toEqual(true);
  });

  it("should have a H2 with class of inverted",()=>{
    wrapper.setProps({level: 2});
    const HeaderComponent = wrapper.find('h2');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('inverted')).toEqual(true);
  });

  it("should have a H3 with class of inverted",()=>{
    wrapper.setProps({level: 3});
    const HeaderComponent = wrapper.find('h3');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('inverted')).toEqual(true);
  });

  it("should have a H4 with class of inverted",()=>{
    wrapper.setProps({level: 4});
    const HeaderComponent = wrapper.find('h4');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('inverted')).toEqual(true);
  });

  it("should have a H5 with class of inverted",()=>{
    wrapper.setProps({level: 5});
    const HeaderComponent = wrapper.find('h5');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('inverted')).toEqual(true);
  });

});

describe("Banner Headers",()=>{
  const wrapper = mount(
    <BannerHeader theme="alt" subtext="Sub Heading" level={1}>Banner Header</BannerHeader>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a H1 with class of banner",()=>{
    const HeaderComponent = wrapper.find('h1');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('banner')).toEqual(true);
  });

  it("should have a H2 with class of banner",()=>{
    wrapper.setProps({level: 2});
    const HeaderComponent = wrapper.find('h2');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('banner')).toEqual(true);
  });

  it("should have a H3 with class of banner",()=>{
    wrapper.setProps({level: 3});
    const HeaderComponent = wrapper.find('h3');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('banner')).toEqual(true);
  });

  it("should have a H4 with class of banner",()=>{
    wrapper.setProps({level: 4});
    const HeaderComponent = wrapper.find('h4');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('banner')).toEqual(true);
  });

  it("should have a H5 with class of banner",()=>{
    wrapper.setProps({level: 5});
    const HeaderComponent = wrapper.find('h5');
    expect(HeaderComponent).toHaveLength(1);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('banner')).toEqual(true);
  });

});

describe("Banner Headers with Icon",()=>{
  const wrapper = mount(
    <BannerHeader theme="alt" icon="rocket" subtext="Sub Heading" level={1}>Banner Header</BannerHeader>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a H1 with class of banner and a Icon of rocket",()=>{
    const HeaderComponent = wrapper.find('h1');
    const iconComponent = wrapper.find('i');
    expect(HeaderComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('banner')).toEqual(true);
    expect(HeaderComponent.prop('icon')).toEqual('rocket');
  });

  it("should have a H2 with class of banner and a Icon of rocket",()=>{
    wrapper.setProps({level: 2});
    const HeaderComponent = wrapper.find('h2');
    const iconComponent = wrapper.find('i');
    expect(HeaderComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('banner')).toEqual(true);
    expect(HeaderComponent.prop('icon')).toEqual('rocket');
  });

  it("should have a H3 with class of banner and a Icon of rocket",()=>{
    wrapper.setProps({level: 3});
    const HeaderComponent = wrapper.find('h3');
    const iconComponent = wrapper.find('i');
    expect(HeaderComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('banner')).toEqual(true);
    expect(HeaderComponent.prop('icon')).toEqual('rocket');
  });

  it("should have a H4 with class of banner and a Icon of rocket",()=>{
    wrapper.setProps({level: 4});
    const HeaderComponent = wrapper.find('h4');
    const iconComponent = wrapper.find('i');
    expect(HeaderComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('banner')).toEqual(true);
    expect(HeaderComponent.prop('icon')).toEqual('rocket');
  });

  it("should have a H5 with class of banner and a Icon of rocket",()=>{
    wrapper.setProps({level: 5});
    const HeaderComponent = wrapper.find('h5');
    const iconComponent = wrapper.find('i');
    expect(HeaderComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('banner')).toEqual(true);
    expect(HeaderComponent.prop('icon')).toEqual('rocket');
  });
});

describe("Banner Headers with Icon aligned right",()=>{
  const wrapper = mount(
    <BannerHeader theme="alt" iconAlign="right" icon="rocket" subtext="Sub Heading" level={1}>Banner Header</BannerHeader>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a H1 with class of banner and a Icon of rocket as the second element in the DOM",()=>{
    const HeaderComponent = wrapper.find('h1');
    const iconComponent = wrapper.find('i');
    expect(HeaderComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(HeaderComponent.childAt(0).type()).toEqual('div');
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('banner')).toEqual(true);
    expect(HeaderComponent.prop('icon')).toEqual('rocket');
  });

  it("should have a H2 with class of banner and a Icon of rocket",()=>{
    wrapper.setProps({level: 2});
    const HeaderComponent = wrapper.find('h2');
    const iconComponent = wrapper.find('i');
    expect(HeaderComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(HeaderComponent.childAt(0).type()).toEqual('div');
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('banner')).toEqual(true);
    expect(HeaderComponent.prop('icon')).toEqual('rocket');
  });

  it("should have a H3 with class of banner and a Icon of rocket",()=>{
    wrapper.setProps({level: 3});
    const HeaderComponent = wrapper.find('h3');
    const iconComponent = wrapper.find('i');
    expect(HeaderComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(HeaderComponent.childAt(0).type()).toEqual('div');
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('banner')).toEqual(true);
    expect(HeaderComponent.prop('icon')).toEqual('rocket');
  });

  it("should have a H4 with class of banner and a Icon of rocket",()=>{
    wrapper.setProps({level: 4});
    const HeaderComponent = wrapper.find('h4');
    const iconComponent = wrapper.find('i');
    expect(HeaderComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(HeaderComponent.childAt(0).type()).toEqual('div');
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('banner')).toEqual(true);
    expect(HeaderComponent.prop('icon')).toEqual('rocket');
  });

  it("should have a H5 with class of banner and a Icon of rocket",()=>{
    wrapper.setProps({level: 5});
    const HeaderComponent = wrapper.find('h5');
    const iconComponent = wrapper.find('i');
    expect(HeaderComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(HeaderComponent.childAt(0).type()).toEqual('div');
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(HeaderComponent.hasClass('ui')).toEqual(true);
    expect(HeaderComponent.hasClass('header')).toEqual(true);
    expect(HeaderComponent.hasClass('banner')).toEqual(true);
    expect(HeaderComponent.prop('icon')).toEqual('rocket');
  });

});
