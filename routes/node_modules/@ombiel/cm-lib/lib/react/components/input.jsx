import "./base.aekcss";
import "./input.aekcss";
import "./form.aekcss";
import "./icon.aekcss";

import {isString,includes,clone} from "lodash";

import React from "react";
import ReactDOM from "react-dom";
import PropTypes from "../utils/prop-types-extra";
import mergeProps from "../utils/merge-props";
import pickHtmlProps from "../utils/pick-html-props";
import getChildren from "../utils/children";
import {Button} from "./button";
import {Label,Tag,CornerLabel as Corner} from "./label";


function isButton(component) {
  return includes([Button],component.type);
}

function isLabel(component) {
  return includes([Label,Tag,Corner],component.type);
}

function isInput(component) {
  return includes(["input","textarea"],component.type);
}

export default class Input extends React.Component {

  onInputRef = (el)=>{
    if (el) {
      this.inputElement = ReactDOM.findDOMNode(el); //eslint-disable-line react/no-find-dom-node
      if (this.inputElement) { this.onInputReady(this.inputElement); }
    }
    else {
      this.inputElement = null;
    }
  }

  onInputReady(el) {
    const {onInputReady} = this.props;
    if (onInputReady) {
      onInputReady(el);
    }
  }

  focus = ()=>{
    const {inputElement} = this;
    if (inputElement) {
      inputElement.focus();
    }
  }

  render() {

    const component = this.props.component || (this.props.type === "textarea" && "textarea") || "input";
    let containerProps = {classSet: {ui: true,input: true}};
    let inputProps = {classSet: {}};
    const children = getChildren(this);
    const newProps = clone(this.props);


    // container states
    ["loading","error","transparent","inverted","fluid"].forEach((prop)=>{
      if (this.props[prop]) { containerProps.classSet[prop] = true; }
    });

    if (this.props.size) {
      containerProps.classSet[this.props.size] = true;
    }



    // icons
    let iconLeft;
    let iconRight;

    // if loading, needs an icon as a placeholder
    if (!this.props.icon && this.props.loading) {
      newProps.icon = "circle";
    }

    if (newProps.icon) {
      const iconProps = mergeProps({key: "icon",className: `${newProps.icon} icon`,"aria-hidden": true},this.props.iconProps);
      const icon = <i {...iconProps} />;
      if (this.props.iconLeft) {
        iconLeft = icon;
      }
      else {
        iconRight = icon;
      }
    }


    inputProps = mergeProps(inputProps,newProps,{
      key: "input",
      children: null,
      ref: this.onInputRef,
    });

    if (isString(component)) {
      if (component === "input") {
        inputProps = pickHtmlProps(inputProps,{exclude: ["children"]});
      }
      else {
        inputProps = pickHtmlProps(inputProps);
      }

    }

    const input = React.createElement(component,inputProps);
    let hasInput;
    let labelRight;
    let buttonRight;


    let content = children.filter(function(child) {

      if (isLabel(child)) {
        containerProps.classSet.right = hasInput;
        if (child.type === Corner) {
          if (hasInput) {
            containerProps.classSet.corner = true;
          }
          else {
            containerProps.classSet["left corner"] = true;
          }
        }
        containerProps.classSet.labeled = true;
        labelRight = !!hasInput;
        return true;
      }

      if (isButton(child)) {
        if (!hasInput) {
          containerProps.classSet["left action"] = true;
        }
        else {
          containerProps.classSet.action = true;
        }
        buttonRight = !!hasInput;
        return true;
      }

      if (isInput(child)) {
        hasInput = true;
        return true;
      }

      return false;

    }).map(function(child) {

      if (!child.type) { return child; }

      if (child.type === Corner && !containerProps.classSet.right) {
        return React.cloneElement(child,{className: "left"});
      }

      if (child.type === "input" || child.type === "textarea") {
        hasInput = true;
        return [iconLeft,React.cloneElement(input,mergeProps(input.props,child.props)),iconRight];
      }

      return React.cloneElement(child,{key: isButton(child) ? "button" : "label"});
    });

    if (!hasInput) { content = content.concat([iconLeft,input,iconRight]); }

    if (newProps.icon) {
      if ((labelRight || buttonRight) || (newProps.iconLeft && labelRight !== false && buttonRight !== false)) {
        containerProps.classSet["left icon"] = true;
      }
      else {
        containerProps.classSet.icon = true;
      }

    }

    containerProps = mergeProps(containerProps,newProps.containerProps);

    if (isString(newProps.containerComponent)) {
      containerProps = pickHtmlProps(containerProps);
    }

    return React.createElement(this.props.containerComponent,containerProps,content);

  }

}

Input.propTypes = {
  component: PropTypes.component,
  type: PropTypes.oneOfType([PropTypes.string,PropTypes.func]),
  size: PropTypes.string,
  icon: PropTypes.string,
  loading: PropTypes.bool,
  iconProps: PropTypes.object,
  iconLeft: PropTypes.bool,
  containerComponent: PropTypes.component,
  onInputReady: PropTypes.func,
};

Input.defaultProps = {
  containerComponent: "div",
  type: "text"
};
