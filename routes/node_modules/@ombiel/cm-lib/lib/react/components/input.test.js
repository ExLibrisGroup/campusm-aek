import React from 'react';
import {shallow} from "enzyme";
import Input from "./input";
import {Label, CornerLabel} from "./label";
import {Button} from "./button";

describe("Input with no props",()=>{

  const wrapper = shallow(
    <Input />
  );


  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a container with css classes ui and input",()=>{
    expect(wrapper.hasClass('ui')).toEqual(true);
    expect(wrapper.hasClass('input')).toEqual(true);
  });

  it("should contain an input element of type text",()=>{
    expect(wrapper.find('input')).toHaveLength(1);
    expect(wrapper.find('input').prop('type')).toEqual('text');
  });

});


describe("Input with prop type of date",()=>{

  const wrapper = shallow(
    <Input
      type="date"
    />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a container with css classes ui and input",()=>{
    expect(wrapper.hasClass('ui')).toEqual(true);
    expect(wrapper.hasClass('input')).toEqual(true);
  });

  it("should contain an input element of type date",()=>{
    expect(wrapper.find('input')).toHaveLength(1);
    expect(wrapper.find('input').prop('type')).toEqual('date');
  });

});

describe("Input with prop type of button",()=>{

  const wrapper = shallow(
    <Input
      type="button"
    />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a container with css classes ui and input",()=>{
    expect(wrapper.hasClass('ui')).toEqual(true);
    expect(wrapper.hasClass('input')).toEqual(true);
  });

  it("should contain an input element of type button",()=>{
    expect(wrapper.find('input')).toHaveLength(1);
    expect(wrapper.find('input').prop('type')).toEqual('button');
  });

});

describe("Input with prop type of submit",()=>{

  const wrapper = shallow(
    <Input
      type="submit"
    />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a container with css classes ui and input",()=>{
    expect(wrapper.hasClass('ui')).toEqual(true);
    expect(wrapper.hasClass('input')).toEqual(true);
  });

  it("should contain an input element of type submit",()=>{
    expect(wrapper.find('input')).toHaveLength(1);
    expect(wrapper.find('input').prop('type')).toEqual('submit');
  });

});

describe("Input with prop type of password",()=>{

  const wrapper = shallow(
    <Input
      type="password"
    />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a container with css classes ui and input",()=>{
    expect(wrapper.hasClass('ui')).toEqual(true);
    expect(wrapper.hasClass('input')).toEqual(true);
  });

  it("should contain an input element of type password",()=>{
    expect(wrapper.find('input')).toHaveLength(1);
    expect(wrapper.find('input').prop('type')).toEqual('password');
  });

});

describe("Input with prop type of textarea",()=>{

  const wrapper = shallow(
    <Input
      type="textarea"
    />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a container with css classes ui and input",()=>{
    expect(wrapper.hasClass('ui')).toEqual(true);
    expect(wrapper.hasClass('input')).toEqual(true);
  });

  it("should contain an textarea element",()=>{
    expect(wrapper.find('textarea')).toHaveLength(1);
  });

});

describe("Input with container state props",()=>{

  const wrapper = shallow(
    <Input
      loading
      error
      transparent
      inverted
      fluid
      size="small"
    />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a container with css class loading and icon circle",()=>{
    expect(wrapper.hasClass('loading')).toEqual(true);
    expect(wrapper.find('i').hasClass('circle')).toEqual(true);
  });

  it("should have a container with css class error",()=>{
    expect(wrapper.hasClass('error')).toEqual(true);
  });

  it("should have a container with css class transparent",()=>{
    expect(wrapper.hasClass('transparent')).toEqual(true);
  });

  it("should have a container with css class inverted",()=>{
    expect(wrapper.hasClass('inverted')).toEqual(true);
  });

  it("should have a container with css class fluid",()=>{
    expect(wrapper.hasClass('fluid')).toEqual(true);
  });

  it("should have a container with css class small",()=>{
    expect(wrapper.hasClass('small')).toEqual(true);
  });

});

describe("Container component and props",()=>{
  const props = {
    style: {
      display: "block"
    },
    title: "Test"
  };
  const wrapper = shallow(
    <Input
      containerComponent="section"
      containerProps={props}
    />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a container of type section",()=>{
    expect(wrapper.type()).toEqual('section');
  });

  it("should have a container with the correct props",()=>{
    expect(wrapper.prop('style')).toEqual({display: "block"});
    expect(wrapper.prop('title')).toEqual('Test');
  });

});

describe("Input with icon prop",()=>{
  const wrapper = shallow(
    <Input
      icon="alarm"
    />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a container with css class icon",()=>{
    expect(wrapper.hasClass('icon')).toEqual(true);
  });

  it("should contain an i tag with css classes icon and alarm",()=>{
    expect(wrapper.find('i')).toHaveLength(1);
    expect(wrapper.find('i').hasClass('icon')).toEqual(true);
    expect(wrapper.find('i').hasClass('alarm')).toEqual(true);
  });

  it("should have the input tag before the i tag",()=>{
    expect(wrapper.children().first().type()).toEqual('input');
  });

  it("should contain an input tag with attribute of icon",()=>{
    expect(wrapper.find('input')).toHaveLength(1);
    expect(wrapper.find('input').prop('icon')).toEqual('alarm');
  });

  const wrapper2 = shallow(
    <Input
      icon="alarm"
      iconLeft
    />
  );

  it("should have a container with css class left if iconLeft prop is set",()=>{
    expect(wrapper2.hasClass('left')).toEqual(true);
  });

  it("should have the i tag before the input tag if iconLeft prop is set",()=>{
    expect(wrapper2.children().first().type()).toEqual('i');
  });

});

describe("Input with children",()=>{
  // label input textarea button

  const wrapper = shallow(
    <Input
      icon="alarm"
    >
      <Button
        href="testhref"
      >
        Button 1
      </Button>
      <Label
        size="small"
      >
        Label1
      </Label>
      <Button>
        Button 2
      </Button>
      <Label
        size="large"
      >
        Label2
      </Label>
      <div id="nodiv">
        Ignored
      </div>
      <CornerLabel
        icon="test"
      >
      </CornerLabel>
    </Input>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain two Buttons with the correct props",()=>{
    expect(wrapper.find(Button)).toHaveLength(2);
    expect(wrapper.find(Button).at(0).prop('href')).toEqual('testhref');
    expect(wrapper.find(Button).at(1).prop('href')).toBeUndefined();
    expect(wrapper.find(Button).at(0).prop('children')).toEqual('Button 1');
    expect(wrapper.find(Button).at(1).prop('children')).toEqual('Button 2');
  });

  it("should contain two Labels with the correct props",()=>{
    expect(wrapper.find(Label)).toHaveLength(2);
    expect(wrapper.find(Label).at(0).prop('size')).toEqual('small');
    expect(wrapper.find(Label).at(1).prop('size')).toEqual('large');
    expect(wrapper.find(Label).at(0).prop('children')).toEqual('Label1');
    expect(wrapper.find(Label).at(1).prop('children')).toEqual('Label2');
  });

  it("should contain a CornerLabel with a css class of left",()=>{
    expect(wrapper.find(CornerLabel)).toHaveLength(1);
    expect(wrapper.find(CornerLabel).hasClass('left')).toEqual(true);
  });

  it("should not contain other components or elements",()=>{
    expect(wrapper.find('div.nodiv')).toHaveLength(0);
  });

});
