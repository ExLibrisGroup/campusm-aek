import "./base.aekcss";
import "./label.aekcss";
import "./icon.aekcss";


import React from "react";
import PropTypes from "prop-types";
import {omit,isString,pick} from "lodash";

import mergeProps from "../utils/merge-props";
import pickHtmlProps from "../utils/pick-html-props";

export function Label(props) {

  const classSet = { ui: true };

  // states
  ["circular"].forEach(function(prop) {
    if (props[prop]) { classSet[prop] = true; }
  });

  const icon = props.icon && <i key="icon" className={`${props.icon} icon`} aria-hidden="true" />;

  const detail = props.detail && <span key="detail" className="detail">{props.detail}</span>;

  if (props.pointing) {
    classSet[props.pointing] = true;
    classSet.pointing = true;
  }

  ["variation","theme","size"].forEach(function(prop) {
    if (props[prop]) { classSet[props[prop]] = true; }
  });

  classSet.label = true;

  let newProps = mergeProps({classSet},props);

  const {component} = props;

  if (isString(component)) {
    newProps = pickHtmlProps(newProps);
  }

  return React.createElement(component,newProps,[icon,props.children,detail]);

}

Label.propTypes = {
  icon: PropTypes.any,
  detail: PropTypes.any,
  pointing: PropTypes.string,
  component: PropTypes.any,
  children: PropTypes.any,
};

Label.defaultProps = {
  component: "div"
};



export function CornerLabel(props) {

  const className = props.alignLeft ? "left corner" : "corner";

  const newProps = mergeProps({className},omit(props,["children"]));

  return <Label {...newProps} />;

}

CornerLabel.propTypes = {
  alignLeft: PropTypes.bool,
};


export function AttachedLabel(props) {

  const classSet = pick(props,"top","bottom","left","right");
  classSet.attached = true;

  const newProps = mergeProps({classSet},props);

  return <Label {...newProps} />;

}


export function Tag(props) {

  const newProps = mergeProps({
    className: "tag",
  },props);

  return <Label {...newProps} />;

}

export function Ribbon(props) {

  var classSet = {
    right: props.alignRight,
    ribbon: true,
    absolute: props.absolute,
  };

  const newProps = mergeProps({classSet},props);

  return <Label {...newProps} />;

}

Ribbon.propTypes = {
  alignRight: PropTypes.bool,
  absolute: PropTypes.bool,
};
