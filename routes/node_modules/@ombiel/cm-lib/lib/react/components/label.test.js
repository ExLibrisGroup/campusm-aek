import React from 'react';
import {mount} from "enzyme";
import {Label, CornerLabel, Tag, Ribbon, AttachedLabel} from "./label";

describe("Label no props",()=>{
  const wrapper = mount(
    <Label>Label</Label>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a div with the class of label and ui",()=>{
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.text()).toEqual('Label');
  });
});

describe("Label with icon",()=>{
  const wrapper = mount(
    <Label icon="rocket">Label</Label>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a div with the class of label and ui || No Theme",()=>{
    const labelComponent = wrapper.find('div');
    const iconComponent = wrapper.find('i');
    expect(labelComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.prop('icon')).toEqual('rocket');
    expect(labelComponent.text()).toEqual('Label');
  });

  it("should have a div with the class of label and ui || Prime Theme",()=>{
    wrapper.setProps({theme: "prime"});
    const labelComponent = wrapper.find('div');
    const iconComponent = wrapper.find('i');
    expect(labelComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('prime')).toEqual(true);
    expect(labelComponent.prop('icon')).toEqual('rocket');
    expect(labelComponent.text()).toEqual('Label');
  });

  it("should have a div with the class of label and ui || Alt Theme",()=>{
    wrapper.setProps({theme: "alt"});
    const labelComponent = wrapper.find('div');
    const iconComponent = wrapper.find('i');
    expect(labelComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('alt')).toEqual(true);
    expect(labelComponent.prop('icon')).toEqual('rocket');
    expect(labelComponent.text()).toEqual('Label');
  });
});

describe("Label with icon, detail and theme",()=>{
  const wrapper = mount(
    <Label icon="home" detail="23">Label</Label>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a div with the class of label and ui with an icon and a span with details in. With no Theme",()=>{
    const labelComponent = wrapper.find('div');
    const iconComponent = wrapper.find('i');
    const detailComponent = wrapper.find('span');
    expect(labelComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(detailComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('prime')).toEqual(false);
    expect(iconComponent.hasClass('home')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(detailComponent.hasClass('detail')).toEqual(true);
    expect(detailComponent.text()).toEqual('23');
  });

  it("should have a div with the class of label and ui with an icon and a span with details in. With a Theme of prime",()=>{
    wrapper.setProps({theme: "prime"});
    const labelComponent = wrapper.find('div');
    const iconComponent = wrapper.find('i');
    const detailComponent = wrapper.find('span');
    expect(labelComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(detailComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('prime')).toEqual(true);
    expect(iconComponent.hasClass('home')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(detailComponent.hasClass('detail')).toEqual(true);
    expect(detailComponent.text()).toEqual('23');
  });

  it("should have a div with the class of label and ui with an icon and a span with details in. With a Theme of alt",()=>{
    wrapper.setProps({theme: "alt"});
    const labelComponent = wrapper.find('div');
    const iconComponent = wrapper.find('i');
    const detailComponent = wrapper.find('span');
    expect(labelComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(detailComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('alt')).toEqual(true);
    expect(iconComponent.hasClass('home')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(detailComponent.hasClass('detail')).toEqual(true);
    expect(detailComponent.text()).toEqual('23');
  });

});

describe("Label with pointer",()=>{
  const wrapper = mount(
    <Label pointing="above">Pointing</Label>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a div with the class of label, ui, pointing and above",()=>{
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('pointing')).toEqual(true);
    expect(labelComponent.hasClass('above')).toEqual(true);
    expect(labelComponent.text()).toEqual('Pointing');
  });

  it("should have a div with the class of label, ui, pointing and below",()=>{
    wrapper.setProps({pointing: "below"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('pointing')).toEqual(true);
    expect(labelComponent.hasClass('below')).toEqual(true);
    expect(labelComponent.text()).toEqual('Pointing');
  });

  it("should have a div with the class of label, ui, pointing and left",()=>{
    wrapper.setProps({pointing: "left"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('pointing')).toEqual(true);
    expect(labelComponent.hasClass('left')).toEqual(true);
    expect(labelComponent.text()).toEqual('Pointing');
  });

  it("should have a div with the class of label, ui, pointing and right",()=>{
    wrapper.setProps({pointing: "right"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('pointing')).toEqual(true);
    expect(labelComponent.hasClass('right')).toEqual(true);
    expect(labelComponent.text()).toEqual('Pointing');
  });
});

describe("Label Sizes",()=>{
  const wrapper = mount(
    <Label size="mini">Size</Label>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a div with the class of label, ui and mini",()=>{
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('mini')).toEqual(true);
    expect(labelComponent.text()).toEqual('Size');
  });

  it("should have a div with the class of label, ui and tiny",()=>{
    wrapper.setProps({size: "tiny"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('tiny')).toEqual(true);
    expect(labelComponent.text()).toEqual('Size');
  });

  it("should have a div with the class of label, ui and small",()=>{
    wrapper.setProps({size: "small"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('small')).toEqual(true);
    expect(labelComponent.text()).toEqual('Size');
  });

  it("should have a div with the class of label, ui and medium",()=>{
    wrapper.setProps({size: "medium"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('medium')).toEqual(true);
    expect(labelComponent.text()).toEqual('Size');
  });

  it("should have a div with the class of label, ui and large",()=>{
    wrapper.setProps({size: "large"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('large')).toEqual(true);
    expect(labelComponent.text()).toEqual('Size');
  });

  it("should have a div with the class of label, ui and big",()=>{
    wrapper.setProps({size: "big"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('big')).toEqual(true);
    expect(labelComponent.text()).toEqual('Size');
  });

  it("should have a div with the class of label, ui and huge",()=>{
    wrapper.setProps({size: "huge"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('huge')).toEqual(true);
    expect(labelComponent.text()).toEqual('Size');
  });

  it("should have a div with the class of label, ui and massive",()=>{
    wrapper.setProps({size: "massive"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('massive')).toEqual(true);
    expect(labelComponent.text()).toEqual('Size');
  });

});

// Corner Label Tests

describe("CornerLabel no props",()=>{
  const wrapper = mount(
    <CornerLabel />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a div with the class of label ui and corner",()=>{
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('corner')).toEqual(true);
  });
});

describe("CornerLabel alignLeft",()=>{
  const wrapper = mount(
    <CornerLabel alignLeft />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a div with the class of label ui and corner",()=>{
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('left')).toEqual(true);
    expect(labelComponent.hasClass('corner')).toEqual(true);
  });
});

describe("CornerLabel with icon",()=>{
  const wrapper = mount(
    <CornerLabel icon="rocket" />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a div with the class of label, corner and ui || No Theme",()=>{
    const labelComponent = wrapper.find('div');
    const iconComponent = wrapper.find('i');
    expect(labelComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('corner')).toEqual(true);
    expect(labelComponent.prop('icon')).toEqual('rocket');
  });

  it("should have a div with the class of label, corner and ui || Prime Theme",()=>{
    wrapper.setProps({theme: "prime"});
    const labelComponent = wrapper.find('div');
    const iconComponent = wrapper.find('i');
    expect(labelComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('prime')).toEqual(true);
    expect(labelComponent.hasClass('corner')).toEqual(true);
    expect(labelComponent.prop('icon')).toEqual('rocket');
  });

  it("should have a div with the class of label, corner and ui || Alt Theme",()=>{
    wrapper.setProps({theme: "alt"});
    const labelComponent = wrapper.find('div');
    const iconComponent = wrapper.find('i');
    expect(labelComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('alt')).toEqual(true);
    expect(labelComponent.hasClass('corner')).toEqual(true);
    expect(labelComponent.prop('icon')).toEqual('rocket');
  });
});

describe("CornerLabel with icon, detail and theme",()=>{
  const wrapper = mount(
    <CornerLabel icon="home" detail="23" />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a div with the class of label and ui with an icon and a span with details in. With no Theme",()=>{
    const labelComponent = wrapper.find('div');
    const iconComponent = wrapper.find('i');
    const detailComponent = wrapper.find('span');
    expect(labelComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(detailComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('prime')).toEqual(false);
    expect(iconComponent.hasClass('home')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(labelComponent.hasClass('corner')).toEqual(true);
    expect(detailComponent.hasClass('detail')).toEqual(true);
    expect(detailComponent.text()).toEqual('23');
  });

  it("should have a div with the class of label and ui with an icon and a span with details in. With a Theme of prime",()=>{
    wrapper.setProps({theme: "prime"});
    const labelComponent = wrapper.find('div');
    const iconComponent = wrapper.find('i');
    const detailComponent = wrapper.find('span');
    expect(labelComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(detailComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('prime')).toEqual(true);
    expect(iconComponent.hasClass('home')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(labelComponent.hasClass('corner')).toEqual(true);
    expect(detailComponent.hasClass('detail')).toEqual(true);
    expect(detailComponent.text()).toEqual('23');
  });

  it("should have a div with the class of label and ui with an icon and a span with details in. With a Theme of alt",()=>{
    wrapper.setProps({theme: "alt"});
    const labelComponent = wrapper.find('div');
    const iconComponent = wrapper.find('i');
    const detailComponent = wrapper.find('span');
    expect(labelComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(detailComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('alt')).toEqual(true);
    expect(labelComponent.hasClass('corner')).toEqual(true);
    expect(iconComponent.hasClass('home')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
    expect(detailComponent.hasClass('detail')).toEqual(true);
    expect(detailComponent.text()).toEqual('23');
  });

});

describe("CornerLabel Sizes",()=>{
  const wrapper = mount(
    <CornerLabel size="mini" icon="rocket" />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a div with the class of label, ui and mini",()=>{
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('mini')).toEqual(true);
    expect(labelComponent.hasClass('corner')).toEqual(true);
  });

  it("should have a div with the class of label, ui and tiny",()=>{
    wrapper.setProps({size: "tiny"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('tiny')).toEqual(true);
    expect(labelComponent.hasClass('corner')).toEqual(true);
  });

  it("should have a div with the class of label, ui and small",()=>{
    wrapper.setProps({size: "small"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('small')).toEqual(true);
    expect(labelComponent.hasClass('corner')).toEqual(true);
  });

  it("should have a div with the class of label, ui and medium",()=>{
    wrapper.setProps({size: "medium"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('medium')).toEqual(true);
    expect(labelComponent.hasClass('corner')).toEqual(true);
  });

  it("should have a div with the class of label, ui and large",()=>{
    wrapper.setProps({size: "large"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('large')).toEqual(true);
    expect(labelComponent.hasClass('corner')).toEqual(true);
  });

  it("should have a div with the class of label, ui and big",()=>{
    wrapper.setProps({size: "big"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('big')).toEqual(true);
    expect(labelComponent.hasClass('corner')).toEqual(true);
  });

  it("should have a div with the class of label, ui and huge",()=>{
    wrapper.setProps({size: "huge"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('huge')).toEqual(true);
    expect(labelComponent.hasClass('corner')).toEqual(true);
  });

  it("should have a div with the class of label, ui and massive",()=>{
    wrapper.setProps({size: "massive"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('massive')).toEqual(true);
    expect(labelComponent.hasClass('corner')).toEqual(true);
  });

});

describe("Label Tag",()=>{
  const wrapper = mount(
    <Tag>My Tag</Tag>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a div with the following classes ui,label and tag",()=>{
    const tagComponent = wrapper.find('div');
    expect(tagComponent).toHaveLength(1);
    expect(tagComponent.hasClass('ui')).toEqual(true);
    expect(tagComponent.hasClass('label')).toEqual(true);
    expect(tagComponent.hasClass('tag')).toEqual(true);
    expect(tagComponent.text()).toEqual('My Tag');
  });

  it("should have an icon of rocket",()=>{
    wrapper.setProps({icon: "rocket"});
    const iconComponent = wrapper.find('i');
    expect(iconComponent).toHaveLength(1);
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
  });

  it("should have an detail of 23",()=>{
    wrapper.setProps({detail: "23"});
    const detailComponent = wrapper.find('span');
    expect(detailComponent).toHaveLength(1);
    expect(detailComponent.hasClass('detail')).toEqual(true);
    expect(detailComponent.text()).toEqual('23');
  });

  it("should have a theme of prime",()=>{
    wrapper.setProps({theme: "prime"});
    const tagComponent = wrapper.find('div');
    expect(tagComponent).toHaveLength(1);
    expect(tagComponent.hasClass('ui')).toEqual(true);
    expect(tagComponent.hasClass('label')).toEqual(true);
    expect(tagComponent.hasClass('tag')).toEqual(true);
    expect(tagComponent.hasClass('prime')).toEqual(true);
  });

});

describe("Basic Attached Label",()=>{
  const wrapper = mount(
    <AttachedLabel>Attached Label</AttachedLabel>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a div with the class of label, ui and attached",()=>{
    const attachedComponent = wrapper.find('div');
    expect(attachedComponent).toHaveLength(1);
    expect(attachedComponent.hasClass('ui')).toEqual(true);
    expect(attachedComponent.hasClass('label')).toEqual(true);
    expect(attachedComponent.hasClass('attached')).toEqual(true);
  });

  it("should have an icon of rocket",()=>{
    wrapper.setProps({icon: "rocket"});
    const attachedComponent = wrapper.find('div');
    const iconComponent = wrapper.find('i');
    expect(attachedComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(attachedComponent.prop('icon')).toEqual('rocket');
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
  });

  it("should have an detail of 23",()=>{
    wrapper.setProps({detail: "23"});
    const detailComponent = wrapper.find('span');
    expect(detailComponent).toHaveLength(1);
    expect(detailComponent.hasClass('detail')).toEqual(true);
    expect(detailComponent.text()).toEqual('23');
  });

  it("should have a theme of prime",()=>{
    wrapper.setProps({theme: "prime"});
    const attachedComponent = wrapper.find('div');
    expect(attachedComponent).toHaveLength(1);
    expect(attachedComponent.hasClass('ui')).toEqual(true);
    expect(attachedComponent.hasClass('label')).toEqual(true);
    expect(attachedComponent.hasClass('attached')).toEqual(true);
    expect(attachedComponent.hasClass('prime')).toEqual(true);
  });
});

describe("Attached Label Sizes",()=>{
  const wrapper = mount(
    <AttachedLabel size="mini" />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a div with the class of label, ui and mini",()=>{
    const attachedComponent = wrapper.find('div');
    expect(attachedComponent).toHaveLength(1);
    expect(attachedComponent.hasClass('ui')).toEqual(true);
    expect(attachedComponent.hasClass('label')).toEqual(true);
    expect(attachedComponent.hasClass('mini')).toEqual(true);
    expect(attachedComponent.hasClass('attached')).toEqual(true);
  });

  it("should have a div with the class of label, ui and tiny",()=>{
    wrapper.setProps({size: "tiny"});
    const attachedComponent = wrapper.find('div');
    expect(attachedComponent).toHaveLength(1);
    expect(attachedComponent.hasClass('ui')).toEqual(true);
    expect(attachedComponent.hasClass('label')).toEqual(true);
    expect(attachedComponent.hasClass('tiny')).toEqual(true);
    expect(attachedComponent.hasClass('attached')).toEqual(true);
  });

  it("should have a div with the class of label, ui and small",()=>{
    wrapper.setProps({size: "small"});
    const attachedComponent = wrapper.find('div');
    expect(attachedComponent).toHaveLength(1);
    expect(attachedComponent.hasClass('ui')).toEqual(true);
    expect(attachedComponent.hasClass('label')).toEqual(true);
    expect(attachedComponent.hasClass('small')).toEqual(true);
    expect(attachedComponent.hasClass('attached')).toEqual(true);
  });

  it("should have a div with the class of label, ui and medium",()=>{
    wrapper.setProps({size: "medium"});
    const attachedComponent = wrapper.find('div');
    expect(attachedComponent).toHaveLength(1);
    expect(attachedComponent.hasClass('ui')).toEqual(true);
    expect(attachedComponent.hasClass('label')).toEqual(true);
    expect(attachedComponent.hasClass('medium')).toEqual(true);
    expect(attachedComponent.hasClass('attached')).toEqual(true);
  });

  it("should have a div with the class of label, ui and large",()=>{
    wrapper.setProps({size: "large"});
    const attachedComponent = wrapper.find('div');
    expect(attachedComponent).toHaveLength(1);
    expect(attachedComponent.hasClass('ui')).toEqual(true);
    expect(attachedComponent.hasClass('label')).toEqual(true);
    expect(attachedComponent.hasClass('large')).toEqual(true);
    expect(attachedComponent.hasClass('attached')).toEqual(true);
  });

  it("should have a div with the class of label, ui and big",()=>{
    wrapper.setProps({size: "big"});
    const attachedComponent = wrapper.find('div');
    expect(attachedComponent).toHaveLength(1);
    expect(attachedComponent.hasClass('ui')).toEqual(true);
    expect(attachedComponent.hasClass('label')).toEqual(true);
    expect(attachedComponent.hasClass('big')).toEqual(true);
    expect(attachedComponent.hasClass('attached')).toEqual(true);
  });

  it("should have a div with the class of label, ui and huge",()=>{
    wrapper.setProps({size: "huge"});
    const attachedComponent = wrapper.find('div');
    expect(attachedComponent).toHaveLength(1);
    expect(attachedComponent.hasClass('ui')).toEqual(true);
    expect(attachedComponent.hasClass('label')).toEqual(true);
    expect(attachedComponent.hasClass('huge')).toEqual(true);
    expect(attachedComponent.hasClass('attached')).toEqual(true);
  });

  it("should have a div with the class of label, ui and massive",()=>{
    wrapper.setProps({size: "massive"});
    const attachedComponent = wrapper.find('div');
    expect(attachedComponent).toHaveLength(1);
    expect(attachedComponent.hasClass('ui')).toEqual(true);
    expect(attachedComponent.hasClass('label')).toEqual(true);
    expect(attachedComponent.hasClass('massive')).toEqual(true);
    expect(attachedComponent.hasClass('attached')).toEqual(true);
  });

});

describe("Attached Label Positions",()=>{
  const wrapper = mount(
    <AttachedLabel>Attached Label</AttachedLabel>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a div with the class of label, ui, attached and top",()=>{
    wrapper.setProps({top: true});
    const attachedComponent = wrapper.find('div');
    expect(attachedComponent).toHaveLength(1);
    expect(attachedComponent.hasClass('ui')).toEqual(true);
    expect(attachedComponent.hasClass('label')).toEqual(true);
    expect(attachedComponent.hasClass('attached')).toEqual(true);
    expect(attachedComponent.hasClass('top')).toEqual(true);
  });

  it("should have a div with the class of label, ui, attached, top, left",()=>{
    wrapper.setProps({left: true});
    const attachedComponent = wrapper.find('div');
    expect(attachedComponent).toHaveLength(1);
    expect(attachedComponent.hasClass('ui')).toEqual(true);
    expect(attachedComponent.hasClass('label')).toEqual(true);
    expect(attachedComponent.hasClass('attached')).toEqual(true);
    expect(attachedComponent.hasClass('top')).toEqual(true);
    expect(attachedComponent.hasClass('left')).toEqual(true);
  });

  it("should have a div with the class of label, ui, attached, top, left",()=>{
    wrapper.setProps({left: false, right: true});
    const attachedComponent = wrapper.find('div');
    expect(attachedComponent).toHaveLength(1);
    expect(attachedComponent.hasClass('ui')).toEqual(true);
    expect(attachedComponent.hasClass('label')).toEqual(true);
    expect(attachedComponent.hasClass('attached')).toEqual(true);
    expect(attachedComponent.hasClass('top')).toEqual(true);
    expect(attachedComponent.hasClass('right')).toEqual(true);
  });

  wrapper.setProps({top: false,right: false});

  it("should have a div with the class of label, ui, attached and top",()=>{
    wrapper.setProps({bottom: true});
    const attachedComponent = wrapper.find('div');
    expect(attachedComponent).toHaveLength(1);
    expect(attachedComponent.hasClass('ui')).toEqual(true);
    expect(attachedComponent.hasClass('label')).toEqual(true);
    expect(attachedComponent.hasClass('attached')).toEqual(true);
    expect(attachedComponent.hasClass('bottom')).toEqual(true);
  });

  it("should have a div with the class of label, ui, attached and top",()=>{
    wrapper.setProps({left: true});
    const attachedComponent = wrapper.find('div');
    expect(attachedComponent).toHaveLength(1);
    expect(attachedComponent.hasClass('ui')).toEqual(true);
    expect(attachedComponent.hasClass('label')).toEqual(true);
    expect(attachedComponent.hasClass('attached')).toEqual(true);
    expect(attachedComponent.hasClass('bottom')).toEqual(true);
    expect(attachedComponent.hasClass('left')).toEqual(true);
  });

  it("should have a div with the class of label, ui, attached and top",()=>{
    wrapper.setProps({left: false, right: true});
    const attachedComponent = wrapper.find('div');
    expect(attachedComponent).toHaveLength(1);
    expect(attachedComponent.hasClass('ui')).toEqual(true);
    expect(attachedComponent.hasClass('label')).toEqual(true);
    expect(attachedComponent.hasClass('attached')).toEqual(true);
    expect(attachedComponent.hasClass('bottom')).toEqual(true);
    expect(attachedComponent.hasClass('right')).toEqual(true);
  });

});


describe("Tag Label Sizes",()=>{
  const wrapper = mount(
    <Tag size="mini" icon="rocket" />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a div with the class of label, ui and mini",()=>{
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('mini')).toEqual(true);
    expect(labelComponent.hasClass('tag')).toEqual(true);
  });

  it("should have a div with the class of label, ui and tiny",()=>{
    wrapper.setProps({size: "tiny"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('tiny')).toEqual(true);
    expect(labelComponent.hasClass('tag')).toEqual(true);
  });

  it("should have a div with the class of label, ui and small",()=>{
    wrapper.setProps({size: "small"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('small')).toEqual(true);
    expect(labelComponent.hasClass('tag')).toEqual(true);
  });

  it("should have a div with the class of label, ui and medium",()=>{
    wrapper.setProps({size: "medium"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('medium')).toEqual(true);
    expect(labelComponent.hasClass('tag')).toEqual(true);
  });

  it("should have a div with the class of label, ui and large",()=>{
    wrapper.setProps({size: "large"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('large')).toEqual(true);
    expect(labelComponent.hasClass('tag')).toEqual(true);
  });

  it("should have a div with the class of label, ui and big",()=>{
    wrapper.setProps({size: "big"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('big')).toEqual(true);
    expect(labelComponent.hasClass('tag')).toEqual(true);
  });

  it("should have a div with the class of label, ui and huge",()=>{
    wrapper.setProps({size: "huge"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('huge')).toEqual(true);
    expect(labelComponent.hasClass('tag')).toEqual(true);
  });

  it("should have a div with the class of label, ui and massive",()=>{
    wrapper.setProps({size: "massive"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('massive')).toEqual(true);
    expect(labelComponent.hasClass('tag')).toEqual(true);
  });

});

describe("Ribbon Label",()=>{
  const wrapper = mount(
    <Ribbon>Ribbon</Ribbon>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a div with the following classes ui,label and ribbon",()=>{
    const ribbonComponent = wrapper.find('div');
    expect(ribbonComponent).toHaveLength(1);
    expect(ribbonComponent.hasClass('ui')).toEqual(true);
    expect(ribbonComponent.hasClass('label')).toEqual(true);
    expect(ribbonComponent.hasClass('ribbon')).toEqual(true);
    expect(ribbonComponent.text()).toEqual('Ribbon');
  });

  it("should have an icon of rocket",()=>{
    wrapper.setProps({icon: "rocket"});
    const ribbonComponent = wrapper.find('div');
    const iconComponent = wrapper.find('i');
    expect(ribbonComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(ribbonComponent.prop('icon')).toEqual('rocket');
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
  });

  it("should have an detail of 23",()=>{
    wrapper.setProps({detail: "23"});
    const detailComponent = wrapper.find('span');
    expect(detailComponent).toHaveLength(1);
    expect(detailComponent.hasClass('detail')).toEqual(true);
    expect(detailComponent.text()).toEqual('23');
  });

  it("should have a class of right when alignRight is set to true",()=>{
    wrapper.setProps({alignRight: true});
    const ribbonComponent = wrapper.find('div');
    expect(ribbonComponent).toHaveLength(1);
    expect(ribbonComponent.hasClass('right')).toEqual(true);
  });

  it("should have a class of absolute when absolute is set to true",()=>{
    wrapper.setProps({absolute: true});
    const ribbonComponent = wrapper.find('div');
    expect(ribbonComponent).toHaveLength(1);
    expect(ribbonComponent.hasClass('absolute')).toEqual(true);
  });

  it("should have a theme of prime",()=>{
    wrapper.setProps({theme: "prime"});
    const ribbonComponent = wrapper.find('div');
    expect(ribbonComponent).toHaveLength(1);
    expect(ribbonComponent.hasClass('ui')).toEqual(true);
    expect(ribbonComponent.hasClass('label')).toEqual(true);
    expect(ribbonComponent.hasClass('ribbon')).toEqual(true);
    expect(ribbonComponent.hasClass('prime')).toEqual(true);
  });

});

describe("Ribbon Label Sizes",()=>{
  const wrapper = mount(
    <Ribbon size="mini" icon="rocket" />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a div with the class of label, ui and mini",()=>{
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('mini')).toEqual(true);
    expect(labelComponent.hasClass('ribbon')).toEqual(true);
  });

  it("should have a div with the class of label, ui and tiny",()=>{
    wrapper.setProps({size: "tiny"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('tiny')).toEqual(true);
    expect(labelComponent.hasClass('ribbon')).toEqual(true);
  });

  it("should have a div with the class of label, ui and small",()=>{
    wrapper.setProps({size: "small"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('small')).toEqual(true);
    expect(labelComponent.hasClass('ribbon')).toEqual(true);
  });

  it("should have a div with the class of label, ui and medium",()=>{
    wrapper.setProps({size: "medium"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('medium')).toEqual(true);
    expect(labelComponent.hasClass('ribbon')).toEqual(true);
  });

  it("should have a div with the class of label, ui and large",()=>{
    wrapper.setProps({size: "large"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('large')).toEqual(true);
    expect(labelComponent.hasClass('ribbon')).toEqual(true);
  });

  it("should have a div with the class of label, ui and big",()=>{
    wrapper.setProps({size: "big"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('big')).toEqual(true);
    expect(labelComponent.hasClass('ribbon')).toEqual(true);
  });

  it("should have a div with the class of label, ui and huge",()=>{
    wrapper.setProps({size: "huge"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('huge')).toEqual(true);
    expect(labelComponent.hasClass('ribbon')).toEqual(true);
  });

  it("should have a div with the class of label, ui and massive",()=>{
    wrapper.setProps({size: "massive"});
    const labelComponent = wrapper.find('div');
    expect(labelComponent).toHaveLength(1);
    expect(labelComponent.hasClass('ui')).toEqual(true);
    expect(labelComponent.hasClass('label')).toEqual(true);
    expect(labelComponent.hasClass('massive')).toEqual(true);
    expect(labelComponent.hasClass('ribbon')).toEqual(true);
  });

});
