import React from 'react';
import {mount} from "enzyme";
import {VBox,HBox,CBox} from "./layout";
import Panel from "./panel";
import {Segment} from "./segment";


describe("CBox test",()=>{
  const wrapper = mount(
    <Segment style={{height: "200px"}}>
      <CBox>Look at me in the center!</CBox>
    </Segment>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a div with the classes of ui and segment and height of 200",()=>{
    const segmentComponent = wrapper.find("div").first();
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('ui')).toEqual(true);
    expect(segmentComponent.hasClass('segment')).toEqual(true);
    expect(segmentComponent.prop('style')).toHaveProperty('height', '200px');
  });

  it("should have a div with the classes of panel and cbox",()=>{
    const segmentComponent = wrapper.find("div").first();
    const cboxComponent = segmentComponent.children().find("div").first();
    expect(cboxComponent).toHaveLength(1);
    expect(cboxComponent.hasClass('panel')).toEqual(true);
    expect(cboxComponent.hasClass('cbox')).toEqual(true);
    expect(cboxComponent.prop('style')).toHaveProperty('display', 'table');
    expect(cboxComponent.prop('style')).toHaveProperty('position', 'absolute');
  });

  it("should have a div with the class of cbox-inner",()=>{
    const segmentComponent = wrapper.find("div").first();
    const cboxComponent = segmentComponent.children().find("div").first();
    const innercboxComponent = cboxComponent.children().find("div").first();
    expect(innercboxComponent).toHaveLength(1);
    expect(innercboxComponent.hasClass('cbox-inner')).toEqual(true);
    expect(innercboxComponent.prop('style')).toHaveProperty('display', 'table-cell');
    expect(innercboxComponent.prop('style')).toHaveProperty('textAlign', 'center');
    expect(innercboxComponent.prop('style')).toHaveProperty('verticalAlign', 'middle');
    expect(segmentComponent.text()).toEqual('Look at me in the center!');
  });

});

describe("HBox test",()=>{
  const wrapper = mount(
    <Segment style={{height: "200px"}}>
      <HBox>
        <Panel style={{backgroundColor: "red"}}>Panel 1</Panel>
        <Panel style={{backgroundColor: "green"}}>Panel 2</Panel>
      </HBox>
    </Segment>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a div with the classes of ui and segment and height of 200",()=>{
    const segmentComponent = wrapper.find("div").first();
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('ui')).toEqual(true);
    expect(segmentComponent.hasClass('segment')).toEqual(true);
    expect(segmentComponent.prop('style')).toHaveProperty('height', '200px');
  });

  it("should have a div with the classes of panel and hbox",()=>{
    const segmentComponent = wrapper.find("div").first();
    const hboxComponent = segmentComponent.children().find("div").first();
    expect(hboxComponent).toHaveLength(1);
    expect(hboxComponent.hasClass('panel')).toEqual(true);
    expect(hboxComponent.hasClass('hbox')).toEqual(true);
    expect(hboxComponent.prop('style')).toHaveProperty('overflow', 'hidden');
  });


  it("should have a div with the backgroundColor of red with the text of Panel 1",()=>{
    const segmentComponent = wrapper.find("div").first();
    const hboxComponent = segmentComponent.children().find("div").first();
    const panelhboxComponent = hboxComponent.children().find("div").first();
    expect(panelhboxComponent).toHaveLength(1);
    expect(panelhboxComponent.hasClass('panel')).toEqual(true);
    expect(panelhboxComponent.prop('style')).toHaveProperty('left', '0px');
    expect(panelhboxComponent.prop('style')).toHaveProperty('backgroundColor', 'red');
    expect(panelhboxComponent.text()).toEqual('Panel 1');
  });

  it("should have a div with the backgroundColor of green with the text of Panel 2",()=>{
    const segmentComponent = wrapper.find("div").first();
    const hboxComponent = segmentComponent.children().find("div").first();
    const panelhboxComponent = hboxComponent.children().find("div").at(1);
    expect(panelhboxComponent).toHaveLength(1);
    expect(panelhboxComponent.hasClass('panel')).toEqual(true);
    expect(panelhboxComponent.prop('style')).toHaveProperty('left', '0px');
    expect(panelhboxComponent.prop('style')).toHaveProperty('backgroundColor', 'green');
    expect(panelhboxComponent.text()).toEqual('Panel 2');
  });

});


describe("VBox test",()=>{
  const wrapper = mount(
    <Segment style={{height: "200px"}}>
      <VBox>
        <Panel style={{backgroundColor: "red"}}>Panel 1</Panel>
        <Panel style={{backgroundColor: "green"}}>Panel 2</Panel>
      </VBox>
    </Segment>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a div with the classes of ui and segment and height of 200",()=>{
    const segmentComponent = wrapper.find("div").first();
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('ui')).toEqual(true);
    expect(segmentComponent.hasClass('segment')).toEqual(true);
    expect(segmentComponent.prop('style')).toHaveProperty('height', '200px');
  });

  it("should have a div with the classes of panel and vbox",()=>{
    const segmentComponent = wrapper.find("div").first();
    const vboxComponent = segmentComponent.children().find("div").first();
    expect(vboxComponent).toHaveLength(1);
    expect(vboxComponent.hasClass('panel')).toEqual(true);
    expect(vboxComponent.hasClass('vbox')).toEqual(true);
    expect(vboxComponent.prop('style')).toHaveProperty('overflow', 'hidden');
  });


  it("should have a div with the backgroundColor of red with the text of Panel 1",()=>{
    const segmentComponent = wrapper.find("div").first();
    const vboxComponent = segmentComponent.children().find("div").first();
    const panelvboxComponent = vboxComponent.children().find("div").first();
    expect(panelvboxComponent).toHaveLength(1);
    expect(panelvboxComponent.hasClass('panel')).toEqual(true);
    expect(panelvboxComponent.prop('style')).toHaveProperty('top', '0px');
    expect(panelvboxComponent.prop('style')).toHaveProperty('backgroundColor', 'red');
    expect(panelvboxComponent.text()).toEqual('Panel 1');
  });

  it("should have a div with the backgroundColor of green with the text of Panel 2",()=>{
    const segmentComponent = wrapper.find("div").first();
    const vboxComponent = segmentComponent.children().find("div").first();
    const panelvboxComponent = vboxComponent.children().find("div").at(1);
    expect(panelvboxComponent).toHaveLength(1);
    expect(panelvboxComponent.hasClass('panel')).toEqual(true);
    expect(panelvboxComponent.prop('style')).toHaveProperty('top', '0px');
    expect(panelvboxComponent.prop('style')).toHaveProperty('backgroundColor', 'green');
    expect(panelvboxComponent.text()).toEqual('Panel 2');
  });

});

describe("Flex test",()=>{
  const wrapper = mount(
    <Segment style={{height: "350px"}}>
      <VBox>
        <CBox data-flex={0.5} style={{backgroundColor: "rgba(255,0,0,0.1)"}}>Flex 0.5</CBox>
        <CBox style={{backgroundColor: "rgba(0,255,0,0.1)"}}>Flex Undefined</CBox>
        <CBox data-flex={2} style={{backgroundColor: "rgba(0,0,255,0.1)"}}>Flex 2</CBox>
      </VBox>
    </Segment>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a div with the classes of ui and segment and height of 350",()=>{
    const segmentComponent = wrapper.find("div").first();
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('ui')).toEqual(true);
    expect(segmentComponent.hasClass('segment')).toEqual(true);
    expect(segmentComponent.prop('style')).toHaveProperty('height', '350px');
  });

  it("should have a div with the classes of panel and vbox",()=>{
    const segmentComponent = wrapper.find("div").first();
    const vboxComponent = segmentComponent.children().find("div").first();
    expect(vboxComponent).toHaveLength(1);
    expect(vboxComponent.hasClass('panel')).toEqual(true);
    expect(vboxComponent.hasClass('vbox')).toEqual(true);
    expect(vboxComponent.prop('style')).toHaveProperty('overflow', 'hidden');
  });

  it("should have a div with the classes of panel and cbox",()=>{
    const segmentComponent = wrapper.find("div").first();
    const vboxComponent = segmentComponent.children().find("div").first();
    const cboxComponent = vboxComponent.children().find("div").first();
    expect(cboxComponent).toHaveLength(1);
    expect(cboxComponent.hasClass('panel')).toEqual(true);
    expect(cboxComponent.hasClass('cbox')).toEqual(true);
    expect(cboxComponent.prop('style')).toHaveProperty('display', 'table');
    expect(cboxComponent.prop('style')).toHaveProperty('position', 'absolute');
    expect(cboxComponent.prop('data-flex')).toBe(0.5);
  });

  it("should have a div with the class of cbox-inner",()=>{
    const segmentComponent = wrapper.find("div").first();
    const vboxComponent = segmentComponent.children().find("div").first();
    const cboxComponent = vboxComponent.children().find("div").first();
    const innercboxComponent = cboxComponent.children().find("div").first();
    expect(innercboxComponent).toHaveLength(1);
    expect(innercboxComponent.hasClass('cbox-inner')).toEqual(true);
    expect(innercboxComponent.prop('style')).toHaveProperty('display', 'table-cell');
    expect(innercboxComponent.prop('style')).toHaveProperty('textAlign', 'center');
    expect(innercboxComponent.prop('style')).toHaveProperty('verticalAlign', 'middle');
    expect(innercboxComponent.text()).toEqual('Flex 0.5');
  });

  it("should have a div with the classes of panel and cbox",()=>{
    const segmentComponent = wrapper.find("div").first();
    const vboxComponent = segmentComponent.children().find("div").first();
    const cboxComponent = vboxComponent.children().find("div.cbox").at(1);
    expect(cboxComponent).toHaveLength(1);
    expect(cboxComponent.hasClass('panel')).toEqual(true);
    expect(cboxComponent.hasClass('cbox')).toEqual(true);
    expect(cboxComponent.prop('style')).toHaveProperty('display', 'table');
    expect(cboxComponent.prop('style')).toHaveProperty('position', 'absolute');
  });

  it("should have a div with the class of cbox-inner",()=>{
    const segmentComponent = wrapper.find("div").first();
    const vboxComponent = segmentComponent.children().find("div").first();
    const cboxComponent = vboxComponent.children().find("div.cbox").at(1);
    const innercboxComponent = cboxComponent.children().find("div").first();
    expect(innercboxComponent).toHaveLength(1);
    expect(innercboxComponent.hasClass('cbox-inner')).toEqual(true);
    expect(innercboxComponent.prop('style')).toHaveProperty('display', 'table-cell');
    expect(innercboxComponent.prop('style')).toHaveProperty('textAlign', 'center');
    expect(innercboxComponent.prop('style')).toHaveProperty('verticalAlign', 'middle');
    expect(innercboxComponent.text()).toEqual('Flex Undefined');
  });

  it("should have a div with the classes of panel and cbox",()=>{
    const segmentComponent = wrapper.find("div").first();
    const vboxComponent = segmentComponent.children().find("div").first();
    const cboxComponent = vboxComponent.children().find("div.cbox").at(2);
    expect(cboxComponent).toHaveLength(1);
    expect(cboxComponent.hasClass('panel')).toEqual(true);
    expect(cboxComponent.hasClass('cbox')).toEqual(true);
    expect(cboxComponent.prop('style')).toHaveProperty('display', 'table');
    expect(cboxComponent.prop('style')).toHaveProperty('position', 'absolute');
  });

  it("should have a div with the class of cbox-inner",()=>{
    const segmentComponent = wrapper.find("div").first();
    const vboxComponent = segmentComponent.children().find("div").first();
    const cboxComponent = vboxComponent.children().find("div.cbox").at(2);
    const innercboxComponent = cboxComponent.children().find("div").first();
    expect(innercboxComponent).toHaveLength(1);
    expect(innercboxComponent.hasClass('cbox-inner')).toEqual(true);
    expect(innercboxComponent.prop('style')).toHaveProperty('display', 'table-cell');
    expect(innercboxComponent.prop('style')).toHaveProperty('textAlign', 'center');
    expect(innercboxComponent.prop('style')).toHaveProperty('verticalAlign', 'middle');
    expect(innercboxComponent.text()).toEqual('Flex 2');
  });
});
