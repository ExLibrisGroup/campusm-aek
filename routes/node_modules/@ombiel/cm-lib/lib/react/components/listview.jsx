import "./base.aekcss";
import "./menu.aekcss";
import "./icon.aekcss";


import {isArray,isString,isNumber,extend,mapValues,values} from "lodash";
import React from "react";
import PropTypes from "prop-types";

import mergeProps from "../utils/merge-props";
import pickHtmlProps from "../utils/pick-html-props";
import getChildren from "../utils/children";

export function ListviewItem(props) {

  const initProps = {className: "item"};

  let newProps = mergeProps(initProps,props);

  let content = newProps.children;
  const children = getChildren(props);
  const href = (!newProps.disabled && newProps.href) || (newProps.onClick && "#");
  const thumbnail = newProps.thumbnail;
  const icon = newProps.icon;
  const thumbSize = newProps.thumbSize === undefined ? "medium" : newProps.thumbSize;
  const thumbContained = newProps.thumbContained;
  const thumbBorder = newProps.thumbBorder;
  const thumbRounded = newProps.thumbRounded;
  let thumbAlt = newProps.thumbAlt;
  const labelRight = newProps.labelRight;
  let label = newProps.label;
  let labelClass = "label";
  const classSet = {
    active: newProps.active,
    disabled: newProps.disabled
  };

  if (newProps.labelIcon) {
    label = <span><i aria-hidden="true" className={`${newProps.labelIcon} icon`} /> {label}</span>;
  }

  if (label) {
    if (newProps.labelEllipsis) { labelClass += " ellipsis"; }
    if (newProps.labelVariation) { labelClass += ` ${newProps.labelVariation}`; }
    if (newProps.basicLabel) { labelClass += " basic"; }
  }

  if (!content || (typeof children[0] === "string")) {
    content = [];
    if (newProps.heading) {
      content.push(React.createElement(props.headingComponent,{key: "heading"},newProps.heading));
      if (newProps.text) {
        content.push(<p key="text">{newProps.text}</p>);
      }
      if (children.length) {
        content.push(<div key="content">{children}</div>);
      }
    }
    else if (children.length) {
      content = children;
    }
    else {
      content = newProps.text || "-";
    }
  }

  if (label && !(thumbnail || icon)) {

    const labelProps = pickHtmlProps(mergeProps({className: labelClass,children: label},props.labelProps));

    if (labelRight) {
      classSet.right = true;
      classSet.labeled = true;
      content = (
        <div>
          <div key="detail" className="detail">{content}</div>
          <div key="labelRight"><span {...labelProps} /></div>
        </div>
      );
    }
    else {
      content = [
        <h5 key="label" {...labelProps} />,
        <div key="detail" className="detail">{content}</div>
      ];
    }
  }

  if (thumbnail || icon) {
    let thumb;
    let thumbClass = "thumbnail";
    const labelProps = mergeProps({className: labelClass,children: label},props.labelProps,{classSet: {label: false}});
    const labelContent = label && <div className="label"><span {...labelProps} /></div>;
    const labelContentLeft = !labelRight && labelContent;
    const labelContentRight = labelRight && labelContent;
    if (thumbSize === "label") { thumbClass += " thumb-label"; }
    else if (thumbSize) { thumbClass += ` ${thumbSize}`; }
    if (thumbnail) {
      if (!thumbAlt) { thumbAlt = ""; }
      thumb = (thumbSize && (thumbSize !== "label") && <aek-img style={{backgroundImage: `url(${thumbnail})`}} alt={thumbAlt} />) || <img src={thumbnail} alt={thumbAlt} />;
      thumb = <div key="thumb">{thumb}</div>;
      if (thumbContained) { thumbClass += " contained"; }
      if (thumbBorder) { thumbClass += " bordered"; }
      if (thumbRounded || thumbRounded == null) { thumbClass += " rounded"; }
    }
    else {
      if (!thumbSize) { thumbClass += " medium"; }
      var iconProps = pickHtmlProps(mergeProps({className: `${icon} icon`},newProps.iconProps));
      thumb = <i aria-hidden="true" {...iconProps} />;
    }
    content = (
      <div className={thumbClass}>
        {labelContentLeft}
        {thumb}
        <div>{content}</div>
        {labelContentRight}
      </div>
    );
  }

  if (href && !newProps.disabled) {
    content = (
      <a href={href} onClick={props.onClick}>{content}</a>
    );
  }

  delete newProps.onClick;
  delete newProps.href;

  newProps = mergeProps({classSet},newProps);

  if (isString(props.component)) {
    newProps = pickHtmlProps(newProps);
  }

  return React.createElement(props.component,newProps,content);

}

ListviewItem.propTypes = {
  component: PropTypes.any,
  headingComponent: PropTypes.any,
  labelProps: PropTypes.object,
  onClick: PropTypes.func,
};

ListviewItem.defaultProps = {
  component: "li",
  headingComponent: "h4",
};


export function BasicListviewItem(props) {

  const {disabled,active} = props;

  const newProps = mergeProps({
    classSet: {
      item: true,
      disabled,
      active,
    },
  },props);

  return React.createElement("li",newProps);
}

BasicListviewItem.propTypes = {
  disabled: PropTypes.bool,
  active: PropTypes.bool,
};


export class Listview extends React.Component {

  itemFactory = (item,index)=>{

    var props = {
      item: item,
      onClick: (item.onClick || this.props.onClick) && this.props.onClick.bind(null,item)
    };

    if (typeof item === "string") { item = {text: item}; }

    ["basicLabel","labelVariation","labelEllipsis","labelRight","thumbnail","thumbSize","thumbContained","thumbAlt","thumbBorder","thumbRounded","headingComponent"].forEach(function(prop) {
      props[prop] = item[prop] == null ? this.props[prop] : item[prop];
    }.bind(this));

    ["label","thumbnail","icon","text","heading","active","href","disabled","children","labelProps"].forEach(function(prop) {
      props[prop] = item[prop];
    });

    props.key = item.key || item.id || `item${index}`;

    if (item.listviewItemProps) {
      extend(props,item.listviewItemProps);
    }

    return <ListviewItem {...props} />;
  }

  render() {

    var initialProps = {
      className: "ui listview menu",
      items: [],
      itemFactory: this.itemFactory,
      component: "ul"
    };

    if (!this.props.itemFactory || this.props.formatted) {
      initialProps.className += " formatted";
    }

    var props = mergeProps(initialProps,this.props);

    var classSet = {
      basic: props.basicLabel,
      uniform: props.uniformLabels,
      // "right":props.labelRight,
      // "labeled":props.basicLabel || props.uniformLabels || props.labelRight,
      stacked: props.stackLabels === true,
      stackable: props.stackLabels === "auto",
      inverted: props.inverted,
      borderless: props.borderless,
      flush: props.flush
    };

    if (props.variation) {
      classSet[props.variation] = true;
    }

    if (!props.children) {
      var items = props.items;
      if (!isArray(items)) {

        items = values(mapValues(items,(val,key) => {
          return (isString(val) || isNumber(val)) ? {label: key,text: val} : extend({label: key}, val);
        }));

        // items = mapValues(items,function(val,key) {
        //   return (isString(val) || isNumber(val)) ? [{label: key,text: val}] : extend([{label: key},val]);
        // });
      }

      if (items.length === 0 && props.noItemsContent) {
        props.children = props.noItemsContent;
      }
      else {
        props.children = items.map(function(item,index) {
          return props.itemFactory(item,index);
        });
      }
    }

    delete props.onClick;

    props = mergeProps(props,{classSet});

    const {component} = props;

    if (isString(component)) {
      props = pickHtmlProps(props);
    }

    return (React.createElement(component,props));
  }
}

Listview.propTypes = {
  onClick: PropTypes.func,
  itemFactory: PropTypes.func,
  formatted: PropTypes.bool,
};
