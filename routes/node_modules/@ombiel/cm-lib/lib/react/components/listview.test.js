import React from 'react';
import {mount} from "enzyme";
import {Listview,ListviewItem} from "./listview";
import {range} from "lodash";

describe("Listview with no props",()=>{
  const wrapper = mount(
    <Listview />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain classes of ui listview menu formatted",()=>{
    const listviewComponent = wrapper.find('ul');
    expect(listviewComponent).toHaveLength(1);
    expect(listviewComponent.hasClass('ui')).toEqual(true);
    expect(listviewComponent.hasClass('listview')).toEqual(true);
    expect(listviewComponent.hasClass('menu')).toEqual(true);
    expect(listviewComponent.hasClass('formatted')).toEqual(true);
  });
});

describe("Listview with items as array",()=>{

  const wrapper = mount(
    <Listview items={["One","Two","Three"]} />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain a ul and 3 li's",()=>{
    const listviewComponent = wrapper.find('ul');
    expect(listviewComponent).toHaveLength(1);
    const listviewItemsComponent = wrapper.find('li');
    expect(listviewItemsComponent).toHaveLength(3);
  });

  it("should have the first li with the text of One",()=>{
    const listviewItemComponent = wrapper.find('li').first();
    expect(listviewItemComponent.hasClass('item')).toEqual(true);
    expect(listviewItemComponent.text()).toEqual('One');
  });

  it("should have the second li with the text of Two",()=>{
    const listviewItemComponent = wrapper.find('li').at(1);
    expect(listviewItemComponent.hasClass('item')).toEqual(true);
    expect(listviewItemComponent.text()).toEqual('Two');
  });

  it("should have the last li with the text of Three",()=>{
    const listviewItemComponent = wrapper.find('li').at(2);
    expect(listviewItemComponent.hasClass('item')).toEqual(true);
    expect(listviewItemComponent.text()).toEqual('Three');
  });

});

describe("Listview with items as Object",()=>{

  const items = [
    {
      icon: "home",
      text: "One",
    },
    {
      icon: "rocket",
      text: "Two",
    },
    {
      icon: "dashboard",
      text: "Three"
    }
  ];

  const wrapper = mount(
    <Listview items={items} />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain a ul and 3 li's",()=>{
    const listviewComponent = wrapper.find('ul');
    expect(listviewComponent).toHaveLength(1);
    const listviewItemsComponent = wrapper.find('li');
    expect(listviewItemsComponent).toHaveLength(3);
  });

  it("should have the first li with the text of One",()=>{
    const listviewItemComponent = wrapper.find('li').first();
    expect(listviewItemComponent.hasClass('item')).toEqual(true);
    expect(listviewItemComponent.text()).toEqual('One');
  });

  it("should have the second li with the text of Two",()=>{
    const listviewItemComponent = wrapper.find('li').at(1);
    expect(listviewItemComponent.hasClass('item')).toEqual(true);
    expect(listviewItemComponent.text()).toEqual('Two');
  });

  it("should have the last li with the text of Three",()=>{
    const listviewItemComponent = wrapper.find('li').at(2);
    expect(listviewItemComponent.hasClass('item')).toEqual(true);
    expect(listviewItemComponent.text()).toEqual('Three');
  });

});

describe("Listview with no items placeholder",()=>{
  const noItems = <ListviewItem disabled><em>No Items</em></ListviewItem>;
  const wrapper = mount(
    <Listview noItemsContent={noItems} />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain a ul and 1 li",()=>{
    const listviewComponent = wrapper.find('ul');
    expect(listviewComponent).toHaveLength(1);
    const listviewItemsComponent = wrapper.find('li');
    expect(listviewItemsComponent).toHaveLength(1);
  });

  it("should have a li with the text of No Items",()=>{
    const listviewItemComponent = wrapper.find('li').first();
    expect(listviewItemComponent.hasClass('item')).toEqual(true);
    expect(listviewItemComponent.text()).toEqual('No Items');
  });

});

describe("Listview items with links",()=>{
  const items = [
    {
      icon: "google",
      heading: "Google",
      text: "www.google.com",
      href: "http://www.google.com"
    },
    {
      icon: "facebook",
      heading: "Facebook",
      text: "www.facebook.com",
      href: "http://www.facebook.com"
    },
    {
      icon: "linkedin",
      heading: "LinkedIn",
      text: "www.linkedin.com",
      href: "http://www.linkedin.com"
    }
  ];

  const wrapper = mount(
    <Listview items={items} />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain a ul and 3 li",()=>{
    const listviewComponent = wrapper.find('ul');
    expect(listviewComponent).toHaveLength(1);
    const listviewItemsComponent = wrapper.find('li');
    expect(listviewItemsComponent).toHaveLength(3);
  });

  it("should have a li with a href of http://www.google.com",()=>{
    const listviewItemComponent = wrapper.find('li').first();
    expect(listviewItemComponent.hasClass('item')).toEqual(true);
    expect(listviewItemComponent.find("a").prop('href')).toEqual("http://www.google.com");
    expect(listviewItemComponent.find("h4").text()).toEqual('Google');
    expect(listviewItemComponent.find("p").text()).toEqual('www.google.com');
  });

});

describe("Listview items with labels",()=>{
  const items = [
    {label: "One",text: "First Item"},
    {label: "Two",text: "Second Item"},
    {label: "Three",text: "Third Item"}
  ];

  const wrapper = mount(
    <Listview items={items} />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain a ul and 3 li",()=>{
    const listviewComponent = wrapper.find('ul');
    expect(listviewComponent).toHaveLength(1);
    const listviewItemsComponent = wrapper.find('li');
    expect(listviewItemsComponent).toHaveLength(3);
  });

  it("should have a li with label",()=>{
    const listviewItemComponent = wrapper.find('li').first();
    expect(listviewItemComponent.hasClass('item')).toEqual(true);
    expect(listviewItemComponent.prop("label")).toEqual("One");

    const listviewItemDetailComponent = listviewItemComponent.find('div');
    expect(listviewItemDetailComponent.hasClass('detail')).toEqual(true);
    expect(listviewItemDetailComponent.text()).toEqual('First Item');

    const listviewItemLabelComponent = listviewItemComponent.find('h5');
    expect(listviewItemLabelComponent.hasClass('label')).toEqual(true);
    expect(listviewItemLabelComponent.text()).toEqual('One');
  });
});

describe("Listview items with basic labels",()=>{
  const items = [
    {label: "One",text: "First Item"},
    {label: "Two",text: "Second Item"},
    {label: "Three",text: "Third Item"}
  ];

  const wrapper = mount(
    <Listview basicLabel items={items} />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain a ul and 3 li",()=>{
    const listviewComponent = wrapper.find('ul');
    expect(listviewComponent).toHaveLength(1);
    expect(listviewComponent.hasClass('basic')).toEqual(true);
    const listviewItemsComponent = wrapper.find('li');
    expect(listviewItemsComponent).toHaveLength(3);
  });

  it("should have a li with basic label",()=>{
    const listviewItemComponent = wrapper.find('li').first();
    expect(listviewItemComponent.hasClass('item')).toEqual(true);
    expect(listviewItemComponent.prop("label")).toEqual("One");

    const listviewItemDetailComponent = listviewItemComponent.find('div');
    expect(listviewItemDetailComponent.hasClass('detail')).toEqual(true);
    expect(listviewItemDetailComponent.text()).toEqual('First Item');

    const listviewItemLabelComponent = listviewItemComponent.find('h5');
    expect(listviewItemLabelComponent.hasClass('label')).toEqual(true);
    expect(listviewItemLabelComponent.hasClass('basic')).toEqual(true);
    expect(listviewItemLabelComponent.text()).toEqual('One');
  });
});

describe("Listview items with ellipsis labels",()=>{
  const items = [
    {label: "One",text: "First Item"},
    {label: "Two",text: "Second Item"},
    {label: "Three",text: "Third Item"}
  ];

  const wrapper = mount(
    <Listview labelEllipsis items={items} />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain a ul and 3 li",()=>{
    const listviewComponent = wrapper.find('ul');
    expect(listviewComponent).toHaveLength(1);
    const listviewItemsComponent = wrapper.find('li');
    expect(listviewItemsComponent).toHaveLength(3);
  });

  it("should have a li with ellipsis label",()=>{
    const listviewItemComponent = wrapper.find('li').first();
    expect(listviewItemComponent.hasClass('item')).toEqual(true);
    expect(listviewItemComponent.prop("label")).toEqual("One");

    const listviewItemDetailComponent = listviewItemComponent.find('div');
    expect(listviewItemDetailComponent.hasClass('detail')).toEqual(true);
    expect(listviewItemDetailComponent.text()).toEqual('First Item');

    const listviewItemLabelComponent = listviewItemComponent.find('h5');
    expect(listviewItemLabelComponent.hasClass('label')).toEqual(true);
    expect(listviewItemLabelComponent.hasClass('ellipsis')).toEqual(true);
    expect(listviewItemLabelComponent.text()).toEqual('One');
  });
});

describe("Listview items with uniform labels",()=>{
  const items = [
    {label: "One",text: "First Item"},
    {label: "Two",text: "Second Item"},
    {label: "Three",text: "Third Item"}
  ];

  const wrapper = mount(
    <Listview uniformLabels items={items} />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain a ul and 3 li",()=>{
    const listviewComponent = wrapper.find('ul');
    expect(listviewComponent).toHaveLength(1);
    expect(listviewComponent.hasClass('uniform')).toEqual(true);
    const listviewItemsComponent = wrapper.find('li');
    expect(listviewItemsComponent).toHaveLength(3);
  });

});

describe("Listview items with right aligned labels",()=>{
  const items = [
    {label: "One",text: "First Item"},
    {label: "Two",text: "Second Item"},
    {label: "Three",text: "Third Item"}
  ];

  const wrapper = mount(
    <Listview labelRight items={items} />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain a ul and 3 li",()=>{
    const listviewComponent = wrapper.find('ul');
    expect(listviewComponent).toHaveLength(1);
    const listviewItemsComponent = wrapper.find('li');
    expect(listviewItemsComponent).toHaveLength(3);
  });

  it("should have a li with a label to its right",()=>{
    const listviewItemComponent = wrapper.find('li').first();
    expect(listviewItemComponent.hasClass('item')).toEqual(true);
    expect(listviewItemComponent.hasClass('right')).toEqual(true);
    expect(listviewItemComponent.hasClass('labeled')).toEqual(true);
    expect(listviewItemComponent.prop("label")).toEqual("One");

    const listviewItemDetailComponent = listviewItemComponent.find('div').children().at(0);
    expect(listviewItemDetailComponent.hasClass('detail')).toEqual(true);
    expect(listviewItemDetailComponent.text()).toEqual('First Item');

    const listviewItemLabelConComponent = listviewItemComponent.find('div').children().at(1);
    const listviewItemLabelComponent = listviewItemLabelConComponent.find('span');
    expect(listviewItemLabelComponent.hasClass('label')).toEqual(true);
    expect(listviewItemLabelComponent.text()).toEqual('One');
  });

});


describe("Listview items with icons",()=>{
  const items = [
    {label: "One",text: "One", icon: "rocket"},
    {label: "Two",text: "Two", icon: "home"},
    {label: "Three",text: "Three", icon: "dashboard"}
  ];

  const wrapper = mount(
    <Listview uniformLabels items={items} />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain a ul and 3 li",()=>{
    const listviewComponent = wrapper.find('ul');
    expect(listviewComponent).toHaveLength(1);
    expect(listviewComponent.hasClass('uniform')).toEqual(true);
    const listviewItemsComponent = wrapper.find('li');
    expect(listviewItemsComponent).toHaveLength(3);
  });

  it("should have the first li with the text of One and icon of rocket",()=>{
    const listviewItemComponent = wrapper.find('li').first();
    const listviewItemInfoComponent = listviewItemComponent.find('i');
    expect(listviewItemInfoComponent.hasClass('rocket')).toEqual(true);
    expect(listviewItemInfoComponent.hasClass('icon')).toEqual(true);
    const listviewItemTextComponent = listviewItemComponent.find('div').at(2);
    expect(listviewItemTextComponent.text()).toEqual('One');
  });

  it("should have the second li with the text of Two and icon of home",()=>{
    const listviewItemComponent = wrapper.find('li').at(1);
    expect(listviewItemComponent.hasClass('item')).toEqual(true);
    const listviewItemInfoComponent = listviewItemComponent.find('i');
    expect(listviewItemInfoComponent.hasClass('home')).toEqual(true);
    expect(listviewItemInfoComponent.hasClass('icon')).toEqual(true);
    const listviewItemTextComponent = listviewItemComponent.find('div').at(2);
    expect(listviewItemTextComponent.text()).toEqual('Two');
  });

  it("should have the last li with the text of Three and icon of dashboard",()=>{
    const listviewItemComponent = wrapper.find('li').at(2);
    expect(listviewItemComponent.hasClass('item')).toEqual(true);
    const listviewItemInfoComponent = listviewItemComponent.find('i');
    expect(listviewItemInfoComponent.hasClass('dashboard')).toEqual(true);
    expect(listviewItemInfoComponent.hasClass('icon')).toEqual(true);
    const listviewItemTextComponent = listviewItemComponent.find('div').at(2);
    expect(listviewItemTextComponent.text()).toEqual('Three');
  });
});

describe("Listview with Theme",()=>{
  const wrapper = mount(
    <Listview variation="alt">
      <ListviewItem active>One</ListviewItem>
      <ListviewItem>Two</ListviewItem>
      <ListviewItem>Three</ListviewItem>
    </Listview>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain a ul and 3 li",()=>{
    const listviewComponent = wrapper.find('ul');
    expect(listviewComponent).toHaveLength(1);
    expect(listviewComponent.hasClass('alt')).toEqual(true);
    const listviewItemsComponent = wrapper.find('li');
    expect(listviewItemsComponent).toHaveLength(3);
  });

  it("should have the first li with the text of One and class of active",()=>{
    const listviewItemComponent = wrapper.find('li').first();
    expect(listviewItemComponent.hasClass('active')).toEqual(true);
    expect(listviewItemComponent.text()).toEqual('One');

  });
});

describe("Listview inverted with Theme",()=>{
  const wrapper = mount(
    <Listview inverted variation="alt">
      <ListviewItem active>One</ListviewItem>
      <ListviewItem>Two</ListviewItem>
      <ListviewItem>Three</ListviewItem>
    </Listview>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain a ul and 3 li",()=>{
    const listviewComponent = wrapper.find('ul');
    expect(listviewComponent).toHaveLength(1);
    expect(listviewComponent.hasClass('alt')).toEqual(true);
    expect(listviewComponent.hasClass('inverted')).toEqual(true);
    const listviewItemsComponent = wrapper.find('li');
    expect(listviewItemsComponent).toHaveLength(3);
  });

  it("should have the first li with the text of One and class of active",()=>{
    const listviewItemComponent = wrapper.find('li').first();
    expect(listviewItemComponent.hasClass('active')).toEqual(true);
    expect(listviewItemComponent.text()).toEqual('One');
  });
});

describe("Listview borderless",()=>{
  const wrapper = mount(
    <Listview borderless>
      <ListviewItem active>One</ListviewItem>
      <ListviewItem>Two</ListviewItem>
      <ListviewItem>Three</ListviewItem>
    </Listview>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain a ul and 3 li",()=>{
    const listviewComponent = wrapper.find('ul');
    expect(listviewComponent).toHaveLength(1);
    expect(listviewComponent.hasClass('borderless')).toEqual(true);
    const listviewItemsComponent = wrapper.find('li');
    expect(listviewItemsComponent).toHaveLength(3);
  });

  it("should have the first li with the text of One and class of active",()=>{
    const listviewItemComponent = wrapper.find('li').first();
    expect(listviewItemComponent.hasClass('active')).toEqual(true);
    expect(listviewItemComponent.text()).toEqual('One');
  });
});

describe("Listview thumbnails",()=>{

  const items = range(1,3).map(function(i) {
    return {text: `Item ${i}`,thumbnail: `https://ph.ob1.nu/300/${i}00`};
  });

  const wrapper = mount(
    <Listview items={items} />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain a ul and 6 li",()=>{
    const listviewComponent = wrapper.find('ul');
    expect(listviewComponent).toHaveLength(1);
    const listviewItemsComponent = wrapper.find('li');
    expect(listviewItemsComponent).toHaveLength(2);
  });

  it("should have the first li with the text of Item 1",()=>{
    const listviewItemComponent = wrapper.find('li').first();
    expect(listviewItemComponent.text()).toEqual('Item 1');
  });

  it("should have item 1 with thumbnail and url matches",()=>{
    const listviewItemComponent = wrapper.find('li').first();
    const listviewItemThumbnailComponent = listviewItemComponent.find('div').first();
    const listviewItemImageComponent = listviewItemComponent.find('aek-img');
    expect(listviewItemThumbnailComponent.hasClass('thumbnail')).toEqual(true);
    expect(listviewItemThumbnailComponent.hasClass('medium')).toEqual(true);
    expect(listviewItemThumbnailComponent.hasClass('rounded')).toEqual(true);
    expect(listviewItemImageComponent.prop('style')).toHaveProperty('backgroundImage', 'url(https://ph.ob1.nu/300/100)');
  });

});

describe("Listview thumbnails props",()=>{

  const items = range(1,3).map(function(i) {
    return {text: `Item ${i}`, thumbBorder: true, thumbContained: true, thumbRounded: true, thumbnail: `https://ph.ob1.nu/300/${i}00`};
  });

  const wrapper = mount(
    <Listview items={items} />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain a ul and 2 li",()=>{
    const listviewComponent = wrapper.find('ul');
    expect(listviewComponent).toHaveLength(1);
    const listviewItemsComponent = wrapper.find('li');
    expect(listviewItemsComponent).toHaveLength(2);
  });

  it("should have the first li with the text of Item 1",()=>{
    const listviewItemComponent = wrapper.find('li').first();
    expect(listviewItemComponent.text()).toEqual('Item 1');
  });

  it("should have item 1 with thumbnail and url matches",()=>{
    const listviewItemComponent = wrapper.find('li').first();
    const listviewItemThumbnailComponent = listviewItemComponent.find('div').first();
    const listviewItemImageComponent = listviewItemComponent.find('aek-img');
    expect(listviewItemThumbnailComponent.hasClass('thumbnail')).toEqual(true);
    expect(listviewItemThumbnailComponent.hasClass('medium')).toEqual(true);
    expect(listviewItemThumbnailComponent.hasClass('rounded')).toEqual(true);
    expect(listviewItemThumbnailComponent.hasClass('contained')).toEqual(true);
    expect(listviewItemThumbnailComponent.hasClass('bordered')).toEqual(true);
    expect(listviewItemImageComponent.prop('style')).toHaveProperty('backgroundImage', 'url(https://ph.ob1.nu/300/100)');
  });

});

describe("Listview thumbnails Sizes",()=>{

  const thumbSize = ["mini","tiny","small","medium","large","big","huge"];

  const items = range(0,7).map(function(i) {
    return {text: `Item ${i}`, thumbSize: thumbSize[i], thumbBorder: true, thumbContained: true, thumbRounded: true, thumbnail: `https://ph.ob1.nu/300/${i}00`};
  });

  const wrapper = mount(
    <Listview items={items} />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain a ul and 7 li",()=>{
    const listviewComponent = wrapper.find('ul');
    expect(listviewComponent).toHaveLength(1);
    const listviewItemsComponent = wrapper.find('li');
    expect(listviewItemsComponent).toHaveLength(7);
  });

  it("should have the first li with the text of Item 0",()=>{
    const listviewItemComponent = wrapper.find('li').first();
    expect(listviewItemComponent.text()).toEqual('Item 0');
  });

  it("should have item 0 with thumbnail size of mini",()=>{
    const listviewItemComponent = wrapper.find('li').first();
    const listviewItemThumbnailComponent = listviewItemComponent.find('div').first();
    expect(listviewItemThumbnailComponent.hasClass('mini')).toEqual(true);
  });

  it("should have the first li with the text of Item 1",()=>{
    const listviewItemComponent = wrapper.find('li').at(1);
    expect(listviewItemComponent.text()).toEqual('Item 1');
  });

  it("should have item 1 with thumbnail size of tiny",()=>{
    const listviewItemComponent = wrapper.find('li').at(1);
    const listviewItemThumbnailComponent = listviewItemComponent.find('div').first();
    expect(listviewItemThumbnailComponent.hasClass('tiny')).toEqual(true);
  });

  it("should have the first li with the text of Item 2",()=>{
    const listviewItemComponent = wrapper.find('li').at(2);
    expect(listviewItemComponent.text()).toEqual('Item 2');
  });

  it("should have item 2 with thumbnail size of small",()=>{
    const listviewItemComponent = wrapper.find('li').at(2);
    const listviewItemThumbnailComponent = listviewItemComponent.find('div').first();
    expect(listviewItemThumbnailComponent.hasClass('small')).toEqual(true);
  });

  it("should have the first li with the text of Item 3",()=>{
    const listviewItemComponent = wrapper.find('li').at(3);
    expect(listviewItemComponent.text()).toEqual('Item 3');
  });

  it("should have item 3 with thumbnail size of medium",()=>{
    const listviewItemComponent = wrapper.find('li').at(3);
    const listviewItemThumbnailComponent = listviewItemComponent.find('div').first();
    expect(listviewItemThumbnailComponent.hasClass('medium')).toEqual(true);
  });

  it("should have the first li with the text of Item 4",()=>{
    const listviewItemComponent = wrapper.find('li').at(4);
    expect(listviewItemComponent.text()).toEqual('Item 4');
  });

  it("should have item 4 with thumbnail size of large",()=>{
    const listviewItemComponent = wrapper.find('li').at(4);
    const listviewItemThumbnailComponent = listviewItemComponent.find('div').first();
    expect(listviewItemThumbnailComponent.hasClass('large')).toEqual(true);
  });

  it("should have the first li with the text of Item 5",()=>{
    const listviewItemComponent = wrapper.find('li').at(5);
    expect(listviewItemComponent.text()).toEqual('Item 5');
  });

  it("should have item 5 with thumbnail size of big",()=>{
    const listviewItemComponent = wrapper.find('li').at(5);
    const listviewItemThumbnailComponent = listviewItemComponent.find('div').first();
    expect(listviewItemThumbnailComponent.hasClass('big')).toEqual(true);
  });

  it("should have the first li with the text of Item 6",()=>{
    const listviewItemComponent = wrapper.find('li').at(6);
    expect(listviewItemComponent.text()).toEqual('Item 6');
  });

  it("should have item 6 with thumbnail size of huge",()=>{
    const listviewItemComponent = wrapper.find('li').at(6);
    const listviewItemThumbnailComponent = listviewItemComponent.find('div').first();
    expect(listviewItemThumbnailComponent.hasClass('huge')).toEqual(true);
  });

});

describe("Listview Item Factory",()=>{
  const items = [
    {
      name: "inbox",
      count: 4,
      url: "http://mydomain.com/inbox"
    },
    {
      name: "outbox",
      count: 2,
      icon: "refresh",
      url: "http://mydomain.com/outbox"
    },
    {
      name: "sent",
      count: 23,
      icon: "mail",
      url: "http://mydomain.com/sent"
    }
  ];

  const wrapper = mount(
    <Listview
      items={items}
      variation="alt"
      itemFactory={(item,n)=> {
        return (
          <ListviewItem key={"item" + n} icon={item.icon || item.name} label={item.count} href={item.url} active={item.name === "inbox"} labelRight>
            <span style={{textTransform: "uppercase"}}>{item.name}</span>
          </ListviewItem>
        );
      }}
    />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain a ul and 3 li",()=>{
    const listviewComponent = wrapper.find('ul');
    expect(listviewComponent).toHaveLength(1);
    const listviewItemsComponent = wrapper.find('li');
    expect(listviewItemsComponent).toHaveLength(3);
  });

  it("should have the first li with the text of inbox ",()=>{
    const listviewItemComponent = wrapper.find('li').first();
    expect(listviewItemComponent.hasClass('item')).toEqual(true);
    expect(listviewItemComponent.hasClass('active')).toEqual(true);
    expect(listviewItemComponent.find('span').first().text()).toEqual('inbox');
  });
  it("should have the second li with the text of outbox ",()=>{
    const listviewItemComponent = wrapper.find('li').at(1);
    expect(listviewItemComponent.hasClass('item')).toEqual(true);
    expect(listviewItemComponent.hasClass('active')).toEqual(false);
    expect(listviewItemComponent.find('span').first().text()).toEqual('outbox');
  });
  it("should have the third li with the text of sent ",()=>{
    const listviewItemComponent = wrapper.find('li').at(2);
    expect(listviewItemComponent.hasClass('item')).toEqual(true);
    expect(listviewItemComponent.hasClass('active')).toEqual(false);
    expect(listviewItemComponent.find('span').first().text()).toEqual('sent');
  });
});

describe("Listview flush",()=>{
  const wrapper = mount(
    <Listview flush>
      <ListviewItem active>One</ListviewItem>
      <ListviewItem>Two</ListviewItem>
      <ListviewItem>Three</ListviewItem>
    </Listview>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain a ul and 3 li",()=>{
    const listviewComponent = wrapper.find('ul');
    expect(listviewComponent).toHaveLength(1);
    expect(listviewComponent.hasClass('flush')).toEqual(true);
    const listviewItemsComponent = wrapper.find('li');
    expect(listviewItemsComponent).toHaveLength(3);
  });

  it("should have the first li with the text of One and class of active",()=>{
    const listviewItemComponent = wrapper.find('li').first();
    expect(listviewItemComponent.hasClass('active')).toEqual(true);
    expect(listviewItemComponent.text()).toEqual('One');
  });
});

describe("Listview formatted",()=>{
  const wrapper = mount(
    <Listview formatted>
      <ListviewItem active>One</ListviewItem>
      <ListviewItem>Two</ListviewItem>
      <ListviewItem>Three</ListviewItem>
    </Listview>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should contain a ul and 3 li",()=>{
    const listviewComponent = wrapper.find('ul');
    expect(listviewComponent).toHaveLength(1);
    expect(listviewComponent.hasClass('formatted')).toEqual(true);
    const listviewItemsComponent = wrapper.find('li');
    expect(listviewItemsComponent).toHaveLength(3);
  });

  it("should have the first li with the text of One and class of active",()=>{
    const listviewItemComponent = wrapper.find('li').first();
    expect(listviewItemComponent.hasClass('active')).toEqual(true);
    expect(listviewItemComponent.text()).toEqual('One');
  });
});
