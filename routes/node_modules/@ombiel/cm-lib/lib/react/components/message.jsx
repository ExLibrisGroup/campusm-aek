import "./base.aekcss";
import "./message.aekcss";
import "./icon.aekcss";

import {includes} from "lodash";

import React from "react";
import PropTypes from "../utils/prop-types-extra";
import mergeProps from "../utils/merge-props";
import pickHtmlProps from "../utils/pick-html-props";


export class Message extends React.Component {

  constructor() {
    super();
    this.state = {hidden: false};
  }

  dismiss = (e)=>{
    e.preventDefault();
    const {willDismiss,didDismiss} = this.props;

    if (!willDismiss || willDismiss(e) !== false) {
      this.setState({hidden: true});
      if (didDismiss) {
        setTimeout(didDismiss.bind(e),0);
      }
    }
  }

  render() {
    const props = this.props;

    if (this.state.hidden) {
      return false;
    }

    var classSet = {
      ui: true,
      visible: true
    };

    ["size","theme","variation"].forEach(function(prop) {
      if (props[prop]) { classSet[props[prop]] = true; }
    });

    ["icon","inlineIcon","compact"].forEach(function(prop) {
      if (props[prop]) { classSet[prop] = true; }
    });

    if (props.inlineIcon) { classSet.icon = false; }

    classSet.message = true;


    var style = {};

    if (includes(["top","bottom"],props.vAlign)) {
      style.verticalAlign = props.vAlign;
    }

    var icon = props.icon && <i aria-hidden="true" className={`${props.icon} icon`} style={style}></i>;
    var header = props.heading && <div className="header">{props.heading}</div>;
    /* eslint-disable jsx-a11y/anchor-has-content,jsx-a11y/href-no-hash,jsx-a11y/anchor-is-valid */
    var dismissIcon = props.dismissable && <a href="#" key="dismiss" className="close" onClick={this.dismiss}><i aria-hidden="true" className="close icon" /></a>;
    /* eslint-enable jsx-a11y/anchor-has-content,jsx-a11y/href-no-hash,jsx-a11y/anchor-is-valid */
    const newProps = mergeProps({classSet},props);

    var content = props.children;

    if (icon && !props.inlineIcon) {
      content = (
        <div className="content" key="content" style={style}>{dismissIcon} {header} {content}</div>
      );
      header = null;
    }
    else if (dismissIcon) {
      content = [dismissIcon,content];
    }

    return (
      <div {...pickHtmlProps(newProps)}>
        {icon}
        {header}
        {content}
      </div>
    );
  }
}

Message.propTypes = {
  willDismiss: PropTypes.func,
  didDismiss: PropTypes.func,
};

export function WarningMessage(props) {
  return <Message variation="warning" icon="warning sign" {...props} />;
}

export function InfoMessage(props) {
  return <Message variation="info" icon="info circle" {...props} />;
}

export function ErrorMessage(props) {
  return <Message variation="error" icon="flag" {...props} />;
}

export function SuccessMessage(props) {
  return <Message variation="success" icon="check circle" {...props} />;
}
