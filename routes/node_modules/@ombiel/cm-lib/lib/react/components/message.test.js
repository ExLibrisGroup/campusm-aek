import React from 'react';
import {shallow,mount} from "enzyme";
import {Message,InfoMessage,WarningMessage,ErrorMessage,SuccessMessage} from "./message";

describe("Message with no props",()=>{
  const wrapper = shallow(
    <Message>
      DisplayText
    </Message>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have one message with css classes ui, visible, message",()=>{
    const messageComponent = wrapper.find('div');
    expect(messageComponent).toHaveLength(1);
    expect(messageComponent.hasClass('ui')).toEqual(true);
    expect(messageComponent.hasClass('visible')).toEqual(true);
    expect(messageComponent.hasClass('message')).toEqual(true);
    expect(messageComponent.text()).toEqual('DisplayText');
  });

  it("should not have any other css classes", ()=>{
    expect(wrapper.find('div').prop('className')).toEqual("ui visible message");
  });

});

describe("Message with header",()=>{
  const wrapper = shallow(
    <Message heading="Heading">
      DisplayText
    </Message>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should be a message with a header of Heading",()=>{
    const messageComponent = wrapper.find('div.message');
    const headerComponent = messageComponent.children().find('div');
    expect(messageComponent).toHaveLength(1);
    expect(headerComponent).toHaveLength(1);
    expect(headerComponent.prop('className')).toEqual("header");
    expect(headerComponent.text()).toEqual('Heading');
  });

  it("should not have any other css classes", ()=>{
    const messageComponent = wrapper.find('div.message');
    expect(messageComponent.prop('className')).toEqual("ui visible message");
  });

});

describe("Message with header and icon",()=>{
  const wrapper = shallow(
    <Message heading="Heading" icon="rocket">
      DisplayText
    </Message>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should be a message with a header of Heading and Icon of Rocket",()=>{
    const messageComponent = wrapper.find('div.message');
    const contentComponent = messageComponent.children().find('div.content');
    const headerComponent = contentComponent.children().find('div.header');
    const iconComponent = wrapper.find('i');
    expect(messageComponent).toHaveLength(1);
    expect(contentComponent).toHaveLength(1);
    expect(headerComponent).toHaveLength(1);
    expect(iconComponent).toHaveLength(1);
    expect(messageComponent.prop('className')).toEqual("ui visible icon message");
    expect(headerComponent.prop('className')).toEqual("header");
    expect(headerComponent.text()).toEqual('Heading');
    expect(iconComponent.hasClass('rocket')).toEqual(true);
    expect(iconComponent.hasClass('icon')).toEqual(true);
  });

  it("should not have any other css classes", ()=>{
    const messageComponent = wrapper.find('div.message');
    expect(messageComponent.prop('className')).toEqual("ui visible icon message");
  });

});

describe("Message with size prop",()=>{
  const wrapper = shallow(
    <Message
      size="small"
    />
  );

  it("should have a css class of small if size is small",()=>{
    expect(wrapper.find('div.message').hasClass('small')).toEqual(true);
  });

  it("should have a css class of  if size is big",()=>{
    wrapper.setProps({size: "big"});
    expect(wrapper.find('div.message').hasClass('big')).toEqual(true);
  });

  it("should have a css class of large if size is large",()=>{
    wrapper.setProps({size: "large"});
    expect(wrapper.find('div.message').hasClass('large')).toEqual(true);
  });

  it("should have a css class of huge if size is huge",()=>{
    wrapper.setProps({size: "huge"});
    expect(wrapper.find('div.message').hasClass('huge')).toEqual(true);
  });

  it("should have a css class of massive if size is massive",()=>{
    wrapper.setProps({size: "massive"});
    expect(wrapper.find('div.message').hasClass('massive')).toEqual(true);
  });

});

describe("Compact Message",()=>{

  const wrapper = shallow(
    <Message compact />
  );

  it("should have a css class of compact if compact is added",()=>{
    expect(wrapper.find('div.message').hasClass('compact')).toEqual(true);
  });

});

describe("Theming on a Message",()=>{

  const wrapper = shallow(
    <Message theme="prime" />
  );

  it("should have a css class of prime if the theme is prime",()=>{
    expect(wrapper.find('div.message').hasClass('prime')).toEqual(true);
  });

  it("should have a css class of alt if the theme is alt",()=>{
    wrapper.setProps({theme: "alt"});
    expect(wrapper.find('div.message').hasClass('alt')).toEqual(true);
  });

});

describe("Dismissable Button",()=>{
  const wrapper = mount(
    <Message dismissable>Hello World</Message>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a clickable icon to be dismissed",()=>{
    const dismissableComponent = wrapper.find('a.close');
    expect(dismissableComponent).toHaveLength(1);
  });

  it("should be dismissed and no longer exist",()=>{
    const dismissableComponent = wrapper.find('a.close');
    dismissableComponent.simulate('click');
    expect(wrapper.find('div.message')).toHaveLength(0);
  });

});

describe("Warning Message",()=>{
  const wrapper = mount(
    <WarningMessage heading="Warning">
      DisplayText
    </WarningMessage>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should be a Warning Message with a header of Info",()=>{
    const messageComponent = wrapper.find('div.message');
    const contentComponent = messageComponent.children().find('div.content');
    const headerComponent = contentComponent.children().find('div.header');
    expect(messageComponent).toHaveLength(1);
    expect(contentComponent).toHaveLength(1);
    expect(headerComponent).toHaveLength(1);
    expect(headerComponent.prop('className')).toEqual("header");
    expect(headerComponent.text()).toEqual('Warning');
  });

  it("should not have any other css classes", ()=>{
    const messageComponent = wrapper.find('div.message');
    expect(messageComponent.prop('className')).toEqual("ui visible warning icon message");
  });

});

describe("Info Message",()=>{
  const wrapper = mount(
    <InfoMessage heading="Info">
      DisplayText
    </InfoMessage>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should be a Info Message with a header of Info",()=>{
    const messageComponent = wrapper.find('div.message');
    const contentComponent = messageComponent.children().find('div.content');
    const headerComponent = contentComponent.children().find('div.header');
    expect(messageComponent).toHaveLength(1);
    expect(contentComponent).toHaveLength(1);
    expect(headerComponent).toHaveLength(1);
    expect(headerComponent.prop('className')).toEqual("header");
    expect(headerComponent.text()).toEqual('Info');
  });

  it("should not have any other css classes", ()=>{
    const messageComponent = wrapper.find('div.message');
    expect(messageComponent.prop('className')).toEqual("ui visible info icon message");
  });

});

describe("Error Message",()=>{
  const wrapper = mount(
    <ErrorMessage heading="Error">
      DisplayText
    </ErrorMessage>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should be a Error Message with a header of Error",()=>{
    const messageComponent = wrapper.find('div.message');
    const contentComponent = messageComponent.children().find('div.content');
    const headerComponent = contentComponent.children().find('div.header');
    expect(messageComponent).toHaveLength(1);
    expect(contentComponent).toHaveLength(1);
    expect(headerComponent).toHaveLength(1);
    expect(headerComponent.prop('className')).toEqual("header");
    expect(headerComponent.text()).toEqual('Error');
  });

  it("should not have any other css classes", ()=>{
    const messageComponent = wrapper.find('div.message');
    expect(messageComponent.prop('className')).toEqual("ui visible error icon message");
  });

});

describe("Success Message",()=>{
  const wrapper = mount(
    <SuccessMessage heading="Success">
      DisplayText
    </SuccessMessage>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should be a Success Message with a header of Success",()=>{
    const messageComponent = wrapper.find('div.message');
    const contentComponent = messageComponent.children().find('div.content');
    const headerComponent = contentComponent.children().find('div.header');
    expect(messageComponent).toHaveLength(1);
    expect(contentComponent).toHaveLength(1);
    expect(headerComponent).toHaveLength(1);
    expect(headerComponent.prop('className')).toEqual("header");
    expect(headerComponent.text()).toEqual('Success');
  });

  it("should not have any other css classes", ()=>{
    const messageComponent = wrapper.find('div.message');
    expect(messageComponent.prop('className')).toEqual("ui visible success icon message");
  });

});
