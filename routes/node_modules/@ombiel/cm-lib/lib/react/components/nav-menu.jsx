import "./base.aekcss";
import "./menu.aekcss";
import "./icon.aekcss";

import {isString} from "lodash";

import React from "react";
import PropTypes from "prop-types";

import getChildren from "../utils/children";
import mergeProps from "../utils/merge-props";
import cloneElement from "../utils/clone";
import pickHtmlProps from "../utils/pick-html-props";
import EventEmitter from "../../event-emitter";

const numbers = "zero,one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve,thirteen,fourteen,fifteen,sixteen".split(",");


class RouterListener extends EventEmitter {
  constructor(router) {
    super();
    router.addRoute("*",(ctx,next)=>{
      this.emit("routechange",ctx);
      next();
    });
  }
}

export function NavMenuItem(props) {

  const {truncateText,...otherProps} = props;

  let newProps = mergeProps({
    classSet: {
      item: true,
      active: props.active,
    },
  },otherProps);

  newProps.children = getChildren(props);

  if (truncateText) {
    newProps.children = (
      <span
        style={{
          overflow: "hidden",
          textOverflow: "ellipsis",
          whiteSpace: "nowrap",
          maxWidth: "100%",
        }}
      >{newProps.children}</span>
    );
  }

  if (props.icon) {
    let icon;
    if (isString(props.icon)) {
      icon = <i className={`${props.icon} icon`} key="icon"></i>;
    }
    else {
      icon = <i className="icon" key="icon">{props.icon}</i>;
    }
    newProps.children = [icon].concat(newProps.children);
  }

  delete newProps.icon;

  let badgeProps;

  if (props.badge != null && props.badge !== false) {
    badgeProps = {
      className: "ui floating circular label",
      key: "badge",
      style: {
        backgroundColor: props.inverted ? "rgba(255,255,255,0.35)" : "rgba(0,0,0,0.35)",
        left: "auto",
        right: "5%",
        top: "10%",
        margin: 0
      }
    };

    badgeProps = mergeProps(badgeProps,props.badgeProps);

    newProps.children.push(<span {...badgeProps}>{props.badge}</span>);

  }

  const {component} = props;

  if (isString(component)) {
    newProps = pickHtmlProps(newProps);
  }

  return React.createElement(component,newProps);
}

NavMenuItem.propTypes = {
  active: PropTypes.bool,
  icon: PropTypes.any,
  children: PropTypes.any,
  badge: PropTypes.any,
  inverted: PropTypes.bool,
  badgeProps: PropTypes.object,
  component: PropTypes.any,
  truncateText: PropTypes.bool,
};

NavMenuItem.defaultProps = {
  component: "a",
  href: "#",
};



export class NavMenu extends React.Component {

  constructor() {
    super();
    this.state = {};
  }

  componentDidMount() {
    this.checkRouter();
  }

  componentDidUpdate() {
    this.checkRouter();
  }

  componentWillUnmount() {
    this.detachRouter();
  }

  detachRouter = ()=>{
    if (this.router) {
      this.router._menuEmitter.off("routechange",this.routeChange);
    }
  }

  checkRouter = ()=>{
    if (this.props.router) {
      if (!this.router) {
        this.router = this.props.router;
        if (!this.router._menuEmitter) {
          this.router._menuEmitter = new RouterListener(this.router);
        }
        this.router._menuEmitter.on("routechange",this.routeChange);
        this.setState({currentPath: this.router.getCurrentPath()});
      }
    }
    else {
      this.detachRouter();
    }
  }

  routeChange = (ctx)=>{
    this.setState({currentPath: ctx.path});
  }

  render() {

    var props = {
      classSet: {
        ui: 1,
        fluid: true,
        inverted: this.props.inverted,
        labeled: this.props.icon,
        icon: this.props.icon
      },
      style: {
        borderRadius: 0,
        marginTop: 0
      }
    };

    if (this.props.top) {
      props.style.top = `${this.props.top}px`;
      props.style.position = "absolute";
    }

    props = mergeProps(props,this.props);

    delete props.icon;

    if (props.theme) {
      props.className += ` ${props.theme}`;
    }

    var children = getChildren(this).map((child,i)=>{
      var childPath = child.props.href && child.props.href.replace("#","");
      return cloneElement(child,{
        active: child.props.active == null ? (childPath === this.state.currentPath) : child.props.active,
        inverted: this.props.inverted,
        key: `navItem${i}`
      });
    });

    props.className += ` ${numbers[children.length]} item menu`;

    const {component} = props;

    if (isString(component)) {
      props = pickHtmlProps(props);
    }

    return React.createElement(component,props,children);

  }
}

NavMenu.propTypes = {
  router: PropTypes.object,
  inverted: PropTypes.bool,
  icon: PropTypes.any,
  top: PropTypes.number,
};

NavMenu.defaultProps = {
  component: "nav",
  fluid: true,
  icon: true,
};
