import React from 'react';
import {mount} from "enzyme";
import {NavMenu,NavMenuItem} from "./nav-menu";

describe("NavMenu with no props",()=>{
  const wrapper = mount(
    <NavMenu></NavMenu>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have classes of ui fluid labeled icon zero item menu",()=>{
    const navComponent = wrapper.find('nav');
    expect(navComponent).toHaveLength(1);
    expect(navComponent.hasClass('ui')).toEqual(true);
    expect(navComponent.hasClass('fluid')).toEqual(true);
    expect(navComponent.hasClass('labeled')).toEqual(true);
    expect(navComponent.hasClass('icon')).toEqual(true);
    expect(navComponent.hasClass('zero')).toEqual(true);
    expect(navComponent.hasClass('item')).toEqual(true);
    expect(navComponent.hasClass('menu')).toEqual(true);
  });
});

describe("NavMenu with one item",()=>{
  const wrapper = mount(
    <NavMenu>
      <NavMenuItem icon="marker" href="#/">Item One</NavMenuItem>
    </NavMenu>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have classes of ui fluid labeled icon one item menu",()=>{
    const navComponent = wrapper.find('nav');
    expect(navComponent).toHaveLength(1);
    expect(navComponent.hasClass('ui')).toEqual(true);
    expect(navComponent.hasClass('fluid')).toEqual(true);
    expect(navComponent.hasClass('labeled')).toEqual(true);
    expect(navComponent.hasClass('icon')).toEqual(true);
    expect(navComponent.hasClass('one')).toEqual(true);
    expect(navComponent.hasClass('item')).toEqual(true);
    expect(navComponent.hasClass('menu')).toEqual(true);
  });

  it("should have child item with the class of item, a href of #/, icon of marker and the text of Item One",()=>{
    const navItemComponent = wrapper.find('a');
    const navItemIconComponent = navItemComponent.find('i');
    expect(navItemComponent).toHaveLength(1);
    expect(navItemIconComponent).toHaveLength(1);
    expect(navItemComponent.hasClass('item')).toEqual(true);
    expect(navItemComponent.prop('href')).toEqual("#/");
    expect(navItemIconComponent.hasClass('marker')).toEqual(true);
    expect(navItemIconComponent.hasClass('icon')).toEqual(true);
    expect(navItemComponent.text()).toEqual('Item One');
  });
});

describe("NavMenu with two items",()=>{
  const wrapper = mount(
    <NavMenu>
      <NavMenuItem icon="marker" href="#/">Item One</NavMenuItem>
      <NavMenuItem icon="rocket" href="#/another-page">Item Two</NavMenuItem>
    </NavMenu>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have classes of ui fluid labeled icon two item menu",()=>{
    const navComponent = wrapper.find('nav');
    expect(navComponent).toHaveLength(1);
    expect(navComponent.hasClass('ui')).toEqual(true);
    expect(navComponent.hasClass('fluid')).toEqual(true);
    expect(navComponent.hasClass('labeled')).toEqual(true);
    expect(navComponent.hasClass('icon')).toEqual(true);
    expect(navComponent.hasClass('two')).toEqual(true);
    expect(navComponent.hasClass('item')).toEqual(true);
    expect(navComponent.hasClass('menu')).toEqual(true);
  });

  it("should have two child items",()=>{
    const navItemComponent = wrapper.find('a');
    expect(navItemComponent).toHaveLength(2);
  });

  it("should have child item with the class of item, a href of #/, icon of marker and the text of Item One",()=>{
    const navItemComponent = wrapper.find('a').first();
    const navItemIconComponent = navItemComponent.find('i');
    expect(navItemComponent).toHaveLength(1);
    expect(navItemIconComponent).toHaveLength(1);
    expect(navItemComponent.hasClass('item')).toEqual(true);
    expect(navItemComponent.prop('href')).toEqual("#/");
    expect(navItemIconComponent.hasClass('marker')).toEqual(true);
    expect(navItemIconComponent.hasClass('icon')).toEqual(true);
    expect(navItemComponent.text()).toEqual('Item One');
  });

  it("should have child item with the class of item, a href of #/another-page, icon of rocket and the text of Item Two",()=>{
    const navItemComponent = wrapper.find('a').at(1);
    const navItemIconComponent = navItemComponent.find('i');
    expect(navItemComponent).toHaveLength(1);
    expect(navItemIconComponent).toHaveLength(1);
    expect(navItemComponent.hasClass('item')).toEqual(true);
    expect(navItemComponent.prop('href')).toEqual("#/another-page");
    expect(navItemIconComponent.hasClass('rocket')).toEqual(true);
    expect(navItemIconComponent.hasClass('icon')).toEqual(true);
    expect(navItemComponent.text()).toEqual('Item Two');
  });
});

describe("NavMenu with two items, one active one not",()=>{
  const wrapper = mount(
    <NavMenu>
      <NavMenuItem icon="marker" href="#/">Item One</NavMenuItem>
      <NavMenuItem icon="rocket" active href="#/another-page">Item Two</NavMenuItem>
    </NavMenu>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should not have item one with an active class but item two should",()=>{
    const navItemOneComponent = wrapper.find('a').first();
    const navItemTwoComponent = wrapper.find('a').at(1);
    expect(navItemOneComponent.hasClass('active')).toEqual(false);
    expect(navItemTwoComponent.hasClass('active')).toEqual(true);
  });
});

describe("NavMenu with theme",()=>{
  const wrapper = mount(
    <NavMenu theme="prime">
      <NavMenuItem icon="marker" href="#/">Item One</NavMenuItem>
      <NavMenuItem icon="rocket" href="#/another-page">Item Two</NavMenuItem>
    </NavMenu>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should not have theme of prime",()=>{
    const navComponent = wrapper.find('nav');
    expect(navComponent).toHaveLength(1);
    expect(navComponent.hasClass("prime")).toEqual(true);
  });
});

describe("NavMenu inverted",()=>{
  const wrapper = mount(
    <NavMenu theme="prime" inverted>
      <NavMenuItem icon="marker" href="#/">Item One</NavMenuItem>
      <NavMenuItem icon="rocket" href="#/another-page">Item Two</NavMenuItem>
    </NavMenu>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should not have theme of prime",()=>{
    const navComponent = wrapper.find('nav');
    expect(navComponent).toHaveLength(1);
    expect(navComponent.hasClass("inverted")).toEqual(true);
  });
});

describe("NavMenu inverted",()=>{
  const wrapper = mount(
    <NavMenu theme="prime" inverted>
      <NavMenuItem icon="marker" href="#/">Item One</NavMenuItem>
      <NavMenuItem icon="rocket" href="#/another-page">Item Two</NavMenuItem>
    </NavMenu>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should not have theme of prime",()=>{
    const navComponent = wrapper.find('nav');
    expect(navComponent).toHaveLength(1);
    expect(navComponent.hasClass("inverted")).toEqual(true);
  });
});

describe("NavMenu with badges",()=>{
  const wrapper = mount(
    <NavMenu theme="prime" inverted>
      <NavMenuItem icon="marker" badge="23" href="#/">Item One</NavMenuItem>
      <NavMenuItem icon="calendar" href="#/another-page">Item Two</NavMenuItem>
      <NavMenuItem icon="rocket" active badge="43" href="#/one-more-page">Item Three</NavMenuItem>
    </NavMenu>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a badge on menuItem one and three but not two",()=>{
    const navItemOneComponent = wrapper.find('a').first();
    const navItemTwoComponent = wrapper.find('a').at(1);
    const navItemThreeComponent = wrapper.find('a').at(2);
    // Find Badges
    const navItemOneBadge = navItemOneComponent.find('span');
    const navItemTwoBadge = navItemTwoComponent.find('span');
    const navItemThreeBadge = navItemThreeComponent.find('span');
    // Check Lengths
    expect(navItemOneBadge).toHaveLength(1);
    expect(navItemTwoBadge).toHaveLength(0);
    expect(navItemThreeBadge).toHaveLength(1);
    // Check Active
    expect(navItemOneComponent.hasClass('active')).toEqual(false);
    expect(navItemTwoComponent.hasClass('active')).toEqual(false);
    expect(navItemThreeComponent.hasClass('active')).toEqual(true);
    // Check numbers on Badges
    expect(navItemOneBadge.text()).toEqual('23');
    expect(navItemThreeBadge.text()).toEqual('43');
  });
});
