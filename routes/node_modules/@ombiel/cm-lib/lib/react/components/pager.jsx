import "./base.aekcss";

import {reject,find} from "lodash";

import React from "react";
import PropTypes from "prop-types";
import HorizontalSlideTransition from "../transitions/horizontal-slide";
import mergeProps from "../utils/merge-props";
import Panel from "./panel";

export default class Pager extends React.Component {

  constructor() {
    super();
    this.state = {oldPages: []};
  }

  componentWillMount() {
    this.checkProps(this.props);
  }

  componentWillReceiveProps(props) {
    this.checkProps(props);
  }

  detachPage(key) {
    setTimeout(function() {
      this.setState({
        oldPages: reject(this.state.oldPages,(page)=>page.key === key)
      });
    }.bind(this),1);
  }



  checkProps(props) {
    const child = props.children;
    const currentPage = this.state.currentPage;
    const childKey = child && child.key;
    const currentKey = currentPage && currentPage.key;
    const pager = this;
    const newState = {};
    let oldPages = this.state.oldPages;


    if (childKey !== currentKey) {
      if (currentPage) {
        const currentPageTransition = React.cloneElement(currentPage.transition,{
          transitionMode: "out",
          transitionDirection: props.transitionDirection,
          key: currentPage.key
        });
        currentPage.transition = currentPageTransition;
        oldPages = oldPages.concat([currentPage]);
        newState.currentPage = null;
      }
      if (childKey) {
        // make sure new child isn't still transitioning out
        let newChild = find(this.state.oldPages,{key: childKey});
        if (newChild) {
          oldPages = reject(oldPages,(page)=>page.key === childKey);
        }
        else {
          newChild = {
            key: childKey,
            transition: <HorizontalSlideTransition>{child}</HorizontalSlideTransition>
          };
        }

        newChild.transition = React.cloneElement(newChild.transition,{
          transitionMode: currentKey ? "in" : null,
          key: childKey,
          transitionDirection: props.transitionDirection,
          onComplete: currentKey && function() {
            pager.detachPage(currentKey);
          },
          children: child
        });

        newState.currentPage = newChild;

      }

      newState.oldPages = oldPages;

      this.setState(newState);

    }
    // need to clone currentPage to ensure that any changed props are propogated
    else if (currentPage) {
      currentPage.transition = React.cloneElement(currentPage.transition,{
        key: currentPage.key,
        children: props.children
      });
    }
  }

  render() {
    const content = this.state.oldPages.map(function(page) {
      return page.transition;
    });
    if (this.state.currentPage) {
      content.push(this.state.currentPage.transition);
    }

    const props = mergeProps({className: "pager",style: {overflow: "hidden"}},this.props);

    return React.createElement(this.props.component,props,content);
  }

}

Pager.propTypes = {
  component: PropTypes.oneOfType([PropTypes.string,PropTypes.func]),
};

Pager.defaultProps = {
  component: Panel
};
