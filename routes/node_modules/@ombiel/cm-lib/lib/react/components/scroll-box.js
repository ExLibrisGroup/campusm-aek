import React from "react";
import PropTypes from "prop-types";
import {isArray,isString} from "lodash";
import mergeProps from "../utils/merge-props";

const scrollPositions = {};

export class ScrollBox extends React.Component {

  onRef = (domNode)=>{

    this.domNode = domNode;

    if (domNode) {

      const scrollID = this.getScrollID();

      if (!scrollID) { return; }

      if (!this._hasScrolled) {
        var {scrollLeft,scrollTop} = scrollPositions[scrollID] || {};
        if (scrollLeft) {
          domNode.scrollLeft = scrollLeft;
        }
        if (scrollTop) {
          domNode.scrollTop = scrollTop;
        }
      }
    }

    // const {ref} = this.props;
    //
    // if (ref) {
    //   ref(domNode,...args);
    // }

  }

  onScroll = (e)=>{
    this._hasScrolled = true;
    this.updateScrollPosition();

    const {onScroll} = this.props;

    if (onScroll) {
      onScroll(e);
    }
  }

  getScrollID() {
    const {preserveScrollPosition} = this.props;

    if (!preserveScrollPosition) { return null; }

    return isString(preserveScrollPosition) ? preserveScrollPosition : window.location.href;
  }

  setScrollPosition(top,left = 0) {
    const {domNode} = this;
    const scrollID = this.getScrollID();
    if (domNode) {
      domNode.scrollTop = top;
      domNode.scrollLeft = left;
    }
    scrollPositions[scrollID] = {
      scrollTop: top,
      scrollLeft: left
    };
  }

  updateScrollPosition() {
    const {domNode} = this;
    const scrollID = this.getScrollID();
    const {scrollTop,scrollLeft} = domNode;
    scrollPositions[scrollID] = {scrollTop,scrollLeft};
  }



  render() {

    var {margin,padding,component,preserveScrollPosition,...otherProps} = this.props;

    if (!isArray(margin)) { margin = [margin,margin,margin,margin]; }
    if (!isArray(padding)) { padding = [padding,padding,padding,padding]; }

    const [top,right,bottom,left] = margin;
    const [paddingTop,paddingRight,paddingBottom,paddingLeft] = padding;

    const newProps = mergeProps({
      style: {
        position: "absolute",
        paddingLeft,
        paddingRight,
        paddingTop,
        paddingBottom,
        left,
        right,
        top,
        bottom,
        overflow: "auto",
      }
    },otherProps,{
      ref: this.onRef,
      onScroll: this.onScroll,
    });

    return React.createElement(component,newProps);
  }
}

ScrollBox.propTypes = {
  margin: PropTypes.oneOfType([PropTypes.number,PropTypes.array]),
  padding: PropTypes.oneOfType([PropTypes.number,PropTypes.array]),
  preserveScrollPosition: PropTypes.oneOfType([PropTypes.bool,PropTypes.string]),
  component: PropTypes.string,
  // ref: PropTypes.func,
  onScroll: PropTypes.func,
};

ScrollBox.defaultProps = {
  margin: 0,
  padding: 0,
  component: "div",
};
