import "./base.aekcss";
import "./segment.aekcss";


import {isString} from "lodash";

import React from "react";
import PropTypes from "prop-types";

import mergeProps from "../utils/merge-props";
import pickHtmlProps from "../utils/pick-html-props";
import {CContainer} from "./flexbox";


export function Segment(props) {

  const classSet = {};
  let variation = props.variation || "";
  const style = {};

  ["disabled","loading","inverted","compact","nopadding"].forEach((prop)=>{
    if (props[prop]) { classSet[prop] = true; }
  });

  if (props.theme) {
    classSet[props.theme] = true;
  }
  if (props.ordinality) {
    classSet[props.ordinality] = true;
  }

  if (props.float) {
    variation += ` ${props.float} floated`;
    style.maxWidth = "50%";
  }

  if (props.textAlign) {
    variation += ` ${props.textAlign} aligned`;
  }

  let {children} = props;
  const {empty} = props;

  if (empty) {
    children = null;
  }

  if (!React.Children.count(children) && !props.loading && (props.placeholder || props.placeholderProps || props.placeholderComponent)) {

    const placeholderComponent = props.placeholderComponent || CContainer;

    const placeholderProps = mergeProps({
      children: props.placeholder,
      height: 100,
      style: {
        fontSize: "1.3em",
        opacity: 0.7,
        fontStyle: "italic",
        position: "relative",
        fontWeight: 200
      }
    },props.placeholderProps);

    children = React.createElement(placeholderComponent,placeholderProps);
  }


  props = pickHtmlProps(mergeProps({
    className: `ui ${variation} segment`
  },{classSet,style},props));

  delete props.placeholder;

  return (<div {...props}>{children}</div>);
}

Segment.propTypes = {
  theme: PropTypes.string,
  ordinality: PropTypes.string,
  float: PropTypes.string,
  textAlign: PropTypes.string,
  variation: PropTypes.string,
  children: PropTypes.any,
  empty: PropTypes.bool,
  loading: PropTypes.bool,
  placeholder: PropTypes.any,
  placeholderProps: PropTypes.object,
  placeholderComponent: PropTypes.any,
};

export function BasicSegment(props) {

  const newProps = mergeProps({className: "basic",style: {margin: 0}},props);

  return <Segment {...newProps} />;

}

export function Padding(props) {
  var newProps = mergeProps({className: "padding",component: "div"},props);
  var component = newProps.component;
  if (isString(component)) {
    newProps = pickHtmlProps(newProps);
  }
  return React.createElement(component,newProps);
}
