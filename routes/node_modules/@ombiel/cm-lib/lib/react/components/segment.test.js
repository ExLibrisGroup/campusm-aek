import React from 'react';
import {mount,shallow} from "enzyme";
import {Segment,Padding,BasicSegment} from "./segment";

describe("Segment no props",()=>{
  const wrapper = mount(
    <Segment>Segment</Segment>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have the classes of ui and segment",()=>{
    const segmentComponent = wrapper.find("div");
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('ui')).toEqual(true);
    expect(segmentComponent.hasClass('segment')).toEqual(true);
    expect(segmentComponent.text()).toEqual('Segment');
  });

});

describe("Segment Variations",()=>{
  const wrapper = mount(
    <Segment variation="vertical">Segment</Segment>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have the classes of ui, segment and vertical",()=>{
    const segmentComponent = wrapper.find("div");
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('ui')).toEqual(true);
    expect(segmentComponent.hasClass('segment')).toEqual(true);
    expect(segmentComponent.hasClass('vertical')).toEqual(true);
    expect(segmentComponent.text()).toEqual('Segment');
  });

  it("should have the classes of ui, segment and horizontal",()=>{
    wrapper.setProps({variation: "horizontal"});
    const segmentComponent = wrapper.find("div");
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('ui')).toEqual(true);
    expect(segmentComponent.hasClass('segment')).toEqual(true);
    expect(segmentComponent.hasClass('horizontal')).toEqual(true);
    expect(segmentComponent.text()).toEqual('Segment');
  });

  it("should have the classes of ui, segment and stacked",()=>{
    wrapper.setProps({variation: "stacked"});
    const segmentComponent = wrapper.find("div");
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('ui')).toEqual(true);
    expect(segmentComponent.hasClass('segment')).toEqual(true);
    expect(segmentComponent.hasClass('stacked')).toEqual(true);
    expect(segmentComponent.text()).toEqual('Segment');
  });

  it("should have the classes of ui, segment and tall stacked",()=>{
    wrapper.setProps({variation: "tall stacked"});
    const segmentComponent = wrapper.find("div");
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('ui')).toEqual(true);
    expect(segmentComponent.hasClass('segment')).toEqual(true);
    expect(segmentComponent.hasClass('tall')).toEqual(true);
    expect(segmentComponent.hasClass('stacked')).toEqual(true);
    expect(segmentComponent.text()).toEqual('Segment');
  });

  it("should have the classes of ui, segment and piled",()=>{
    wrapper.setProps({variation: "piled"});
    const segmentComponent = wrapper.find("div");
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('ui')).toEqual(true);
    expect(segmentComponent.hasClass('segment')).toEqual(true);
    expect(segmentComponent.hasClass('piled')).toEqual(true);
    expect(segmentComponent.text()).toEqual('Segment');
  });

  it("should have the classes of ui, segment and basic",()=>{
    wrapper.setProps({variation: "basic"});
    const segmentComponent = wrapper.find("div");
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('ui')).toEqual(true);
    expect(segmentComponent.hasClass('segment')).toEqual(true);
    expect(segmentComponent.hasClass('basic')).toEqual(true);
    expect(segmentComponent.text()).toEqual('Segment');
  });

});

describe("Segment States",()=>{
  const wrapper = mount(
    <Segment disabled loading>Segment</Segment>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have the classes of loading and disabled",()=>{
    const segmentComponent = wrapper.find("div");
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('loading')).toEqual(true);
    expect(segmentComponent.hasClass('disabled')).toEqual(true);
  });
});

describe("Segment Placeholder",()=>{
  const wrapper = mount(
    <Segment placeholder="No Content"></Segment>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have the text of No Content inside of the parent element",()=>{
    const segmentComponent = wrapper.find("div.segment");
    const placeholderComponent = segmentComponent.children().find('div');
    expect(segmentComponent).toHaveLength(1);
    expect(placeholderComponent).toHaveLength(1);
    expect(placeholderComponent.text()).toEqual('No Content');
  });

  it("should have the color of red on the placeholder",()=>{
    wrapper.setProps({placeholderProps: {style: {color: 'red'}}});
    const segmentComponent = wrapper.find("div.segment");
    const placeholderComponent = segmentComponent.children().find('div');
    expect(segmentComponent).toHaveLength(1);
    expect(placeholderComponent).toHaveLength(1);
    expect(placeholderComponent.prop('style')).toHaveProperty('color', 'red');
    expect(placeholderComponent.text()).toEqual('No Content');
  });

  it("should be a pre element for the placeholder",()=>{
    wrapper.setProps({placeholderComponent: "pre"});
    const segmentComponent = wrapper.find("div.segment");
    const placeholderComponent = segmentComponent.children().find('pre');
    expect(segmentComponent).toHaveLength(1);
    expect(placeholderComponent).toHaveLength(1);
    expect(placeholderComponent.text()).toEqual('No Content');
  });

});

describe("Segment noPadding",()=>{
  const wrapper = mount(
    <Segment nopadding>Segment</Segment>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have the class of nopadding",()=>{
    const segmentComponent = wrapper.find("div");
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('nopadding')).toEqual(true);
  });
});

describe("Segment Compact",()=>{
  const wrapper = mount(
    <Segment compact>Segment</Segment>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have the class of compact",()=>{
    const segmentComponent = wrapper.find("div");
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('compact')).toEqual(true);
  });
});

describe("Segment Theme",()=>{
  const wrapper = mount(
    <Segment theme="prime">Segment</Segment>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have the class of prime",()=>{
    const segmentComponent = wrapper.find("div");
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('prime')).toEqual(true);
  });
});

describe("Segment Inverted",()=>{
  const wrapper = mount(
    <Segment inverted theme="prime">Segment</Segment>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have the class of inverted",()=>{
    const segmentComponent = wrapper.find("div");
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('inverted')).toEqual(true);
  });
});

describe("Segment Ordinality",()=>{
  const wrapper = mount(
    <Segment>
      <Segment ordinality="primary">Primary</Segment>
      <Segment ordinality="secondary">Secondary</Segment>
      <Segment ordinality="tertiary">Tertiary</Segment>
    </Segment>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have the class of primary",()=>{
    const segmentComponent = wrapper.find("div.primary");
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('primary')).toEqual(true);
    expect(segmentComponent.text()).toEqual('Primary');
  });

  it("should have the class of secondary",()=>{
    const segmentComponent = wrapper.find("div.secondary");
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('secondary')).toEqual(true);
    expect(segmentComponent.text()).toEqual('Secondary');
  });

  it("should have the class of tertiary",()=>{
    const segmentComponent = wrapper.find("div.tertiary");
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('tertiary')).toEqual(true);
    expect(segmentComponent.text()).toEqual('Tertiary');
  });
});

describe("Segment Floats",()=>{
  const wrapper = shallow(
    <Segment float="right">Float</Segment>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have the classes of floated and right",()=>{
    const segmentComponent = wrapper.find("div");
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('floated')).toEqual(true);
    expect(segmentComponent.hasClass('right')).toEqual(true);
    expect(segmentComponent.text()).toEqual('Float');
  });

  it("should have the max-width of 50%",()=>{
    expect(wrapper.prop('style')).toHaveProperty('maxWidth', '50%');
  });

  it("should have the classes of floated and left",()=>{
    wrapper.setProps({float: "left"});
    const segmentComponent = wrapper.find("div");
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('floated')).toEqual(true);
    expect(segmentComponent.hasClass('left')).toEqual(true);
    expect(segmentComponent.text()).toEqual('Float');
  });

  it("should have the max-width of 50%",()=>{
    expect(wrapper.prop('style')).toHaveProperty('maxWidth', '50%');
  });
});

describe("Segment Text Alignment",()=>{
  const wrapper = shallow(
    <Segment textAlign="left">Text Alignment</Segment>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have the classes of left and aligned",()=>{
    const segmentComponent = wrapper.find("div");
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('aligned')).toEqual(true);
    expect(segmentComponent.hasClass('left')).toEqual(true);
    expect(segmentComponent.text()).toEqual('Text Alignment');
  });

  it("should have the classes of center and aligned",()=>{
    wrapper.setProps({textAlign: "center"});
    const segmentComponent = wrapper.find("div");
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('aligned')).toEqual(true);
    expect(segmentComponent.hasClass('center')).toEqual(true);
    expect(segmentComponent.text()).toEqual('Text Alignment');
  });

  it("should have the classes of right and aligned",()=>{
    wrapper.setProps({textAlign: "right"});
    const segmentComponent = wrapper.find("div");
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('aligned')).toEqual(true);
    expect(segmentComponent.hasClass('right')).toEqual(true);
    expect(segmentComponent.text()).toEqual('Text Alignment');
  });

});

describe("Padding Segment",()=>{
  const wrapper = shallow(
    <Padding>Padding</Padding>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have the class of padding",()=>{
    const segmentComponent = wrapper.find("div");
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('padding')).toEqual(true);
    expect(segmentComponent.text()).toEqual('Padding');
  });
});

describe("Basic Segment",()=>{
  const wrapper = mount(
    <BasicSegment>Basic Segment</BasicSegment>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have the class of padding",()=>{
    const segmentComponent = wrapper.find("div");
    expect(segmentComponent).toHaveLength(1);
    expect(segmentComponent.hasClass('basic')).toEqual(true);
    expect(segmentComponent.text()).toEqual('Basic Segment');
  });
});
