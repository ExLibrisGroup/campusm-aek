import "./base.aekcss";
import "./form.aekcss";
import "./icon.aekcss";

import {find,isPlainObject,isNumber,isArray} from "lodash";

import React from "react";
import pickHtmlProps from "../utils/pick-html-props";
import PropTypes from "../utils/prop-types-extra";

function normaliseOptions(options) {

  if (!options) { options = []; }

  return options.map(function(option) {

    if (isPlainObject(option)) {
      return option;
    }
    else if (isArray(option)) {
      return {
        value: option.length > 1 && option[1],
        label: option[0]
      };
    }

    return {
      value: option,
      label: option
    };

  });
}

function optionsToElements(options) {
  return normaliseOptions(options).map(function(option,index) {
    if (option.optgroup) {
      return (
        <optgroup label={option.optgroup} disabled={option.disabled} key={`optgroup_${index}`}>
          { optionsToElements(option.options) }
        </optgroup>
      );
    }
    return <option value={option.value} key={`option_${index}`}>{option.label}</option>;
  });
}

function flattenOptions(options) {
  var arr = [];
  normaliseOptions(options).forEach((option)=>{
    if (option.optgroup) {
      arr = arr.concat(flattenOptions(option.options));
    }
    else {
      arr.push(option);
    }
  });
  return arr;
}

export default class Select extends React.Component {

  onChange = (e)=>{
    if (this.props.onChange) {

      var select = e.target;

      if (select && isNumber(select.selectedIndex)) {

        var options = flattenOptions(this.props.options);

        var value = options[select.selectedIndex - (select.options.length - options.length)].value;

        this.props.onChange(e,select.name,value);

      }

    }

  }

  render() {

    var props = this.props;

    var content = optionsToElements(props.options);

    if (this.props.placeholder) {
      var matchedOption = find(flattenOptions(props.options),function(option) {
        return option.value === props.value;
      });
      if (!matchedOption) {
        content = [<option value={this.props.placeholder} key="placeholder">{this.props.placeholder}</option>].concat(content);
      }

    }

    return (
      <select {...pickHtmlProps(this.props)} onChange={this.onChange}>{content}</select>
    );
  }
}

Select.propTypes = {
  onChange: PropTypes.func,
  options: PropTypes.oneOfType([PropTypes.array,PropTypes.object]),
  placeholder: PropTypes.string,
};
