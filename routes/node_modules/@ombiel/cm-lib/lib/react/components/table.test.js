import React from 'react';
import {mount} from "enzyme";
import {Table,TableBody,TableCell,TableHeader,TableHeaderCell,TableLabelCell,TableRow,TableSegment} from "./table";


describe("Basic Table test",()=>{
  const wrapper = mount(
    <Table>
      <TableBody>
        <TableRow>
          <TableCell>1</TableCell>
          <TableCell>2</TableCell>
          <TableCell>3</TableCell>
        </TableRow>
        <TableRow>
          <TableCell>5</TableCell>
          <TableCell>6</TableCell>
          <TableCell>7</TableCell>
        </TableRow>
      </TableBody>
    </Table>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a table with the classes of ui,table,unstackable",()=>{
    const tableComponent = wrapper.find("table");
    expect(tableComponent).toHaveLength(1);
    expect(tableComponent.hasClass('ui')).toEqual(true);
    expect(tableComponent.hasClass('table')).toEqual(true);
    expect(tableComponent.hasClass('unstackable')).toEqual(true);
  });

  it("should have 2 TR's",()=>{
    const tableComponent = wrapper.find("table");
    const trComponent = tableComponent.find("tr");
    expect(trComponent).toHaveLength(2);
  });

  it("should have 6 TD's",()=>{
    const tableComponent = wrapper.find("table");
    const tdComponent = tableComponent.find("td");
    expect(tdComponent).toHaveLength(6);
  });
});

describe("Basic Table with array of data",()=>{
  const data = [[1,2,3],[4,5,6]];
  const wrapper = mount(
    <Table data={data} />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a table with the classes of ui,table,unstackable",()=>{
    const tableComponent = wrapper.find("table");
    expect(tableComponent).toHaveLength(1);
    expect(tableComponent.hasClass('ui')).toEqual(true);
    expect(tableComponent.hasClass('table')).toEqual(true);
    expect(tableComponent.hasClass('unstackable')).toEqual(true);
  });

  it("should have 2 TR's",()=>{
    const tableComponent = wrapper.find("table");
    const trComponent = tableComponent.find("tr");
    expect(trComponent).toHaveLength(2);
  });

  it("should have 6 TD's",()=>{
    const tableComponent = wrapper.find("table");
    const tdComponent = tableComponent.find("td");
    expect(tdComponent).toHaveLength(6);
  });
});

describe("Basic Table with table headers",()=>{
  const data = {
    Row1: "Row One",
    Row2: "Row Two",
    Row3: "Row Three"
  };

  const wrapper = mount(
    <Table data={data} />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a table with the classes of ui,table,unstackable",()=>{
    const tableComponent = wrapper.find("table");
    expect(tableComponent).toHaveLength(1);
    expect(tableComponent.hasClass('ui')).toEqual(true);
    expect(tableComponent.hasClass('table')).toEqual(true);
    expect(tableComponent.hasClass('unstackable')).toEqual(true);
  });

  it("should have 2 TR's",()=>{
    const tableComponent = wrapper.find("table");
    const trComponent = tableComponent.find("tr");
    expect(trComponent).toHaveLength(3);
  });

  it("should have 3 TH's",()=>{
    const tableComponent = wrapper.find("table");
    const trComponent = tableComponent.find("th");
    expect(trComponent).toHaveLength(3);
  });

  it("should have 3 TD's",()=>{
    const tableComponent = wrapper.find("table");
    const tdComponent = tableComponent.find("td");
    expect(tdComponent).toHaveLength(3);
  });
});

describe("Basic Table with table headers and column names",()=>{
  const wrapper = mount(
    <Table>
      <TableHeader>
        <TableRow>
          <TableHeaderCell></TableHeaderCell>
          <TableHeaderCell>Column 1</TableHeaderCell>
          <TableHeaderCell>Column 2</TableHeaderCell>
          <TableHeaderCell>Column 3</TableHeaderCell>
        </TableRow>
      </TableHeader>
      <TableBody>
        <TableRow>
          <TableLabelCell>Row 1</TableLabelCell>
          <TableCell>One</TableCell>
          <TableCell>Two</TableCell>
          <TableCell>Three</TableCell>
        </TableRow>
        <TableRow>
          <TableLabelCell>Row 2</TableLabelCell>
          <TableCell>One</TableCell>
          <TableCell>Two</TableCell>
          <TableCell>Three</TableCell>
        </TableRow>
      </TableBody>
    </Table>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a table with the classes of ui,table,unstackable",()=>{
    const tableComponent = wrapper.find("table");
    expect(tableComponent).toHaveLength(1);
    expect(tableComponent.hasClass('ui')).toEqual(true);
    expect(tableComponent.hasClass('table')).toEqual(true);
    expect(tableComponent.hasClass('unstackable')).toEqual(true);
  });

  it("should have a thead",()=>{
    const tableComponent = wrapper.find("table");
    const tableHeadComponent = tableComponent.find("thead");
    const tableHeadTHComponent = tableHeadComponent.find("th");
    expect(tableHeadTHComponent).toHaveLength(4);
  });

  it("should have a the first TH with no text",()=>{
    const tableComponent = wrapper.find("table");
    const tableHeadComponent = tableComponent.find("thead");
    const tableHeadTHComponent = tableHeadComponent.find("th").first();
    expect(tableHeadTHComponent.text()).toEqual('');
  });

  it("should have a the Second TH with no text",()=>{
    const tableComponent = wrapper.find("table");
    const tableHeadComponent = tableComponent.find("thead");
    const tableHeadTHComponent = tableHeadComponent.find("th").at(1);
    expect(tableHeadTHComponent.text()).toEqual('Column 1');
  });

  it("should have a the Third TH with Column 2 as Text",()=>{
    const tableComponent = wrapper.find("table");
    const tableHeadComponent = tableComponent.find("thead");
    const tableHeadTHComponent = tableHeadComponent.find("th").at(2);
    expect(tableHeadTHComponent.text()).toEqual('Column 2');
  });

  it("should have a the Forth TH with Column 3 as Text",()=>{
    const tableComponent = wrapper.find("table");
    const tableHeadComponent = tableComponent.find("thead");
    const tableHeadTHComponent = tableHeadComponent.find("th").at(3);
    expect(tableHeadTHComponent.text()).toEqual('Column 3');
  });

  it("should have a tbody",()=>{
    const tableComponent = wrapper.find("table");
    const tableBodyComponent = tableComponent.find("tbody");
    const tableBodyTRComponent = tableBodyComponent.find("tr");
    expect(tableBodyTRComponent).toHaveLength(2);
  });

  it("should have a first row with a 1 TH and 3 TD's",()=>{
    const tableComponent = wrapper.find("table");
    const tableBodyComponent = tableComponent.find("tbody");
    const tableBodyTRComponent = tableBodyComponent.find("tr").first();
    const tableBodyTHComponent = tableBodyTRComponent.find("th");
    const tableBodyTDComponent = tableBodyTRComponent.find("td");
    expect(tableBodyTHComponent).toHaveLength(1);
    expect(tableBodyTHComponent.text()).toEqual('Row 1');
    expect(tableBodyTDComponent).toHaveLength(3);
  });

  it("should have a second row with a 1 TH and 3 TD's",()=>{
    const tableComponent = wrapper.find("table");
    const tableBodyComponent = tableComponent.find("tbody");
    const tableBodyTRComponent = tableBodyComponent.find("tr").at(1);
    const tableBodyTHComponent = tableBodyTRComponent.find("th");
    const tableBodyTDComponent = tableBodyTRComponent.find("td");
    expect(tableBodyTHComponent).toHaveLength(1);
    expect(tableBodyTHComponent.text()).toEqual('Row 2');
    expect(tableBodyTDComponent).toHaveLength(3);
  });

});

describe("Table Variations - Celled",()=>{
  const wrapper = mount(
    <Table celled>
      <TableBody>
        <TableRow>
          <TableCell>1</TableCell>
          <TableCell>2</TableCell>
          <TableCell>3</TableCell>
        </TableRow>
      </TableBody>
    </Table>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a table with the classes of ui,table,unstackable,celled",()=>{
    const tableComponent = wrapper.find("table");
    expect(tableComponent).toHaveLength(1);
    expect(tableComponent.hasClass('ui')).toEqual(true);
    expect(tableComponent.hasClass('table')).toEqual(true);
    expect(tableComponent.hasClass('unstackable')).toEqual(true);
    expect(tableComponent.hasClass('celled')).toEqual(true);
  });
});

describe("Table Variations - Basic",()=>{
  const wrapper = mount(
    <Table basic>
      <TableBody>
        <TableRow>
          <TableCell>1</TableCell>
          <TableCell>2</TableCell>
          <TableCell>3</TableCell>
        </TableRow>
      </TableBody>
    </Table>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a table with the classes of ui,table,unstackable,basic",()=>{
    const tableComponent = wrapper.find("table");
    expect(tableComponent).toHaveLength(1);
    expect(tableComponent.hasClass('ui')).toEqual(true);
    expect(tableComponent.hasClass('table')).toEqual(true);
    expect(tableComponent.hasClass('unstackable')).toEqual(true);
    expect(tableComponent.hasClass('basic')).toEqual(true);
  });
});

describe("Table Variations - Theme",()=>{
  const wrapper = mount(
    <Table theme="alt">
      <TableBody>
        <TableRow>
          <TableCell>1</TableCell>
          <TableCell>2</TableCell>
          <TableCell>3</TableCell>
        </TableRow>
      </TableBody>
    </Table>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a table with the classes of ui,table,unstackable,alt",()=>{
    const tableComponent = wrapper.find("table");
    expect(tableComponent).toHaveLength(1);
    expect(tableComponent.hasClass('ui')).toEqual(true);
    expect(tableComponent.hasClass('table')).toEqual(true);
    expect(tableComponent.hasClass('unstackable')).toEqual(true);
    expect(tableComponent.hasClass('alt')).toEqual(true);
  });
});

describe("Table Variations - Inverted",()=>{
  const wrapper = mount(
    <Table inverted>
      <TableBody>
        <TableRow>
          <TableCell>1</TableCell>
          <TableCell>2</TableCell>
          <TableCell>3</TableCell>
        </TableRow>
      </TableBody>
    </Table>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a table with the classes of ui,table,unstackable,inverted",()=>{
    const tableComponent = wrapper.find("table");
    expect(tableComponent).toHaveLength(1);
    expect(tableComponent.hasClass('ui')).toEqual(true);
    expect(tableComponent.hasClass('table')).toEqual(true);
    expect(tableComponent.hasClass('unstackable')).toEqual(true);
    expect(tableComponent.hasClass('inverted')).toEqual(true);
  });
});

describe("Table Variations - Padded",()=>{
  const wrapper = mount(
    <Table padded>
      <TableBody>
        <TableRow>
          <TableCell>1</TableCell>
          <TableCell>2</TableCell>
          <TableCell>3</TableCell>
        </TableRow>
      </TableBody>
    </Table>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a table with the classes of ui,table,unstackable,padded",()=>{
    const tableComponent = wrapper.find("table");
    expect(tableComponent).toHaveLength(1);
    expect(tableComponent.hasClass('ui')).toEqual(true);
    expect(tableComponent.hasClass('table')).toEqual(true);
    expect(tableComponent.hasClass('unstackable')).toEqual(true);
    expect(tableComponent.hasClass('padded')).toEqual(true);
  });
});

describe("Table Variations - Compact",()=>{
  const wrapper = mount(
    <Table compact>
      <TableBody>
        <TableRow>
          <TableCell>1</TableCell>
          <TableCell>2</TableCell>
          <TableCell>3</TableCell>
        </TableRow>
      </TableBody>
    </Table>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a table with the classes of ui,table,unstackable,compact",()=>{
    const tableComponent = wrapper.find("table");
    expect(tableComponent).toHaveLength(1);
    expect(tableComponent.hasClass('ui')).toEqual(true);
    expect(tableComponent.hasClass('table')).toEqual(true);
    expect(tableComponent.hasClass('unstackable')).toEqual(true);
    expect(tableComponent.hasClass('compact')).toEqual(true);
  });
});

describe("Table Variations - Small",()=>{
  const wrapper = mount(
    <Table small>
      <TableBody>
        <TableRow>
          <TableCell>1</TableCell>
          <TableCell>2</TableCell>
          <TableCell>3</TableCell>
        </TableRow>
      </TableBody>
    </Table>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a table with the classes of ui,table,unstackable,small",()=>{
    const tableComponent = wrapper.find("table");
    expect(tableComponent).toHaveLength(1);
    expect(tableComponent.hasClass('ui')).toEqual(true);
    expect(tableComponent.hasClass('table')).toEqual(true);
    expect(tableComponent.hasClass('unstackable')).toEqual(true);
    expect(tableComponent.hasClass('small')).toEqual(true);
  });

});

describe("Table Variations - Large",()=>{
  const wrapper = mount(
    <Table large>
      <TableBody>
        <TableRow>
          <TableCell>1</TableCell>
          <TableCell>2</TableCell>
          <TableCell>3</TableCell>
        </TableRow>
      </TableBody>
    </Table>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a table with the classes of ui,table,unstackable,large",()=>{
    const tableComponent = wrapper.find("table");
    expect(tableComponent).toHaveLength(1);
    expect(tableComponent.hasClass('ui')).toEqual(true);
    expect(tableComponent.hasClass('table')).toEqual(true);
    expect(tableComponent.hasClass('unstackable')).toEqual(true);
    expect(tableComponent.hasClass('large')).toEqual(true);
  });
});


describe("Table Stackable",()=>{
  const data = {
    Row1: "Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus",
    Row2: "Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor",
    Row3: "Praesent commodo cursus magna, vel scelerisque nisl consectetur et"
  };
  const wrapper = mount(
    <Table stackable data={data} />
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a table with the classes of ui,table but not unstackable",()=>{
    const tableComponent = wrapper.find("table");
    expect(tableComponent).toHaveLength(1);
    expect(tableComponent.hasClass('ui')).toEqual(true);
    expect(tableComponent.hasClass('table')).toEqual(true);
    expect(tableComponent.hasClass('unstackable')).toEqual(false);
  });

  it("should have 3 TR's",()=>{
    const tableComponent = wrapper.find("table");
    const trComponent = tableComponent.find("tr");
    expect(trComponent).toHaveLength(3);
  });

  it("should have TH with class of collasping",()=>{
    const tableComponent = wrapper.find("table");
    const thComponent = tableComponent.find("th").first();
    expect(thComponent.text()).toEqual('Row1');
    expect(thComponent.hasClass('collapsing')).toEqual(true);
  });

  it("should have TH with class of collasping",()=>{
    const tableComponent = wrapper.find("table");
    const thComponent = tableComponent.find("th").at(1);
    expect(thComponent.text()).toEqual('Row2');
    expect(thComponent.hasClass('collapsing')).toEqual(true);
  });

  it("should have TH with class of collasping",()=>{
    const tableComponent = wrapper.find("table");
    const thComponent = tableComponent.find("th").at(2);
    expect(thComponent.text()).toEqual('Row3');
    expect(thComponent.hasClass('collapsing')).toEqual(true);
  });


});

describe("Table Segment",()=>{
  const wrapper = mount(
    <TableSegment>
      <Table celled>
        <TableBody>
          <TableRow>
            <TableCell>1</TableCell>
            <TableCell>2</TableCell>
            <TableCell>3</TableCell>
          </TableRow>
        </TableBody>
      </Table>
    </TableSegment>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have TableSegment a div with the classes of ui, segment, table-segment",()=>{
    const Tablesegment = wrapper.find("div");
    expect(Tablesegment).toHaveLength(1);
    expect(Tablesegment.hasClass('ui')).toEqual(true);
    expect(Tablesegment.hasClass('segment')).toEqual(true);
    expect(Tablesegment.hasClass('table-segment')).toEqual(true);
    expect(Tablesegment.prop('style')).toHaveProperty('width', '100%');
    expect(Tablesegment.prop('style')).toHaveProperty('padding', 0);
    expect(Tablesegment.prop('style')).toHaveProperty('overflow', 'auto');
  });

});

describe("Cell Collapsing",()=>{
  const wrapper = mount(
    <Table celled>
      <TableBody>
        <TableRow>
          <TableCell collapsing>Collapsed</TableCell>
          <TableCell>1</TableCell>
          <TableCell>2</TableCell>
        </TableRow>
      </TableBody>
    </Table>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a table with the classes of ui,table,unstackable,celled",()=>{
    const tableComponent = wrapper.find("table");
    expect(tableComponent).toHaveLength(1);
    expect(tableComponent.hasClass('ui')).toEqual(true);
    expect(tableComponent.hasClass('table')).toEqual(true);
    expect(tableComponent.hasClass('celled')).toEqual(true);
    expect(tableComponent.hasClass('unstackable')).toEqual(true);
  });

  it("should have 1 TR's",()=>{
    const tableComponent = wrapper.find("table");
    const trComponent = tableComponent.find("tr");
    expect(trComponent).toHaveLength(1);
  });

  it("should have the first td with the class and text of positive",()=>{
    const tableComponent = wrapper.find("table");
    const tdComponent = tableComponent.find("td").first();
    expect(tdComponent.hasClass('collapsing')).toEqual(true);
    expect(tdComponent.text()).toEqual('Collapsed');
  });

});

describe("Cell Alignment part one",()=>{
  const wrapper = mount(
    <Table celled>
      <TableBody>
        <TableRow>
          <TableCell align="left">Left</TableCell>
          <TableCell align="center">Center</TableCell>
          <TableCell align="right">Right</TableCell>
        </TableRow>
      </TableBody>
    </Table>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a table with the classes of ui,table,unstackable,celled",()=>{
    const tableComponent = wrapper.find("table");
    expect(tableComponent).toHaveLength(1);
    expect(tableComponent.hasClass('ui')).toEqual(true);
    expect(tableComponent.hasClass('table')).toEqual(true);
    expect(tableComponent.hasClass('celled')).toEqual(true);
    expect(tableComponent.hasClass('unstackable')).toEqual(true);
  });

  it("should have 1 TR's",()=>{
    const tableComponent = wrapper.find("table");
    const trComponent = tableComponent.find("tr");
    expect(trComponent).toHaveLength(1);
  });

  it("should have the first td with the text-align and text of left",()=>{
    const tableComponent = wrapper.find("table");
    const tdComponent = tableComponent.find("td").first();
    expect(tdComponent.text()).toEqual('Left');
    expect(tdComponent.prop('style')).toHaveProperty('textAlign', 'left');
  });

  it("should have the second td with the text-align and text of center",()=>{
    const tableComponent = wrapper.find("table");
    const tdComponent = tableComponent.find("td").at(1);
    expect(tdComponent.text()).toEqual('Center');
    expect(tdComponent.prop('style')).toHaveProperty('textAlign', 'center');
  });

  it("should have the third td with the text-align and text of right",()=>{
    const tableComponent = wrapper.find("table");
    const tdComponent = tableComponent.find("td").at(2);
    expect(tdComponent.text()).toEqual('Right');
    expect(tdComponent.prop('style')).toHaveProperty('textAlign', 'right');
  });


});

describe("Cell Alignment part two",()=>{
  const wrapper = mount(
    <Table celled>
      <TableBody>
        <TableRow>
          <TableCell align="top">Top</TableCell>
          <TableCell align="middle">Middle</TableCell>
          <TableCell align="bottom">Bottom</TableCell>
        </TableRow>
      </TableBody>
    </Table>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a table with the classes of ui,table,unstackable,celled",()=>{
    const tableComponent = wrapper.find("table");
    expect(tableComponent).toHaveLength(1);
    expect(tableComponent.hasClass('ui')).toEqual(true);
    expect(tableComponent.hasClass('table')).toEqual(true);
    expect(tableComponent.hasClass('celled')).toEqual(true);
    expect(tableComponent.hasClass('unstackable')).toEqual(true);
  });

  it("should have 1 TR's",()=>{
    const tableComponent = wrapper.find("table");
    const trComponent = tableComponent.find("tr");
    expect(trComponent).toHaveLength(1);
  });

  it("should have the first td with the vertical-align and text of top",()=>{
    const tableComponent = wrapper.find("table");
    const tdComponent = tableComponent.find("td").first();
    expect(tdComponent.text()).toEqual('Top');
    expect(tdComponent.prop('style')).toHaveProperty('verticalAlign', 'top');
  });

  it("should have the second td with the vertical-align and text of center",()=>{
    const tableComponent = wrapper.find("table");
    const tdComponent = tableComponent.find("td").at(1);
    expect(tdComponent.text()).toEqual('Middle');
    expect(tdComponent.prop('style')).toHaveProperty('verticalAlign', 'middle');
  });

  it("should have the third td with the vertical-align and text of bottom",()=>{
    const tableComponent = wrapper.find("table");
    const tdComponent = tableComponent.find("td").at(2);
    expect(tdComponent.text()).toEqual('Bottom');
    expect(tdComponent.prop('style')).toHaveProperty('verticalAlign', 'bottom');
  });


});

describe("Cell Alignment part three",()=>{
  const wrapper = mount(
    <Table celled>
      <TableBody>
        <TableRow>
          <TableCell align="top left">Top Left</TableCell>
          <TableCell align="top center">Top Center</TableCell>
          <TableCell align="top right">Top Right</TableCell>
        </TableRow>
        <TableRow>
          <TableCell align="middle left">Middle Left</TableCell>
          <TableCell align="middle center">Middle Center</TableCell>
          <TableCell align="middle right">Middle Right</TableCell>
        </TableRow>
        <TableRow>
          <TableCell align="bottom left">Bottom Left</TableCell>
          <TableCell align="bottom center">Bottom Center</TableCell>
          <TableCell align="bottom right">Bottom Right</TableCell>
        </TableRow>
      </TableBody>
    </Table>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a table with the classes of ui,table,unstackable,celled",()=>{
    const tableComponent = wrapper.find("table");
    expect(tableComponent).toHaveLength(1);
    expect(tableComponent.hasClass('ui')).toEqual(true);
    expect(tableComponent.hasClass('table')).toEqual(true);
    expect(tableComponent.hasClass('celled')).toEqual(true);
    expect(tableComponent.hasClass('unstackable')).toEqual(true);
  });

  it("should have 3 TR's",()=>{
    const tableComponent = wrapper.find("table");
    const trComponent = tableComponent.find("tr");
    expect(trComponent).toHaveLength(3);
  });

  it("should have the first td with the vertical-align of top, text-align of left and text of top left",()=>{
    const tableComponent = wrapper.find("table");
    const trComponent = tableComponent.find("tr").first();
    const tdComponent = trComponent.find("td").first();
    expect(tdComponent.text()).toEqual('Top Left');
    expect(tdComponent.prop('style')).toHaveProperty('verticalAlign', 'top');
    expect(tdComponent.prop('style')).toHaveProperty('textAlign', 'left');
  });

  it("should have the second td with the vertical-align of top, text-align of center and text of top center",()=>{
    const tableComponent = wrapper.find("table");
    const trComponent = tableComponent.find("tr").first();
    const tdComponent = trComponent.find("td").at(1);
    expect(tdComponent.text()).toEqual('Top Center');
    expect(tdComponent.prop('style')).toHaveProperty('verticalAlign', 'top');
    expect(tdComponent.prop('style')).toHaveProperty('textAlign', 'center');
  });

  it("should have the second td with the vertical-align of top, text-align of right and text of top right",()=>{
    const tableComponent = wrapper.find("table");
    const trComponent = tableComponent.find("tr").first();
    const tdComponent = trComponent.find("td").at(2);
    expect(tdComponent.text()).toEqual('Top Right');
    expect(tdComponent.prop('style')).toHaveProperty('verticalAlign', 'top');
    expect(tdComponent.prop('style')).toHaveProperty('textAlign', 'right');
  });

  it("should have the first td with the vertical-align of middle, text-align of left and text of middle left",()=>{
    const tableComponent = wrapper.find("table");
    const trComponent = tableComponent.find("tr").at(1);
    const tdComponent = trComponent.find("td").first();
    expect(tdComponent.text()).toEqual('Middle Left');
    expect(tdComponent.prop('style')).toHaveProperty('verticalAlign', 'middle');
    expect(tdComponent.prop('style')).toHaveProperty('textAlign', 'left');
  });

  it("should have the second td with the vertical-align of middle, text-align of center and text of middle center",()=>{
    const tableComponent = wrapper.find("table");
    const trComponent = tableComponent.find("tr").at(1);
    const tdComponent = trComponent.find("td").at(1);
    expect(tdComponent.text()).toEqual('Middle Center');
    expect(tdComponent.prop('style')).toHaveProperty('verticalAlign', 'middle');
    expect(tdComponent.prop('style')).toHaveProperty('textAlign', 'center');
  });

  it("should have the second td with the vertical-align of middle, text-align of right and text of middle right",()=>{
    const tableComponent = wrapper.find("table");
    const trComponent = tableComponent.find("tr").at(1);
    const tdComponent = trComponent.find("td").at(2);
    expect(tdComponent.text()).toEqual('Middle Right');
    expect(tdComponent.prop('style')).toHaveProperty('verticalAlign', 'middle');
    expect(tdComponent.prop('style')).toHaveProperty('textAlign', 'right');
  });

  it("should have the first td with the vertical-align of bottom, text-align of left and text of bottom left",()=>{
    const tableComponent = wrapper.find("table");
    const trComponent = tableComponent.find("tr").at(2);
    const tdComponent = trComponent.find("td").first();
    expect(tdComponent.text()).toEqual('Bottom Left');
    expect(tdComponent.prop('style')).toHaveProperty('verticalAlign', 'bottom');
    expect(tdComponent.prop('style')).toHaveProperty('textAlign', 'left');
  });

  it("should have the second td with the vertical-align of bottom, text-align of center and text of bottom center",()=>{
    const tableComponent = wrapper.find("table");
    const trComponent = tableComponent.find("tr").at(2);
    const tdComponent = trComponent.find("td").at(1);
    expect(tdComponent.text()).toEqual('Bottom Center');
    expect(tdComponent.prop('style')).toHaveProperty('verticalAlign', 'bottom');
    expect(tdComponent.prop('style')).toHaveProperty('textAlign', 'center');
  });

  it("should have the second td with the vertical-align of bottom, text-align of right and text of bottom right",()=>{
    const tableComponent = wrapper.find("table");
    const trComponent = tableComponent.find("tr").at(2);
    const tdComponent = trComponent.find("td").at(2);
    expect(tdComponent.text()).toEqual('Bottom Right');
    expect(tdComponent.prop('style')).toHaveProperty('verticalAlign', 'bottom');
    expect(tdComponent.prop('style')).toHaveProperty('textAlign', 'right');
  });


});


describe("Cell states",()=>{
  const wrapper = mount(
    <Table celled>
      <TableBody>
        <TableRow>
          <TableCell positive>positive</TableCell>
          <TableCell negative>negative</TableCell>
          <TableCell warning>warning</TableCell>
        </TableRow>
        <TableRow>
          <TableCell error>error</TableCell>
          <TableCell active>active</TableCell>
          <TableCell disabled>disabled</TableCell>
        </TableRow>
      </TableBody>
    </Table>
  );

  it("should match snapshot",()=>{
    expect(wrapper).toMatchSnapshot();
  });

  it("should have a table with the classes of ui,table,unstackable,celled",()=>{
    const tableComponent = wrapper.find("table");
    expect(tableComponent).toHaveLength(1);
    expect(tableComponent.hasClass('ui')).toEqual(true);
    expect(tableComponent.hasClass('table')).toEqual(true);
    expect(tableComponent.hasClass('celled')).toEqual(true);
    expect(tableComponent.hasClass('unstackable')).toEqual(true);
  });

  it("should have 2 TR's",()=>{
    const tableComponent = wrapper.find("table");
    const trComponent = tableComponent.find("tr");
    expect(trComponent).toHaveLength(2);
  });

  it("should have the first td with the class and text of positive",()=>{
    const tableComponent = wrapper.find("table");
    const tdComponent = tableComponent.find("td").first();
    expect(tdComponent.hasClass('positive')).toEqual(true);
    expect(tdComponent.text()).toEqual('positive');
  });

  it("should have the second td with the class and text of negative",()=>{
    const tableComponent = wrapper.find("table");
    const tdComponent = tableComponent.find("td").at(1);
    expect(tdComponent.hasClass('negative')).toEqual(true);
    expect(tdComponent.text()).toEqual('negative');
  });

  it("should have the third td with the class and text of warning",()=>{
    const tableComponent = wrapper.find("table");
    const tdComponent = tableComponent.find("td").at(2);
    expect(tdComponent.hasClass('warning')).toEqual(true);
    expect(tdComponent.text()).toEqual('warning');
  });

  it("should have the forth td with the class and text of error",()=>{
    const tableComponent = wrapper.find("table");
    const tdComponent = tableComponent.find("td").at(3);
    expect(tdComponent.hasClass('error')).toEqual(true);
    expect(tdComponent.text()).toEqual('error');
  });

  it("should have the fifth td with the class and text of active",()=>{
    const tableComponent = wrapper.find("table");
    const tdComponent = tableComponent.find("td").at(4);
    expect(tdComponent.hasClass('active')).toEqual(true);
    expect(tdComponent.text()).toEqual('active');
  });

  it("should have the sixth td with the class and text of disabled",()=>{
    const tableComponent = wrapper.find("table");
    const tdComponent = tableComponent.find("td").at(5);
    expect(tdComponent.hasClass('disabled')).toEqual(true);
    expect(tdComponent.text()).toEqual('disabled');
  });
});
