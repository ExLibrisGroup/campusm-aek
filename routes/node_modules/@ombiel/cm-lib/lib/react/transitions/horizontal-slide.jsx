import React from "react";
import ReactDOM from "react-dom";
import PropTypes from "prop-types";
import cloneWithProps from "../utils/clone";
import createTween from "../../tween/create";
import easing from "../../tween/easing";

import {vendorPrefix, hasVendorProperty} from "../../vendor-style";

export default class HorizontalSlideTransition extends React.Component {

  componentWillMount() {
    if (this.props.transitionMode === "in") {
      this.translate = {
        xPerc: this.props.transitionDirection === "back" ? -100 : 100
      };
    }
    else {
      this.translate = {xPerc: 0};
    }

    const transformProperty = vendorPrefix("transform");

    if (hasVendorProperty("perspective")) {
      this.updateTween = function() {
        if (this.domNode) {
          this.domNode.style[transformProperty] = `translate3D(${this.translate.xPerc}%,0,0)`;
        }
      }.bind(this);
    }
    else {
      this.updateTween = function() {
        window.domNode = this.domNode;
        this.domNode.style[transformProperty] = `translateX(${this.translate.xPerc}%)`;
      }.bind(this);
    }
  }

  componentDidMount() {
    this.domNode = ReactDOM.findDOMNode(this);
    this.startTransition(this.props);
  }

  componentWillReceiveProps(props) {
    this.checkState(props);
  }

  componentDidUpdate() {
    window.requestAnimationFrame(this.updateTween);
  }


  startTransition(props) {

    const mode = props.transitionMode;
    const dir = props.transitionDirection;

    const tween = createTween(this.translate);

    if (mode && dir) {

      let xPerc = 0;

      if (mode === "out") { xPerc = (dir === "forward") ? -50 : 50; }

      tween.to({xPerc},props.duration);

      ["easing","delay","onUpdate","onComplete","onStop"].forEach(function(prop) {
        if (props[prop]) {
          tween[prop](props[prop]);
        }
      });

      // need to do this here as well as in render as this is executed before
      // added to prevent flicker due to enabling/disabling webkitOverflowScroll
      if (mode === "out") {
        this.domNode.className += " aek-transition-out";
        this.domNode.setAttribute("aria-hidden","true");
      }

      tween.onUpdate(this.updateTween);

      // set whole page into animation mode
      // this disables webkitOverflowScrolling which causes flickering in iOS
      if (mode !== "out") {
        document.body.setAttribute("data-aek-is-animating","true");
        tween.once("stop complete",function() {
          // re-applying webkitOverflowScrolling
          document.body.setAttribute("data-aek-is-animating","false");
        });
      }

      this.updateTween();
      tween.start();

    }

    this.updateTween();

  }

  checkState(props) {
    if ((props.transitionMode !== this.props.transitionMode) || (props.transitionDirection !== this.props.transitionDirection)) {
      this.startTransition(props);
    }
  }



  render() {
    const newProps = {};
    if (this.props.transitionMode === "out") {
      newProps.className = "aek-transition-out";
      newProps["aria-hidden"] = true;
    }
    // clone children to ensure forceUpdates are honoured
    return cloneWithProps(this.props.children,newProps);
  }

}

HorizontalSlideTransition.propTypes = {
  transitionMode: PropTypes.string,
  transitionDirection: PropTypes.string,
  children: PropTypes.any,
};

HorizontalSlideTransition.defaultProps = {
  duration: 400,
  easing: easing.Quadratic.InOut
};
