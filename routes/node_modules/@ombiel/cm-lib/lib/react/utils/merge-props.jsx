import {extend} from "lodash";
var cx = require("classnames");

function className2classSet(className) {
  var classSet = {};
  className.trim().split(" ").forEach(function(cl) {
    if (cl) { classSet[cl] = true; }
  });
  return classSet;
}

export default function mergeProps(props1,props2,...args) {

  var out;

  if (!props1) { props1 = {}; }
  if (!props2) { props2 = {}; }


  if (props1.classSet) {
    const classNameSet = props1.className ? className2classSet(props1.className) : {};
    props1.className = cx(extend(classNameSet,props1.classSet));
  }

  var merged = {className: props1.className};

  if (props2.className) {
    merged.className += ` ${props2.className}`;
  }

  if (props2.classSet) {
    const mergedClassName = merged.className || "";
    const classSet = className2classSet(mergedClassName);

    merged.className = cx(extend(classSet,props2.classSet));

    delete props2.classSet;

  }

  if (props1.style && props2.style) {
    merged.style = extend({},props1.style,props2.style);
  }

  out = extend({},props1,props2,merged);

  delete out.classSet;

  if (args.length) {
    return mergeProps(out,...args);
  }

  return out;

}
