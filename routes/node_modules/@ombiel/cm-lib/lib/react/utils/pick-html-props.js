import {forEach,isArray,get,pickBy} from "lodash";

const attrs = [

  "abbr",
  "accept",
  "acceptCharset",
  "accessKey",
  "action",
  "allowFullScreen",
  "allowTransparency",
  "alt",
  "async",
  "autoCapitalize",
  "autoComplete",
  "autoCorrect",
  "autoFocus",
  "autoPlay",
  "autoSave",
  "cellPadding",
  "cellSpacing",
  "challenge",
  "charset",
  "checked",
  "children",
  "cite",
  "class",
  "className",
  "color",
  "cols",
  "colSpan",
  "command",
  "content",
  "contentEditable",
  "contextMenu",
  "controls",
  "coords",
  "crossOrigin",
  "data",
  "dateTime",
  "default",
  "defer",
  "dir",
  "disabled",
  "download",
  "draggable",
  "dropzone",
  "encType",
  "for",
  "form",
  "formAction",
  "formEncType",
  "formMethod",
  "formNoValidate",
  "formTarget",
  "frameBorder",
  "headers",
  "height",
  "hidden",
  "high",
  "href",
  "hrefLang",
  "htmlFor",
  "httpEquiv",
  "icon",
  "id",
  "inputMode",
  "isMap",
  "itemId",
  "itemID",
  "itemProp",
  "itemRef",
  "itemScope",
  "itemType",
  "key",
  "kind",
  "label",
  "lang",
  "list",
  "loop",
  "manifest",
  "max",
  "maxLength",
  "media",
  "mediaGroup",
  "method",
  "min",
  "minLength",
  "multiple",
  "muted",
  "name",
  "noValidate",
  "open",
  "optimum",
  "pattern",
  "ping",
  "placeholder",
  "poster",
  "preload",
  "radioGroup",
  "readOnly",
  "rel",
  "required",
  "resource",
  "results",
  "role",
  "rows",
  "rowSpan",
  "sandbox",
  "scope",
  "scoped",
  "scrolling",
  "seamless",
  "security",
  "selected",
  "shape",
  "size",
  "sizes",
  "sortable",
  "span",
  "spellCheck",
  "src",
  "srcDoc",
  "srcSet",
  "start",
  "step",
  "style",
  "tabIndex",
  "target",
  "title",
  "translate",
  "type",
  "typeMustMatch",
  "typeof",
  "unselectable",
  "useMap",
  "value",
  "vocab",
  "width",
  "wmode",
  "wrap",

  // special
  "dangerouslySetInnerHTML",
  "ref",

  // handlers:
  'onBlur', 'onChange', 'onClick', 'onContextMenu', 'onCopy',
  'onCut', 'onDoubleClick', 'onDrag', 'onDragEnd', 'onDragEnter',
  'onDragExit', 'onDragLeave', 'onDragOver', 'onDragStart', 'onDrop',
  'onFocus', 'onInput', 'onKeyDown', 'onKeyPress', 'onKeyUp',
  'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseMove',
  'onMouseOut', 'onMouseOver', 'onMouseUp', 'onPaste',
  'onScroll', 'onSubmit', 'onTouchCancel', 'onTouchEnd', 'onTouchMove',
  'onTouchStart', 'onWheel'
];

const attrsO = {};
forEach(attrs,(attr)=>{ attrsO[attr] = true; });


export default function pickHtmlProps(props,extra = {}) {
  if (isArray(extra)) { extra = {include: extra}; }
  const include = get(extra,"include",[]);
  const exclude = get(extra,"exclude",[]);
  return pickBy(props,(val,name)=>{
    if (name.match(/^(data|aria)-/)) { return true; }
    return (attrsO[name] || (include.indexOf(name) > -1)) && (exclude.indexOf(name) === -1);
  });
}
