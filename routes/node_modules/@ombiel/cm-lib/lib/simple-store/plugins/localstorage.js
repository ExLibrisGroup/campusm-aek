import {isArray,isObject,extend,omitBy,mapValues} from "lodash";

import Immutable from "seamless-immutable";

var storagize = (obj)=> {
  if (isArray(obj)) {
    return obj.map(storagize);
  }
  if (isObject(obj)) {
    return omitBy(mapValues(obj,storagize),function(value,key) { return key.indexOf("$$$") === 0; });
  }
  return obj;
};

function serialize(state) {
  return JSON.stringify(storagize(Immutable.asMutable(state)));
}

export default function localStoragePlugin(localStorageKey,opts = {}) {

  opts = extend({serialize,deserialize: JSON.parse},opts);

  return function(store) {

    function log(level,...args) {
      if (store.logger) {
        store.logger[level]("LocalStorage",...args);
      }
      else if (level === "error") {
        console.error(...args); //eslint-disable-line no-console
      }
    }

    if (!localStorageKey) {
      log("error",Error("Error initializing localStoragePlugin - you must provide a unique storage key"));
    }

    else {
      try {
        var stored = localStorage[localStorageKey];
        if (!stored) {
          log("info","empty");
        }
        else {
          stored = opts.deserialize(stored);
          store.state = Immutable.from(stored);
          log("info","retrieved",stored);
        }
      }
      catch (e) {
        log("error","ERROR: unable to retrieve stored data",e);
      }

      store.on("change",(state)=>{
        try {
          localStorage[localStorageKey] = opts.serialize(state);
        }
        catch (e) {
          log("error","ERROR: failed to store data",e);
        }
      });
    }
  };
}
