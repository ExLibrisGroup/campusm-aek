/* globals __aekENV__ */

import {some,isError} from "lodash";

import logger from "../../utils/logger";

export default function loggerPlugin() {

  return function(store) {

    store.logger = logger;

    if (__aekENV__ === "dev") {

      var initializingLogger = logger("INITIALZING",true,{labelStyle: "background-color:#ffffff;border:1px solid #999;font-style:italic;color:#999"});
      var initLogger = logger("INIT",true,{labelStyle: "background-color:#eeeeff;border:1px solid black;font-style:italic;color:black"});
      var stateUpdateLogger = logger("STATE UPDATED",true,{labelStyle: "background-color:#eeffee;border:1px solid black;font-style:italic;color:black"});
      var noChangeLogger = logger("NO CHANGE",true,{labelStyle: "background-color:#ffeeee;border:1px solid black;font-style:italic;color:black"});


      initializingLogger.info(store.state.asMutable({deep: true}));


      store.on("init",(state)=>{
        initLogger.info(state.asMutable({deep: true}));

        store.on("nochange",(/*state*/)=>{
          noChangeLogger.log();
        });

        store.on("change",(newState/*,prevState*/)=>{
          stateUpdateLogger.log(newState.asMutable({deep: true}));
        });

        store.on("dispatch",({group,name,log,payload,error})=>{

          let label = group || "";
          if (label && name) {
            label = `${label}:${name}`;
          }
          else if (name) {
            label = name;
          }

          if (!log) {
            log = [];
            if (payload) {
              log.push(payload);
            }
          }
          if (error) {
            log = log.concat([error]);
          }
          if (some(log,isError)) {
            logger.error(label,...log);
          }
          else {
            logger.log(label,...log);
          }
        });

        store.on("set",(path,val)=>{
          logger.log("SET",path,val);
        });
      });
    }
  };
}
