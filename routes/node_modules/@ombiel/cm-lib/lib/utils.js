
import {
  isArray,
  isObject,
  forEach,
  mergeWith,
  extend,
  merge,
  template,
  isFunction,
  isError,
  isEmpty,
} from "lodash";


// adapted from jQuery

var r20 = /%20/g;
var rbracket = /\[\]$/;
// var getClass = {}.toString;

export function buildParams(prefix, obj, add) {

  if (isArray(obj)) {
    // Serialize array item.
    forEach(obj, function(i, v) {
      if (rbracket.test(prefix)) {
        // Treat each array item as a scalar.
        add(prefix, v);

      }
      else {
        // Item is non-scalar (array or object), encode its numeric index.
        buildParams(
          `${prefix}[${typeof v === "object" ? i : ""}]`,
          v,
          add
        );
      }
    });

  }
  else if (isObject(obj)) {
    // Serialize object item.
    forEach(obj,(v, name)=>{
      buildParams(`${prefix}[${name}]`, v, add);
    });
  }
  else {
    // Serialize scalar item.
    add(prefix, obj);
  }
}


// b: function(fnName,...args) {
//   return function(target) {
//     return utils[fnName].call(utils,target,...args);
//   };
// },

// isFunction: function(obj) {
//   return obj && getClass.call(obj) === '[object Function]';
// },


//customised version of merge
export function fuse(...args) {
  return mergeWith(...args,(tObj,sObj)=>{
    if (isArray(sObj)) {
      return sObj;
    }
    return undefined;
  });
}


//customised version of _.template
export function plate(tmplt,obj,opts) {

  var baseObj = {};

  // attempt to define undecalred vars
  tmplt.replace(/\{\{\{?\s*([a-z0-9_$]+)(\.[a-z0-9_$]+)?\s*\}?\}\}/gi,function(match,propertyName,extra) {
    baseObj[propertyName] = (extra && {}) || baseObj[propertyName] || null;
  });


  obj = extend(baseObj,obj);

  var defaults = {
    // evaluate: /\{\{(.+?)\}\}/g,
    escape: /\{\{\{(.+?)\}\}\}/g,
    interpolate: /\{\{(.+?)\}\}/g
  };

  opts = merge(defaults,opts);

  return template(tmplt,obj,opts);

}


// param serializer adapteed from jQuery
export function param(a,spaceEntity) {
  var s = [];
  var add = function(key, value) {
    // If value is a function, invoke it and return its value
    //value = utils.isFunction( value ) ? value() : ( value == null ? "" : value );
    value = isFunction(value) ? value() : value;
    if (value != null) {
      s[s.length] = `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;
    }
  };

  forEach(a,(v, prefix)=>{
    buildParams(prefix, v, add);
  });

  // Return the resulting serialization
  var out = s.join("&");

  // originally this function replaced "%20" with "+" which is probably the "correct" way
  // "%20" seems to be more universally accepted however and iOS app doesn't like "+"
  // so now default remains "%20" with an optional spaceEntity argument if required
  if (spaceEntity) {
    out = out.replace(r20,spaceEntity);
  }

  return out;
}

export function parseQueryString(str) {
  var obj = {};
  if (str.indexOf("?") > -1) {
    str = str.split("?")[1];
  }
  str.replace(/([^?=&]+)(=([^&]*))/g,function($0,$1,$2,$3) {
    obj[decodeURIComponent($1)] = decodeURIComponent($3);
  });
  return obj;
}


// DOM utils

export function getWindowDimensions() {
  var w = window;
  var d = document;
  var e = d.documentElement;
  var g = d.getElementsByTagName('body')[0];
  var width = w.innerWidth || e.clientWidth || g.clientWidth;
  var height = w.innerHeight || e.clientHeight || g.clientHeight;
  return {width,height};
}

export function outerHeight(el) {
  var style = window.getComputedStyle(el);
  var marginTop = parseFloat(style.marginTop) || 0;
  var marginBottom = parseFloat(style.marginBottom) || 0;
  return marginTop + el.offsetHeight + marginBottom;
}

export function outerWidth(el) {
  var style = window.getComputedStyle(el);
  var marginLeft = parseFloat(style.marginLeft) || 0;
  var marginRight = parseFloat(style.marginRight) || 0;
  return marginLeft + el.offsetWidth + marginRight;
}

// react utils

export function isReactComponent(object) {
  if (!object || !object.type || !object.type.prototype) {
    return false;
  }
  var prototype = object.type.prototype;
  return ('shouldComponentUpdate' in prototype) && ('componentWillReceiveProps' in prototype);
}

// other general utils
export function normaliseError(error) {
  if (isError(error)) { return error; }
  return new Error(error);
}

export function asArray(obj,opts = {}) {
  var out = [];

  if (isArray(obj)) {
    out = obj;
  }
  else if (obj) {
    out = [obj];
  }

  if (!opts.includeEmptyObjects) {
    out = out.filter(function(item) {
      return !isEmpty(item);
    });
  }

  return out;
}

// string utils

export function titleCase(str) {
  if (!str) { return ""; }
  return str.replace(/\w\S*/g, function(txt) { return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase(); });
}

export function validateEmail(email) {
  var re = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  return re.test(email);
}

export function validateTel(tel) {
  var re = /^[0-9+() ]+$/;
  return tel.length > 6 && re.test(tel);
}

export function switchCase(val,cases,defaultVal) {
  const out = cases[val];
  return out === undefined ? defaultVal : out;
}
