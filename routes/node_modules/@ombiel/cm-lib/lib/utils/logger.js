/* globals __aekENV__ */

const consoleMethods = 'assert,clear,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,markTimeline,profile,profiles,profileEnd,show,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn'.split(",");
const loggerMethods = 'stack,batch,enable,disable'.split(",");
var soloLogger = null;

var isEnabled = function(logger) {
  return logger.enabled && (!soloLogger || (soloLogger === logger.loggerName));
};


if ((__aekENV__ === "dev") && (typeof (window.console != null ? window.console.log : undefined) === "function")) {

  consoleMethods.forEach(function(methodName) {
    return console[methodName] != null ? console[methodName] : (console[methodName] = console.log); //eslint-disable-line no-console
  });

  var loggers = {};

  var hslFromLabel = function(str) {
    var sum = Array.prototype.reduce.call(str,(function(prev,curr) { return prev + curr.charCodeAt(0); }),0);
    var mult = Array.prototype.reduce.call(str,(function(prev,curr) { return prev * curr.charCodeAt(0); }),1);
    var hue = (mult ** 4) % 360;
    var sat = 50 + (mult % 50);
    var light = 20 + (sum % 30);
    return `hsl(${hue},${sat}%,${light}%)`;
  };

  var isFirefox = "mozApps" in navigator;

  module.exports = function(name,...arg) {

    if (Array.from(arg).includes("solo")) {
      soloLogger = name;
    }
    else if (soloLogger === name) {
      soloLogger = null;
    }

    var logger;

    if (loggers[name]) {
      logger = loggers[name];
      logger.warn(`Logger name '${name}' already taken`);
      return logger;
    }

    logger = function(...args) { return logger.log(...Array.from(args || [])); };

    logger.loggerName = name;

    var color = null;
    logger.enabled = false;
    var opts = {};

    arg.forEach(function(a) {
      if (a === "solo") {
        logger.enabled = true;
      }
      else if (typeof (a) === "boolean") {
        logger.enabled = a;
      }
      else if (typeof (a) === "string") {
        color = a;
      }
      opts = a;

    });

    if (opts.enabled != null) {
      logger.enabled = opts.enabled;
    }


    if (color == null) { color = opts.color; }

    var labelStyle = `background-color:${color != null ? color : hslFromLabel(name.split(":")[0])};color:white;padding:0 3px;border-radius:2px;${opts.labelStyle}`;

    loggers[name] = logger;

    var styledMethods = ["log","info","warn","error"];

    if (!isFirefox) {
      styledMethods = styledMethods.concat(["group","groupCollapsed"]);
    }

    styledMethods.forEach((i)=>{
      logger[i] = (...args)=> {
        return console[i](`%c${name}%c`,labelStyle,'color:inherit;',...Array.from(args)); // eslint-disable-line no-console
      };
    });


    Object.keys(console).forEach((i)=> {

      if (typeof (console[i]) === "function") { //eslint-disable-line no-console
        var target = (logger[i] && logger[i].bind(logger)) || console[i].bind(console); //eslint-disable-line no-console
        logger[i] = (...args) => {
          if (isEnabled(logger)) {
            return target(...Array.from(args || []));
          }
          return null;
        };
      }
    });

    logger.stack = function(obj,...args) {
      if (isEnabled(logger)) {
        if (isFirefox) { // Mozilla/Firefox
          console.log(`%c${name}`,`${labelStyle};display:block;`); //eslint-disable-line no-console
          console.groupCollapsed(obj); //eslint-disable-line no-console
          console.trace(...Array.from(args || [])); //eslint-disable-line no-console
        }
        else {
          logger.groupCollapsed(obj); //eslint-disable-line no-console
          console.trace(...Array.from(args || [])); //eslint-disable-line no-console
        }
        return console.groupEnd(); //eslint-disable-line no-console
      }
      return null;
    };

    logger.batch = function(obj,cb) {
      if (isEnabled(logger)) {
        if (isFirefox) {
          console.log(`%c${name}`,`${labelStyle};display:block;`); //eslint-disable-line no-console
        }
        logger.groupCollapsed(obj);
        cb();
        return logger.groupEnd();
      }
      return null;
    };

    return logger;
  };


  ["log","info","warn","error","trace","group","stack","groupCollapsed","batch"].forEach(function(i) {
    module.exports[i] = function(name,...args) {
      var logger = loggers[name] != null ? loggers[name] : module.exports(name,true);
      return logger[i](...Array.from(args || []));
    };
  });

  module.exports.enable = function(name) {
    if (loggers[name]) {
      loggers[name].enabled = true;
    }
  };

  module.exports.disable = function(name) {
    if (loggers[name]) {
      loggers[name].enabled = false;
    }
  };


}
else {

  // production mode

  var doNothing = function() {};

  var logger = function() {
    return logger;
  };

  consoleMethods.concat(loggerMethods).forEach((i)=>{
    logger[i] = doNothing;
  });

  module.exports = logger;
}
