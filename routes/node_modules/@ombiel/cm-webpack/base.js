
const Path = require("path");
const fs = require("fs");
const _ = require("lodash");
// var LodashModuleReplacementPlugin = require('lodash-webpack-plugin');
const webpack = require("webpack");

const autoprefixer = require("autoprefixer");
const cssnano = require("cssnano");

const ProgressBarPlugin = require('progress-bar-webpack-plugin');
const {BundleAnalyzerPlugin} = require("webpack-bundle-analyzer");

var modules = [
  "node_modules",
  Path.resolve("./"),
];

var cssLoaders = (cssModules = true, env = "dev")=>([
  {
    loader: 'style-loader',
    options: {sourceMap: true},
  },
  {
    loader: "css-loader",
    options: {
      modules: cssModules,
      importLoaders: 1,
      localIdentName: "[local]_[hash:base64:8]",
    },
  },
  {
    loader: "postcss-loader",
    options: {
      plugins: [
        autoprefixer(require("./autoprefixer"))
      ].concat(env === "prod" ? [cssnano()] : []),
    }
  }
]);

module.exports = function(opts = {}) {
  let pkgVersion = "0.0.0";
  let pkgName = "project";
  let pkg;

  try {
    pkg = JSON.parse(fs.readFileSync(Path.resolve("./package.json")));
    pkgVersion = pkg.version;
    pkgName = pkg.name;
  }
  catch (err) {
    console.warn("Unable to detect package.json - version set to 'project@0.0.0'"); //eslint-disable-line no-console
  }

  const buildPrefix = opts.buildPrefix || "cm";
  const buildEnv = opts.env || "dev";
  const publicPath = opts.publicPath == null ? "/" : opts.publicPath;


  var webpackConfig = {

    mode: buildEnv === "prod" ? "production" : "development",

    performance: {
      maxAssetSize: 400000,
      maxEntrypointSize: 400000
    },

    module: {
      rules: [
        {
          test: /\.jsx?$/,
          exclude: [
            /\.aekcss\.js$/,
            /\/node_modules\/react-dom/,
          ],
          use: {
            loader: 'babel-loader',
            options: {
              configFile: opts.babelConfig,
            }
          }

        },


        // css modules
        {
          test: /\.css$/,
          exclude: /\.global\.css$/,
          use: cssLoaders(true,buildEnv)
        },

        {
          test: /\.less$/,
          exclude: /\.global\.less$/,
          use: cssLoaders(true,buildEnv).concat(["less-loader"]),
        },

        {
          test: /\.styl$/,
          exclude: /\.global\.styl/,
          use: cssLoaders(true,buildEnv).concat(["stylus-loader"]),
        },

        {
          test: /\.scss$/,
          exclude: /\.global\.scss$/,
          use: cssLoaders(true,buildEnv).concat(["sass-loader"]),
        },



        // global css
        {
          test: /\.global\.css$/,
          use: cssLoaders(false,buildEnv)
        },

        {
          test: /\.global\.less$/,
          use: cssLoaders(false,buildEnv).concat(["less-loader"]),
        },

        {
          test: /\.global\.styl$/,
          use: cssLoaders(false,buildEnv).concat(["stylus-loader"]),
        },

        {
          test: /\.global\.scss$/,
          use: cssLoaders(false,buildEnv).concat(["sass-loader"]),
        },



        {
          test: /\.(woff|eot|otf|woff2|png|jpg|jpeg|gif|svg|ttf)$/,
          use: {
            loader: "file-loader",
            options: {
              regExp: /((.*\/(assets|public|static|src)\/)|(^.*\/))(.*)(\.)/,
              name: "[5]-[hash:6].[ext]",
            },
          },
        },
      ]
    },
    output: {
      path: "/",
      publicPath,
      filename: "[name].js",
      devtoolModuleFilenameTemplate: function(info) {
        return `${buildPrefix}:///${pkgName}/${info.resourcePath.replace(/^\.\//,"").replace(/(~|\.\.)\//g,"node_modules/")}`;
      }
    },
    resolve: {
      modules,
      extensions: [".es6.js",".js",".coffee",".jsx",".json",".css",".less",".styl"],
      // alias: {
      //   "-components": "@ombiel/aek-lib/react/components",
      //   "-aek/components": "@ombiel/aek-lib/react/components",
      //   "-aek": "@ombiel/aek-lib",
      // }
    },
    externals: {},
    resolveLoader: {modules},
    plugins: [
      // new LodashModuleReplacementPlugin({}),
      new webpack.DefinePlugin({
        // [`__${buildPrefix}ENV__`]: `"${buildEnv}"`,
        [`__aekENV__`]: `"${buildEnv}"`,
        [`__cmENV__`]: `"${buildEnv}"`,
        [`__${buildPrefix}PackageVersion__`]: `"${pkgVersion}"`,
      }),
      new ProgressBarPlugin(),
    ],
    stats: {
      colors: true,
      chunkModules: false,
      chunks: false,
      modules: false,
      entrypoints: false,
    }
  };


  // use aek-css-loader if available and configured
  const injectStyles = _.get(pkg,["ombiel","settings","aek-lib","injectStyles"])
    || _.get(pkg,["ombiel","settings","cm-lib","injectStyles"]);

  let aekCssLoaderPath;

  try {
    aekCssLoaderPath = require.resolve("@ombiel/aek-css/aek-css-loader");
  }
  catch (e) { /*empty*/ }

  if (injectStyles && aekCssLoaderPath) {

    webpackConfig.module.rules = [
      {
        test: /\.aekcss\.js$/,
        use: cssLoaders(false,buildEnv).concat(["stylus-loader",aekCssLoaderPath]),
        sideEffects: true,
      }
    ].concat(webpackConfig.module.rules);
  }

  if (process.env.CM_BUNDLE_ANALYZE === "yes") {

    webpackConfig.plugins = webpackConfig.plugins.concat([
      new BundleAnalyzerPlugin(),
    ]);

  }

  if (buildEnv === "prod") {
    // webpackConfig.plugins = webpackConfig.plugins.concat([
    //   new webpack.optimize.UglifyJsPlugin({
    //     compress: {
    //       warnings: false
    //     }
    //   }),
    //   new webpack.LoaderOptionsPlugin({
    //     minimize: true
    //   })
    // ]);
  }
  else {
    webpackConfig.devtool = "cheap-module-eval-source-map";
  }

  // if (opts.commons) {
  //   webpackConfig.plugins.push(new webpack.optimize.CommonsChunkPlugin("common","common.js"));
  // }


  return webpackConfig;
};
